var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/Stubborn.html",[0,1.367,1,1.088]],["body/classes/Stubborn.html",[0,0.456,1,1.528,2,0.58,3,0.769,4,0.769,5,0.58,6,0.456,7,1.317,8,1.317,9,0.091,10,2.227,11,0.994,12,1.543,13,0.994,14,2.151,15,0.994,16,2.213,17,0.994,18,0.994,19,1.317,20,0.994,21,0.994,22,0.994,23,0.227,24,1.317,25,3.44,26,1.727,27,2.3,28,3.156,29,2.827,30,2.933,31,1.303,32,3.034,33,1.317,34,2.045,35,1.543,36,2.045,37,2.045,38,0.994,39,1.212,40,1.543,41,2.045,42,2.508,43,0.769,44,1.317,45,1.892,46,2.707,47,1.317,48,1.749,49,2.227,50,1.291,51,2.227,52,2.3,53,1.735,54,1.085,55,0.769,56,2.022,57,1.588,58,0.769,59,0.769,60,0.769,61,1.317,62,2.231,63,0.769,64,3.239,65,2.508,66,1.486,67,3.668,68,0.769,69,1.317,70,0.994,71,1.317,72,2.636,73,0.769,74,3.061,75,2.817,76,0.066,77,2.636,78,1.317,79,0.769,80,0.769,81,2.045,82,1.727,83,1.023,84,0.769,85,1.317,86,1.317,87,0.994,88,1.212,89,0.994,90,2.5,91,1.317,92,1.317,93,1.486,94,1.317,95,1.317,96,1.727,97,2.045,98,1.317,99,1.727,100,0.769,101,0.58,102,0.363,103,1.317,104,2.309,105,0.769,106,1.317,107,1.486,108,1.317,109,0.769,110,1.317,111,0.769,112,1.317,113,0.769,114,2.045,115,2.045,116,0.769,117,1.317,118,0.363,119,1.317,120,0.994,121,0.769,122,0.769,123,0.769,124,0.769,125,1.317,126,1.727,127,1.317,128,0.769,129,0.769,130,0.769,131,1.317,132,0.769,133,0.769,134,0.769,135,0.769,136,0.769,137,0.769,138,0.769,139,2.952,140,0.769,141,0.769,142,0.769,143,1.727,144,0.769,145,0.769,146,0.769,147,1.317,148,0.769,149,0.769,150,1.317,151,0.769,152,0.769,153,0.016,154,0.016]],["title/coverage.html",[155,2.314]],["body/coverage.html",[0,2.162,1,1.431,5,2.289,6,1.798,9,0.086,14,1.798,50,1.138,62,1.798,76,0.075,88,2.162,102,1.431,118,1.431,153,0.062,154,0.062,155,2.289,156,1.798,157,3.034,158,3.034,159,3.034,160,3.034,161,3.034,162,3.034,163,3.034,164,1.798,165,3.034,166,3.648,167,2.289,168,2.289,169,3.034,170,3.034]],["title/dependencies.html",[171,1.968,172,2.076]],["body/dependencies.html",[9,0.088,16,1.92,50,1.216,76,0.078,153,0.066,154,0.066,172,2.444,173,3.24,174,3.24,175,3.24,176,3.24,177,3.24,178,3.24,179,3.24,180,3.24]],["title/miscellaneous/enumerations.html",[181,0.326,182,2.076]],["body/miscellaneous/enumerations.html",[9,0.088,23,0.885,31,2.735,35,2.735,38,2.735,39,2.148,40,2.735,54,2.008,76,0.074,153,0.061,154,0.061,164,1.779,181,0.498,182,2.265,183,2.735,184,3.625,185,3.002,186,3.002,187,2.265,188,2.265]],["title/miscellaneous/functions.html",[181,0.326,189,2.076]],["body/miscellaneous/functions.html",[9,0.083,23,0.963,48,1.935,49,2.463,51,2.463,76,0.078,153,0.067,154,0.067,167,2.463,168,2.874,181,0.541,189,2.463,190,3.265,191,3.265,192,2.463]],["title/index.html",[23,0.58,93,1.166,193,1.485]],["body/index.html",[1,1.898,9,0.091,10,1.611,11,1.611,12,2.772,13,1.272,14,0.999,15,0.779,16,1.963,17,2.57,18,2.684,20,0.779,21,0.779,22,0.779,30,1.272,32,0.779,39,0.612,46,1.272,48,0.999,54,0.795,57,0.999,62,2.178,70,1.611,75,1.611,76,0.044,77,2.57,83,0.612,87,0.779,88,0.612,89,1.858,90,2.317,102,1.007,107,1.898,118,0.487,153,0.021,154,0.021,156,0.999,188,2.631,192,1.272,194,1.686,195,1.033,196,1.033,197,3.313,198,1.033,199,1.033,200,1.686,201,1.033,202,1.686,203,2.135,204,3.558,205,1.686,206,1.686,207,1.033,208,1.686,209,1.033,210,1.686,211,1.686,212,2.135,213,1.033,214,1.033,215,1.033,216,0.779,217,1.686,218,1.033,219,1.033,220,1.033,221,1.033,222,2.135,223,1.686,224,1.033,225,1.033,226,1.033,227,1.033,228,1.033,229,1.033,230,1.033,231,1.033,232,1.686,233,1.686,234,1.033,235,2.714,236,2.911,237,1.686,238,1.686,239,1.033,240,1.033,241,3.407,242,2.464,243,1.686,244,3.071,245,1.033,246,1.033,247,1.033,248,1.033,249,1.033,250,1.686,251,1.033,252,1.033,253,1.033,254,2.464,255,1.033,256,1.033,257,2.135,258,1.611,259,1.033,260,2.464,261,0.779,262,1.033,263,1.033,264,1.033,265,1.033,266,1.033,267,1.033,268,1.033,269,1.033,270,1.033,271,3.071,272,3.203,273,1.686,274,1.033,275,1.686,276,3.203,277,2.464,278,2.464,279,2.714,280,2.135,281,2.464,282,2.464,283,2.135,284,2.135,285,1.033,286,2.135,287,1.611,288,1.686,289,1.686,290,1.033,291,1.686,292,2.135,293,2.714,294,1.033,295,1.686,296,1.033,297,0.779,298,1.033,299,1.686,300,1.033,301,1.033,302,1.033,303,1.033,304,1.033,305,1.686,306,1.033,307,1.033,308,1.033,309,1.033,310,1.033,311,1.033,312,1.033,313,1.033,314,1.033,315,1.033,316,1.033,317,1.033,318,1.033,319,1.686,320,1.686,321,1.033,322,1.033,323,1.033,324,1.686,325,1.686,326,1.033,327,1.033,328,1.033,329,1.033,330,1.033,331,1.686,332,2.464,333,1.033,334,1.033,335,1.033,336,1.033,337,1.033,338,2.714,339,1.033,340,1.033,341,1.033,342,1.033,343,1.686,344,1.033,345,1.033,346,0.779,347,1.033,348,1.033,349,1.033,350,1.033,351,1.033,352,1.033]],["title/license.html",[93,1.166,193,1.485,353,1.485]],["body/license.html",[9,0.066,76,0.066,101,1.894,153,0.051,154,0.051,156,1.488,216,1.894,287,2.446,346,1.894,353,1.894,354,2.511,355,3.591,356,2.511,357,2.511,358,2.511,359,3.242,360,2.511,361,2.511,362,2.511,363,2.511,364,2.511,365,2.511,366,3.242,367,4.192,368,2.511,369,2.511,370,2.511,371,3.591,372,2.511,373,3.242,374,2.511,375,2.511,376,2.511,377,2.511,378,2.511,379,2.511,380,2.511,381,2.511,382,3.242,383,2.511,384,2.511,385,2.511,386,2.511,387,2.511,388,2.511,389,3.242,390,3.242,391,2.511,392,2.511,393,2.511,394,2.511,395,2.511,396,2.511,397,2.511,398,2.511,399,2.511,400,2.511,401,2.511,402,2.511,403,2.511,404,2.511,405,2.511,406,2.511,407,2.511,408,2.511,409,2.511,410,2.511,411,2.511,412,2.511,413,2.511,414,2.511,415,2.511,416,2.511,417,2.511,418,2.511,419,2.511,420,2.511]],["title/modules.html",[421,2.314]],["body/modules.html",[9,0.08,76,0.08,153,0.07,154,0.07,421,2.581]],["title/overview.html",[422,2.314]],["body/overview.html",[2,2.56,9,0.08,76,0.08,153,0.069,154,0.069,422,2.56,423,3.394]],["title/miscellaneous/typealiases.html",[181,0.326,424,2.752]],["body/miscellaneous/typealiases.html",[6,1.321,9,0.089,23,0.658,45,2.262,50,1.492,56,1.682,57,2.24,66,1.321,72,2.262,76,0.061,83,1.777,102,1.783,104,2.262,107,1.777,120,2.262,153,0.046,154,0.046,181,0.37,258,2.262,261,2.262,297,2.262,425,2.23,426,4.357,427,3.893,428,3.623,429,2.999,430,2.999,431,2.999,432,3.388,433,2.999,434,2.999,435,2.999,436,2.999,437,2.999,438,2.999,439,2.23,440,3.388,441,3.623,442,3.623,443,2.23,444,2.999,445,2.23,446,2.23,447,3.893,448,2.23]],["title/miscellaneous/variables.html",[181,0.326,449,2.076]],["body/miscellaneous/variables.html",[9,0.087,23,0.948,50,1.207,53,2.426,54,1.517,66,1.906,76,0.077,118,1.781,153,0.066,154,0.066,164,1.906,181,0.533,183,2.426,187,2.426,449,2.426,450,3.216]]],"invertedIndex":[["",{"_index":9,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":88,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["0/1",{"_index":166,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":280,"title":{},"body":{"index.html":{}}}],["1.0.4",{"_index":178,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":176,"title":{},"body":{"dependencies.html":{}}}],["11/19",{"_index":163,"title":{},"body":{"coverage.html":{}}}],["14/28",{"_index":161,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":423,"title":{},"body":{"overview.html":{}}}],["200",{"_index":186,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["4.0.0",{"_index":174,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":180,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":160,"title":{},"body":{"coverage.html":{}}}],["501",{"_index":188,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["57",{"_index":162,"title":{},"body":{"coverage.html":{}}}],["8.x",{"_index":215,"title":{},"body":{"index.html":{}}}],["above",{"_index":216,"title":{},"body":{"index.html":{},"license.html":{}}}],["according",{"_index":329,"title":{},"body":{"index.html":{}}}],["action",{"_index":413,"title":{},"body":{"license.html":{}}}],["add",{"_index":223,"title":{},"body":{"index.html":{}}}],["added",{"_index":284,"title":{},"body":{"index.html":{}}}],["additional",{"_index":314,"title":{},"body":{"index.html":{}}}],["addroute",{"_index":33,"title":{},"body":{"classes/Stubborn.html":{}}}],["addroute(route",{"_index":61,"title":{},"body":{"classes/Stubborn.html":{}}}],["affected",{"_index":92,"title":{},"body":{"classes/Stubborn.html":{}}}],["afterall(async",{"_index":265,"title":{},"body":{"index.html":{}}}],["aftereach",{"_index":269,"title":{},"body":{"index.html":{}}}],["against",{"_index":233,"title":{},"body":{"index.html":{}}}],["agent",{"_index":316,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":425,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["always",{"_index":306,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":380,"title":{},"body":{"license.html":{}}}],["api",{"_index":197,"title":{},"body":{"index.html":{}}}],["args",{"_index":98,"title":{},"body":{"classes/Stubborn.html":{}}}],["arising",{"_index":417,"title":{},"body":{"license.html":{}}}],["associated",{"_index":368,"title":{},"body":{"license.html":{}}}],["async",{"_index":272,"title":{},"body":{"index.html":{}}}],["authors",{"_index":406,"title":{},"body":{"license.html":{}}}],["await",{"_index":18,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["based",{"_index":206,"title":{},"body":{"index.html":{}}}],["basically",{"_index":199,"title":{},"body":{"index.html":{}}}],["beforeall(async",{"_index":263,"title":{},"body":{"index.html":{}}}],["body",{"_index":16,"title":{},"body":{"classes/Stubborn.html":{},"dependencies.html":{},"index.html":{}}}],["boolean",{"_index":445,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["break",{"_index":253,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":255,"title":{},"body":{"index.html":{}}}],["c",{"_index":356,"title":{},"body":{"license.html":{}}}],["call",{"_index":332,"title":{},"body":{"index.html":{}}}],["called",{"_index":327,"title":{},"body":{"index.html":{}}}],["change",{"_index":250,"title":{},"body":{"index.html":{}}}],["charge",{"_index":363,"title":{},"body":{"license.html":{}}}],["checkout",{"_index":339,"title":{},"body":{"index.html":{}}}],["claim",{"_index":409,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Stubborn.html":{},"overview.html":{}}}],["clean",{"_index":267,"title":{},"body":{"index.html":{}}}],["clear",{"_index":34,"title":{},"body":{"classes/Stubborn.html":{}}}],["code",{"_index":251,"title":{},"body":{"index.html":{}}}],["commit",{"_index":344,"title":{},"body":{"index.html":{}}}],["compare",{"_index":310,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":388,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":330,"title":{},"body":{"index.html":{}}}],["connection",{"_index":419,"title":{},"body":{"license.html":{}}}],["connexion",{"_index":317,"title":{},"body":{"index.html":{}}}],["console.log",{"_index":319,"title":{},"body":{"index.html":{}}}],["const",{"_index":12,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["constants",{"_index":122,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor",{"_index":43,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor(options",{"_index":44,"title":{},"body":{"classes/Stubborn.html":{}}}],["content",{"_index":177,"title":{},"body":{"dependencies.html":{}}}],["contract",{"_index":414,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":211,"title":{},"body":{"index.html":{}}}],["copies",{"_index":382,"title":{},"body":{"license.html":{}}}],["copy",{"_index":366,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":355,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":155,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":74,"title":{},"body":{"classes/Stubborn.html":{}}}],["createserver",{"_index":119,"title":{},"body":{"classes/Stubborn.html":{}}}],["d",{"_index":224,"title":{},"body":{"index.html":{}}}],["damages",{"_index":410,"title":{},"body":{"license.html":{}}}],["deal",{"_index":370,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":420,"title":{},"body":{"license.html":{}}}],["default",{"_index":53,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/variables.html":{}}}],["defaultheaders",{"_index":127,"title":{},"body":{"classes/Stubborn.html":{}}}],["defined",{"_index":46,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["definition",{"_index":77,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["definitions",{"_index":234,"title":{},"body":{"index.html":{}}}],["delete",{"_index":35,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["delete(path",{"_index":71,"title":{},"body":{"classes/Stubborn.html":{}}}],["dependencies",{"_index":172,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["describe('test",{"_index":262,"title":{},"body":{"index.html":{}}}],["description",{"_index":65,"title":{},"body":{"classes/Stubborn.html":{}}}],["dev",{"_index":220,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":378,"title":{},"body":{"license.html":{}}}],["doc",{"_index":343,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":156,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["draft",{"_index":352,"title":{},"body":{"index.html":{}}}],["dyson",{"_index":202,"title":{},"body":{"index.html":{}}}],["emitter",{"_index":26,"title":{},"body":{"classes/Stubborn.html":{}}}],["enumerations",{"_index":182,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["etc",{"_index":243,"title":{},"body":{"index.html":{}}}],["event",{"_index":101,"title":{},"body":{"classes/Stubborn.html":{},"license.html":{}}}],["eventemitter",{"_index":52,"title":{},"body":{"classes/Stubborn.html":{}}}],["events",{"_index":118,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["events.not_implemented",{"_index":323,"title":{},"body":{"index.html":{}}}],["ex",{"_index":239,"title":{},"body":{"index.html":{}}}],["exactly",{"_index":237,"title":{},"body":{"index.html":{}}}],["example",{"_index":7,"title":{},"body":{"classes/Stubborn.html":{}}}],["expect(res).toreplywith(status_codes.success",{"_index":303,"title":{},"body":{"index.html":{}}}],["expect(res.body).toequal",{"_index":22,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["expect(res.body).toequal(body",{"_index":274,"title":{},"body":{"index.html":{}}}],["expect(res.calls.length).tobe(1",{"_index":336,"title":{},"body":{"index.html":{}}}],["expect(res.calls[0]).toequal",{"_index":337,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).tobe(501",{"_index":325,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(200",{"_index":295,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(501",{"_index":283,"title":{},"body":{"index.html":{}}}],["expected",{"_index":249,"title":{},"body":{"index.html":{}}}],["export",{"_index":125,"title":{},"body":{"classes/Stubborn.html":{}}}],["express",{"_index":397,"title":{},"body":{"license.html":{}}}],["external",{"_index":196,"title":{},"body":{"index.html":{}}}],["extra",{"_index":240,"title":{},"body":{"index.html":{}}}],["extract",{"_index":168,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["extract(req",{"_index":191,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fact",{"_index":246,"title":{},"body":{"index.html":{}}}],["false",{"_index":282,"title":{},"body":{"index.html":{}}}],["faq",{"_index":210,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{}}}],["files",{"_index":369,"title":{},"body":{"license.html":{}}}],["find",{"_index":309,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":402,"title":{},"body":{"license.html":{}}}],["follow",{"_index":348,"title":{},"body":{"index.html":{}}}],["following",{"_index":387,"title":{},"body":{"license.html":{}}}],["free",{"_index":362,"title":{},"body":{"license.html":{}}}],["fullname",{"_index":358,"title":{},"body":{"license.html":{}}}],["function",{"_index":102,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":189,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":385,"title":{},"body":{"license.html":{}}}],["get(path",{"_index":78,"title":{},"body":{"classes/Stubborn.html":{}}}],["getorigin",{"_index":36,"title":{},"body":{"classes/Stubborn.html":{}}}],["getport",{"_index":37,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport",{"_index":123,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport(this.server",{"_index":136,"title":{},"body":{"classes/Stubborn.html":{}}}],["getting",{"_index":193,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":338,"title":{},"body":{"index.html":{}}}],["github",{"_index":351,"title":{},"body":{"index.html":{}}}],["go",{"_index":350,"title":{},"body":{"index.html":{}}}],["got(`${sb.getorigin",{"_index":19,"title":{},"body":{"classes/Stubborn.html":{}}}],["granted",{"_index":361,"title":{},"body":{"license.html":{}}}],["hapi/accept",{"_index":173,"title":{},"body":{"dependencies.html":{}}}],["hardcoded",{"_index":259,"title":{},"body":{"index.html":{}}}],["header",{"_index":276,"title":{},"body":{"index.html":{}}}],["headerdefinitions",{"_index":120,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":236,"title":{},"body":{"index.html":{}}}],["help",{"_index":308,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":360,"title":{},"body":{"license.html":{}}}],["holders",{"_index":407,"title":{},"body":{"license.html":{}}}],["host",{"_index":126,"title":{},"body":{"classes/Stubborn.html":{}}}],["hot",{"_index":228,"title":{},"body":{"index.html":{}}}],["http",{"_index":82,"title":{},"body":{"classes/Stubborn.html":{}}}],["http://${this.options.host}:${this.getport",{"_index":137,"title":{},"body":{"classes/Stubborn.html":{}}}],["identifier",{"_index":157,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":277,"title":{},"body":{"index.html":{}}}],["implied",{"_index":398,"title":{},"body":{"license.html":{}}}],["import",{"_index":10,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["included",{"_index":391,"title":{},"body":{"license.html":{}}}],["including",{"_index":373,"title":{},"body":{"license.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Stubborn.html":{}}}],["initialized",{"_index":85,"title":{},"body":{"classes/Stubborn.html":{}}}],["install",{"_index":218,"title":{},"body":{"index.html":{}}}],["installation",{"_index":208,"title":{},"body":{"index.html":{}}}],["it('should",{"_index":271,"title":{},"body":{"index.html":{}}}],["json",{"_index":20,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["jsonvalue",{"_index":427,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["key",{"_index":293,"title":{},"body":{"index.html":{}}}],["kind",{"_index":396,"title":{},"body":{"license.html":{}}}],["know",{"_index":326,"title":{},"body":{"index.html":{}}}],["liability",{"_index":411,"title":{},"body":{"license.html":{}}}],["liable",{"_index":408,"title":{},"body":{"license.html":{}}}],["license",{"_index":353,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":374,"title":{},"body":{"license.html":{}}}],["limited",{"_index":399,"title":{},"body":{"license.html":{}}}],["listener",{"_index":97,"title":{},"body":{"classes/Stubborn.html":{}}}],["listening",{"_index":94,"title":{},"body":{"classes/Stubborn.html":{}}}],["literal",{"_index":447,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":229,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":130,"title":{},"body":{"classes/Stubborn.html":{}}}],["lodash",{"_index":179,"title":{},"body":{"dependencies.html":{}}}],["m",{"_index":345,"title":{},"body":{"index.html":{}}}],["master",{"_index":340,"title":{},"body":{"index.html":{}}}],["match",{"_index":204,"title":{},"body":{"index.html":{}}}],["matched",{"_index":232,"title":{},"body":{"index.html":{}}}],["matches",{"_index":275,"title":{},"body":{"index.html":{}}}],["matchfunction",{"_index":428,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["matching",{"_index":76,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meets",{"_index":201,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":401,"title":{},"body":{"license.html":{}}}],["merge",{"_index":377,"title":{},"body":{"license.html":{}}}],["method",{"_index":89,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["methods",{"_index":31,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["middleware",{"_index":429,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":181,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":313,"title":{},"body":{"index.html":{}}}],["missing",{"_index":242,"title":{},"body":{"index.html":{}}}],["mit",{"_index":354,"title":{},"body":{"license.html":{}}}],["mock",{"_index":195,"title":{},"body":{"index.html":{}}}],["modify",{"_index":376,"title":{},"body":{"license.html":{}}}],["modules",{"_index":421,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["n",{"_index":320,"title":{},"body":{"index.html":{}}}],["name",{"_index":49,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":268,"title":{},"body":{"index.html":{}}}],["new",{"_index":14,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["nextfunction",{"_index":430,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nock",{"_index":200,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":214,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":405,"title":{},"body":{"license.html":{}}}],["not_implemented",{"_index":187,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notice",{"_index":389,"title":{},"body":{"license.html":{}}}],["npm",{"_index":217,"title":{},"body":{"index.html":{}}}],["null",{"_index":57,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":56,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["object",{"_index":66,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":129,"title":{},"body":{"classes/Stubborn.html":{}}}],["obtaining",{"_index":365,"title":{},"body":{"license.html":{}}}],["on(event",{"_index":95,"title":{},"body":{"classes/Stubborn.html":{}}}],["one",{"_index":238,"title":{},"body":{"index.html":{}}}],["optional",{"_index":51,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":27,"title":{},"body":{"classes/Stubborn.html":{}}}],["options.port",{"_index":86,"title":{},"body":{"classes/Stubborn.html":{}}}],["origin",{"_index":81,"title":{},"body":{"classes/Stubborn.html":{}}}],["otherwise",{"_index":416,"title":{},"body":{"license.html":{}}}],["out",{"_index":418,"title":{},"body":{"license.html":{}}}],["overview",{"_index":422,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pach",{"_index":106,"title":{},"body":{"classes/Stubborn.html":{}}}],["package",{"_index":171,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":279,"title":{},"body":{"index.html":{}}}],["param",{"_index":139,"title":{},"body":{"classes/Stubborn.html":{}}}],["parameter",{"_index":241,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":48,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parseint(value",{"_index":301,"title":{},"body":{"index.html":{}}}],["parser",{"_index":175,"title":{},"body":{"dependencies.html":{}}}],["particular",{"_index":403,"title":{},"body":{"license.html":{}}}],["patch",{"_index":38,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["patch(path",{"_index":103,"title":{},"body":{"classes/Stubborn.html":{}}}],["path",{"_index":75,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["path).setbody(body",{"_index":143,"title":{},"body":{"classes/Stubborn.html":{}}}],["pathdefinition",{"_index":72,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["permission",{"_index":359,"title":{},"body":{"license.html":{}}}],["permit",{"_index":383,"title":{},"body":{"license.html":{}}}],["person",{"_index":364,"title":{},"body":{"license.html":{}}}],["persons",{"_index":384,"title":{},"body":{"license.html":{}}}],["picked",{"_index":256,"title":{},"body":{"index.html":{}}}],["port",{"_index":28,"title":{},"body":{"classes/Stubborn.html":{}}}],["portions",{"_index":393,"title":{},"body":{"license.html":{}}}],["post",{"_index":39,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["post(path",{"_index":108,"title":{},"body":{"classes/Stubborn.html":{}}}],["private",{"_index":25,"title":{},"body":{"classes/Stubborn.html":{}}}],["promise",{"_index":114,"title":{},"body":{"classes/Stubborn.html":{}}}],["promise(resolve",{"_index":147,"title":{},"body":{"classes/Stubborn.html":{}}}],["properties",{"_index":24,"title":{},"body":{"classes/Stubborn.html":{}}}],["property",{"_index":333,"title":{},"body":{"index.html":{}}}],["provided",{"_index":394,"title":{},"body":{"license.html":{}}}],["public",{"_index":32,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["publish",{"_index":346,"title":{},"body":{"index.html":{},"license.html":{}}}],["pull",{"_index":341,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":404,"title":{},"body":{"license.html":{}}}],["push",{"_index":347,"title":{},"body":{"index.html":{}}}],["put",{"_index":40,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["put(path",{"_index":110,"title":{},"body":{"classes/Stubborn.html":{}}}],["q",{"_index":305,"title":{},"body":{"index.html":{}}}],["query",{"_index":235,"title":{},"body":{"index.html":{}}}],["querydefinitions",{"_index":431,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["randomly",{"_index":91,"title":{},"body":{"classes/Stubborn.html":{}}}],["rebase",{"_index":342,"title":{},"body":{"index.html":{}}}],["received",{"_index":328,"title":{},"body":{"index.html":{}}}],["receiving",{"_index":312,"title":{},"body":{"index.html":{}}}],["record",{"_index":444,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["regex",{"_index":296,"title":{},"body":{"index.html":{}}}],["regexp",{"_index":297,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":64,"title":{},"body":{"classes/Stubborn.html":{}}}],["release",{"_index":212,"title":{},"body":{"index.html":{}}}],["remove",{"_index":69,"title":{},"body":{"classes/Stubborn.html":{}}}],["req",{"_index":192,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["request",{"_index":107,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["request('/?page=2",{"_index":302,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin",{"_index":273,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin()}?page=1&limit=10",{"_index":285,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin()}?page=2",{"_index":286,"title":{},"body":{"index.html":{}}}],["request(sb.getorigin",{"_index":324,"title":{},"body":{"index.html":{}}}],["requestbodydefinition",{"_index":104,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["requestdefinition",{"_index":432,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requestinfo",{"_index":433,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requestmatcher",{"_index":434,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requests",{"_index":205,"title":{},"body":{"index.html":{}}}],["res",{"_index":17,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["resolve",{"_index":150,"title":{},"body":{"classes/Stubborn.html":{}}}],["resolved",{"_index":115,"title":{},"body":{"classes/Stubborn.html":{}}}],["respond",{"_index":244,"title":{},"body":{"index.html":{}}}],["response",{"_index":258,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["responsebody",{"_index":435,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responsebodydefinition",{"_index":436,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responsedefinition",{"_index":437,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responseheaders",{"_index":438,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responses",{"_index":198,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":372,"title":{},"body":{"license.html":{}}}],["result",{"_index":153,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":154,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":90,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["returned",{"_index":311,"title":{},"body":{"index.html":{}}}],["returns",{"_index":67,"title":{},"body":{"classes/Stubborn.html":{}}}],["rights",{"_index":375,"title":{},"body":{"license.html":{}}}],["route",{"_index":62,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["route.getdefinition",{"_index":321,"title":{},"body":{"index.html":{}}}],["router",{"_index":29,"title":{},"body":{"classes/Stubborn.html":{}}}],["routes",{"_index":70,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["save",{"_index":219,"title":{},"body":{"index.html":{}}}],["sb",{"_index":13,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.clear",{"_index":270,"title":{},"body":{"index.html":{}}}],["sb.get",{"_index":289,"title":{},"body":{"index.html":{}}}],["sb.get('/').setqueryparameters",{"_index":278,"title":{},"body":{"index.html":{}}}],["sb.get('/').setresponsebody",{"_index":15,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.on",{"_index":322,"title":{},"body":{"index.html":{}}}],["sb.post",{"_index":298,"title":{},"body":{"index.html":{}}}],["sb.start",{"_index":264,"title":{},"body":{"index.html":{}}}],["sb.stop",{"_index":266,"title":{},"body":{"index.html":{}}}],["see",{"_index":304,"title":{},"body":{"index.html":{}}}],["sell",{"_index":381,"title":{},"body":{"license.html":{}}}],["send",{"_index":252,"title":{},"body":{"index.html":{}}}],["sent",{"_index":248,"title":{},"body":{"index.html":{}}}],["separate",{"_index":207,"title":{},"body":{"index.html":{}}}],["server",{"_index":30,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["serverresponse",{"_index":448,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["set",{"_index":87,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["setheaders",{"_index":318,"title":{},"body":{"index.html":{}}}],["setheaders(null",{"_index":291,"title":{},"body":{"index.html":{}}}],["setqueryparameters",{"_index":290,"title":{},"body":{"index.html":{}}}],["setresponsebody('content",{"_index":335,"title":{},"body":{"index.html":{}}}],["setup",{"_index":334,"title":{},"body":{"index.html":{}}}],["shall",{"_index":390,"title":{},"body":{"license.html":{}}}],["slug",{"_index":299,"title":{},"body":{"index.html":{}}}],["software",{"_index":367,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/.../bodymatcher.ts",{"_index":190,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":183,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":426,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../stubborn.ts",{"_index":439,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/@types/index.ts",{"_index":443,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/constants.ts",{"_index":164,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/matchers/bodymatcher.ts",{"_index":167,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/route.ts",{"_index":159,"title":{},"body":{"coverage.html":{}}}],["src/stubborn.ts",{"_index":6,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/stubborn.ts:105",{"_index":105,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:115",{"_index":109,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:125",{"_index":111,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:133",{"_index":63,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:141",{"_index":113,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:156",{"_index":116,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:162",{"_index":100,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:33",{"_index":60,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:34",{"_index":58,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:35",{"_index":59,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:36",{"_index":55,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:37",{"_index":47,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:60",{"_index":84,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:68",{"_index":80,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:75",{"_index":68,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:86",{"_index":73,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:95",{"_index":79,"title":{},"body":{"classes/Stubborn.html":{}}}],["start",{"_index":41,"title":{},"body":{"classes/Stubborn.html":{}}}],["start(port",{"_index":112,"title":{},"body":{"classes/Stubborn.html":{}}}],["started",{"_index":93,"title":{"index.html":{},"license.html":{}},"body":{"classes/Stubborn.html":{}}}],["statements",{"_index":158,"title":{},"body":{"coverage.html":{}}}],["status_codes",{"_index":184,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stop",{"_index":42,"title":{},"body":{"classes/Stubborn.html":{}}}],["stopped",{"_index":117,"title":{},"body":{"classes/Stubborn.html":{}}}],["strictly",{"_index":203,"title":{},"body":{"index.html":{}}}],["string",{"_index":83,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stubborn",{"_index":1,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["stubbornoptions",{"_index":45,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["stuff",{"_index":294,"title":{},"body":{"index.html":{}}}],["subject",{"_index":386,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":379,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":392,"title":{},"body":{"license.html":{}}}],["success",{"_index":185,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["symbol",{"_index":96,"title":{},"body":{"classes/Stubborn.html":{}}}],["symbol.for('not_implemented",{"_index":450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":170,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":169,"title":{},"body":{"coverage.html":{}}}],["tagsthen",{"_index":349,"title":{},"body":{"index.html":{}}}],["template",{"_index":261,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["templatearray",{"_index":440,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["templatefunction",{"_index":441,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["templateobject",{"_index":442,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["test",{"_index":254,"title":{},"body":{"index.html":{}}}],["tested",{"_index":213,"title":{},"body":{"index.html":{}}}],["testing",{"_index":226,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":307,"title":{},"body":{"index.html":{}}}],["this.emitter",{"_index":135,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.on(event",{"_index":152,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.options",{"_index":128,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.options.host",{"_index":134,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.port",{"_index":131,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router",{"_index":133,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.addroute(route",{"_index":146,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.clear",{"_index":138,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.delete",{"_index":140,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.get",{"_index":141,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.patch",{"_index":142,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.post",{"_index":144,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.put",{"_index":145,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.handle(this.server",{"_index":149,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server",{"_index":132,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.close",{"_index":151,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.listen(this.port",{"_index":148,"title":{},"body":{"classes/Stubborn.html":{}}}],["throwhttperrors",{"_index":281,"title":{},"body":{"index.html":{}}}],["tool",{"_index":227,"title":{},"body":{"index.html":{}}}],["tort",{"_index":415,"title":{},"body":{"license.html":{}}}],["true",{"_index":21,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["type",{"_index":50,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":424,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":121,"title":{},"body":{"classes/Stubborn.html":{}}}],["typescript",{"_index":8,"title":{},"body":{"classes/Stubborn.html":{}}}],["undefined",{"_index":446,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unload",{"_index":230,"title":{},"body":{"index.html":{}}}],["up",{"_index":257,"title":{},"body":{"index.html":{}}}],["update",{"_index":331,"title":{},"body":{"index.html":{}}}],["usage",{"_index":209,"title":{},"body":{"index.html":{}}}],["use",{"_index":287,"title":{},"body":{"index.html":{},"license.html":{}}}],["user",{"_index":315,"title":{},"body":{"index.html":{}}}],["using",{"_index":260,"title":{},"body":{"index.html":{}}}],["utils",{"_index":124,"title":{},"body":{"classes/Stubborn.html":{}}}],["validates",{"_index":247,"title":{},"body":{"index.html":{}}}],["value",{"_index":54,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":165,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":449,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["very",{"_index":245,"title":{},"body":{"index.html":{}}}],["void",{"_index":99,"title":{},"body":{"classes/Stubborn.html":{}}}],["warranties",{"_index":400,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":395,"title":{},"body":{"license.html":{}}}],["web",{"_index":194,"title":{},"body":{"index.html":{}}}],["webserver",{"_index":231,"title":{},"body":{"index.html":{}}}],["whether",{"_index":412,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":288,"title":{},"body":{"index.html":{}}}],["without",{"_index":371,"title":{},"body":{"license.html":{}}}],["ws",{"_index":11,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["wsusage",{"_index":225,"title":{},"body":{"index.html":{}}}],["wsyarn",{"_index":221,"title":{},"body":{"index.html":{}}}],["x",{"_index":292,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":222,"title":{},"body":{"index.html":{}}}],["year",{"_index":357,"title":{},"body":{"license.html":{}}}],["z",{"_index":300,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Stubborn.html":{"url":"classes/Stubborn.html","title":"class - Stubborn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stubborn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Stubborn.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n                        \n                            ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n                        \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitter\n                            \n                            \n                                    Private\n                                options\n                            \n                            \n                                    Private\n                                port\n                            \n                            \n                                    Private\n                                router\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRoute\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getOrigin\n                            \n                            \n                                    Public\n                                getPort\n                            \n                            \n                                    Public\n                                on\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: StubbornOptions)\n                    \n                \n                        \n                            \n                                Defined in src/Stubborn.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        StubbornOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            emitter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventEmitter\n\n                        \n                    \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StubbornOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            port\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:33\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRoute\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRoute(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:133\n                \n            \n\n\n            \n                \n                    Register a new route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route a Route object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:75\n                \n            \n\n\n            \n                \n                    Remove all routes from the server\n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:86\n                \n            \n\n\n            \n                \n                    Create and Register a new DELETE route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:95\n                \n            \n\n\n            \n                \n                    Create and Register a new GET route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOrigin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrigin()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:68\n                \n            \n\n\n            \n                \n                    Returns the server origin (http://:)\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the server origin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPort\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPort()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:60\n                \n            \n\n\n            \n                \n                    Returns the server port.\nIf the server is initialized with options.port set to 0 this method\nwill return the randomly affected port only after the server is started\n\n\n                    \n                    \n                    \n                        Returns :     number | null\n\n                    \n                    \n                        Listening port or null if the server is not started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            on\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    on(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:105\n                \n            \n\n\n            \n                \n                    Create and Register a new PACH route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:115\n                \n            \n\n\n            \n                \n                    Create and Register a new POST route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:125\n                \n            \n\n\n            \n                \n                    Create and Register a new PUT route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(port: number)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:141\n                \n            \n\n\n            \n                \n                    Start the Stubborn server\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:156\n                \n            \n\n\n            \n                \n                    Stop the Stubborn server\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is stopped\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import EventEmitter from 'events';\nimport { createServer, Server } from 'http';\n\nimport {\n  HeaderDefinitions,\n  PathDefinition,\n  RequestBodyDefinition,\n} from './@types';\nimport { METHODS } from './constants';\nimport { Route } from './Route';\nimport { Router } from './Router';\nimport { getServerPort } from './utils';\n\nexport type StubbornOptions = {\n  host?: string;\n  defaultHeaders?: HeaderDefinitions;\n};\n\n/**\n * @example\n * ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n */\nexport class Stubborn {\n  private server: Server;\n  private port: number | null;\n  private router: Router;\n  private options: StubbornOptions;\n  private emitter: EventEmitter = new EventEmitter();\n\n  constructor(options: StubbornOptions = {}) {\n    this.options = Object.assign(\n      {\n        host: 'localhost',\n        defaultHeaders: {},\n      },\n      options,\n    );\n\n    this.port = null;\n    this.server = createServer();\n    this.router = new Router({ host: this.options.host }, this.emitter);\n  }\n\n  /**\n   * Returns the server port.\n   *\n   * If the server is initialized with options.port set to 0 this method\n   * will return the randomly affected port only after the server is started\n   * @returns Listening port or null if the server is not started\n   */\n  public getPort(): number | null {\n    return getServerPort(this.server);\n  }\n\n  /**\n   * Returns the server origin (http://:)\n   * @returns the server origin\n   */\n  public getOrigin(): string {\n    return `http://${this.options.host}:${this.getPort()}`;\n  }\n\n  /**\n   * Remove all routes from the server\n   */\n  public clear() {\n    this.router.clear();\n\n    return this;\n  }\n\n  /**\n   * Create and Register a new DELETE route\n   *\n   * @param path Path matching definition\n   */\n  public delete(path: PathDefinition) {\n    return this.router.createRoute(METHODS.DELETE, path);\n  }\n\n  /**\n   * Create and Register a new GET route\n   *\n   * @param path Path matching definition\n   */\n  public get(path: PathDefinition) {\n    return this.router.createRoute(METHODS.GET, path);\n  }\n\n  /**\n   * Create and Register a new PACH route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public patch(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.PATCH, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new POST route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public post(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.POST, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new PUT route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public put(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.PUT, path).setBody(body);\n  }\n  /**\n   * Register a new route\n   *\n   * @param route Route a Route object\n   */\n  public addRoute(route: Route) {\n    return this.router.addRoute(route);\n  }\n\n  /**\n   * Start the Stubborn server\n   * @returns Promise object resolved when server is started\n   */\n  public start(port: number = 0) {\n    this.port = port;\n\n    return new Promise(resolve => {\n      this.server.listen(this.port);\n      this.router.handle(this.server);\n      resolve();\n    });\n  }\n\n  /**\n   * Stop the Stubborn server\n   *\n   * @returns Promise object resolved when server is stopped\n   */\n  public stop() {\n    return new Promise(resolve => {\n      this.server.close(() => resolve());\n    });\n  }\n\n  public on(event: symbol, listener: (...args: any[]) => void) {\n    this.emitter.on(event, listener);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Route.ts\n            \n            class\n            Route\n            \n                50 %\n                (14/28)\n            \n        \n        \n            \n                \n                src/Stubborn.ts\n            \n            class\n            Stubborn\n            \n                57 %\n                (11/19)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            EVENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/matchers/BodyMatcher.ts\n            \n            function\n            extract\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/accept : ^4.0.0\n        \n            body-parser : ^1.19.0\n        \n            content-type : ^1.0.4\n        \n            lodash : ^4.17.15\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            METHODS   (src/.../constants.ts)\n                        \n                        \n                            STATUS_CODES   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        METHODS\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        STATUS_CODES\n                    \n                \n                        \n                            \n                                 SUCCESS\n                            \n                        \n                        \n                            \n                                Value : 200\n                            \n                        \n                        \n                            \n                                 NOT_IMPLEMENTED\n                            \n                        \n                        \n                            \n                                Value : 501\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            extract   (src/.../BodyMatcher.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/matchers/BodyMatcher.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            extract\n                        \n                        \n                    \n                \n            \n            \n                \nextract(req)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nStubborn\n \n\n\nStubborn web server to mock external api responses. It is basically nock meets Dyson. Stubborn will strictly match the requests based on the definition like nock but in a separate web server like Dyson.\n\n\n\nInstallation\nUsage\nAPI\nFAQ\nContributing\nRelease\n\n\n\n\n\nInstallation\nStubborn is tested on NodeJS 8.x and above.\nNpm:\nnpm install --save-dev stubborn-wsYarn:\nyarn add -D stubborn-wsUsage\nStubborn is a testing tool that let you hot load and unload routes into a webserver.\nRequests are strictly matched against routes definitions based on Method, Path, Query parameters, Headers and Body.\nIf the request does not exactly match one route definition (ex: extra parameter, missing parameter, value does not match, etc), Stubborn will respond with a 501.\nThe very fact that Stubborn respond to the request validates that the parameters sent are the expected one, any change in the code that send the request will break the test. Any breaking change will be picked up by your test.\nStubborn response headers and body can be hardcoded or defined using a template.\nimport request from 'got';\nimport { Stubborn } from 'stubborn-ws';\n\ndescribe('Test', () => {\n  const sb = new Stubborn();\n\n  beforeAll(async () => await sb.start());\n  afterAll(async () => await sb.stop());\n\n  // Clean up all routes after a test if needed\n  afterEach(() => sb.clear());\n\n  it('should respond to query', async () => {\n    const body = { some: 'body' };\n    sb.get('/').setResponseBody({ some: 'body' });\n\n    const res = await request(`${sb.getOrigin()}`, { json: true });\n\n    expect(res.body).toEqual(body);\n  });\n});Stubborn strictly matches the request against the route definition.\nIf a query parameter or a header is missing, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is missing', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}`, { throwHttpErrors: false });\n\n  expect(res.statusCode).toEqual(501);\n});If a query parameter or a header is added, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is added', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}?page=1&limit=10`, {\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(501);\n});If a query parameter or a header does not match the route definition, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter does not match the definition', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(501);\n});You can use null as wildcard\nit('should match using wildcard', async () => {\n  sb.get('/')\n    .setQueryParameters({ page: null })\n    .setHeaders(null);\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    headers: { 'x-api-key': 'api key', 'any-other-header': 'stuff' },\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use regex to match a parameter, header or body\nit('should match using a regexp', async () => {\n  sb.post('/', {\n    slug: /^[a-z\\-]*$/,\n  });\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    method: 'POST',\n    body: { slug: 'stubborn-ws' },\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use a function to match a parameter, header or body\nit('should match using a function', async () => {\n  sb.get('/').setQueryParameters({\n    page: value => parseInt(value as string) > 0,\n  });\n\n  const res = await request('/?page=2');\n\n  expect(res).toReplyWith(STATUS_CODES.SUCCESS);\n});Public API\nSee the API documentation\nFAQ\nQ: Stubborn is not matching my route definition and always return a 501\nStubborn is STUBBORN, therefore it will return a 501 if it does not exactly match the route definition you have set up.\nTo help you find what missing in the route definition, you can compare it to the response body returned when receiving a 501:\nimport {EVENTS} from 'stubborn-ws';\n\nconst route = sb\n  .get('/')\n  // This header definition will miss additional header added by got, like user-agent, connexion, etc...\n  .setHeaders({ 'X-Api-Key': 'test' });\n\nconsole.log('--- DEFINITION ---\\n', route.getDefinition());\nsb.on(\n  EVENTS.NOT_IMPLEMENTED, \n  (req) => console.log('--- REQUEST ---\\n', req)\n);\n\nconst res = await request(sb.getOrigin(), {\n  headers: { 'x-api-key': 'api key' },\n});\n\nexpect(res.statusCode).toBe(501);\nQ: How do I know if stubborn has been called and matched the route defined?\nStubborn will return a 501 (Not Implemented) if it received a request but cannot match any route.\nIf the request matches the route it will respond according to the route response configuration and update the call property of the route\n  async function call() {\n    return request(sb.getOrigin());\n  }\n\n  // No route setup in Stubborn\n  const res = await call();\n\n  expect(res.statusCode).toBe(501);\n  expect(res.body).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n    // ...\n  });\n\n\n  const route = sb.get('/')\n    .setHeaders(null)\n    .setResponseBody('content');\n\n\n  const res = await call();\n  expect(res.calls.length).toBe(1);\n  expect(res.calls[0]).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n      // ...\n    });Contributing\nRelease\ngit checkout master\ngit pull --rebase\nyarn doc\ngit add .\ngit commit -m 'doc(): Update documentation'\nyarn publish --\ngit push --follow-tagsThen go to github to draft a new release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) [year] [fullname]\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HeaderDefinitions   (src/.../index.ts)\n                        \n                        \n                            JsonValue   (src/.../index.ts)\n                        \n                        \n                            MatchFunction   (src/.../index.ts)\n                        \n                        \n                            Middleware   (src/.../index.ts)\n                        \n                        \n                            NextFunction   (src/.../index.ts)\n                        \n                        \n                            PathDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryDefinitions   (src/.../index.ts)\n                        \n                        \n                            Request   (src/.../index.ts)\n                        \n                        \n                            RequestBodyDefinition   (src/.../index.ts)\n                        \n                        \n                            RequestDefinition   (src/.../index.ts)\n                        \n                        \n                            RequestInfo   (src/.../index.ts)\n                        \n                        \n                            RequestMatcher   (src/.../index.ts)\n                        \n                        \n                            Response   (src/.../index.ts)\n                        \n                        \n                            ResponseBody   (src/.../index.ts)\n                        \n                        \n                            ResponseBodyDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseHeaders   (src/.../index.ts)\n                        \n                        \n                            StubbornOptions   (src/.../Stubborn.ts)\n                        \n                        \n                            Template   (src/.../index.ts)\n                        \n                        \n                            TemplateArray   (src/.../index.ts)\n                        \n                        \n                            TemplateFunction   (src/.../index.ts)\n                        \n                        \n                            TemplateObject   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/@types/index.ts\n    \n    \n        \n            \n                \n                    \n                    HeaderDefinitions\n                \n            \n            \n                \n                        Record | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonValue\n                \n            \n            \n                \n                        null | string | number | boolean | object\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatchFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Middleware\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PathDefinition\n                \n            \n            \n                \n                            null | string | RegExp | MatchFunction\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryDefinitions\n                \n            \n            \n                \n                        Record | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Request\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestBodyDefinition\n                \n            \n            \n                \n                            RequestDefinition\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestDefinition\n                \n            \n            \n                \n                        null | RegExp | MatchFunction | JsonValue | undefined\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMatcher\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                            ServerResponse\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBody\n                \n            \n            \n                \n                            JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBodyDefinition\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseDefinition\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseHeaders\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Template\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject | TemplateArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateArray\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/Stubborn.ts\n    \n    \n        \n            \n                \n                    \n                    StubbornOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENTS   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EVENTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  NOT_IMPLEMENTED: Symbol.for('NOT_IMPLEMENTED'),\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
