var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/Stubborn.html",[0,1.029,1,0.755]],["body/classes/Stubborn.html",[0,0.393,1,1.124,2,0.533,3,0.746,4,0.746,5,0.533,6,0.393,7,1.254,8,0.897,9,0.123,10,1.748,11,0.897,12,1.361,13,0.897,14,1.616,15,0.897,16,1.739,17,0.897,18,0.897,19,0.897,20,0.897,21,0.897,22,1.254,23,0.289,24,1.254,25,2.905,26,2.123,27,2.837,28,2.567,29,2.444,30,1.16,31,2.466,32,1.903,33,1.361,34,1.903,35,1.903,36,0.897,37,1.361,38,1.361,39,1.903,40,2.3,41,0.746,42,1.254,43,1.644,44,2.192,45,1.254,46,1.748,47,2.445,48,1.124,49,2.445,50,1.748,51,1.289,52,0.746,53,0.746,54,0.746,55,0.746,56,1.254,57,0.897,58,3.184,59,1.254,60,2.223,61,0.746,62,2.759,63,2.759,64,1.455,65,2.123,66,2.321,67,0.093,68,2.223,69,1.254,70,0.746,71,0.746,72,1.903,73,1.623,74,1.16,75,0.746,76,1.254,77,1.254,78,1.254,79,1.903,80,0.897,81,2.077,82,1.254,83,1.254,84,1.644,85,1.254,86,1.254,87,1.973,88,0.746,89,1.254,90,1.903,91,1.003,92,1.212,93,1.254,94,0.746,95,1.254,96,0.746,97,1.254,98,0.746,99,1.903,100,1.361,101,1.903,102,0.746,103,1.254,104,1.254,105,0.897,106,0.746,107,0.746,108,0.746,109,0.746,110,1.254,111,1.623,112,1.254,113,0.746,114,0.746,115,0.746,116,1.254,117,0.746,118,0.746,119,0.746,120,0.746,121,0.746,122,0.746,123,2.567,124,0.746,125,1.254,126,0.746,127,0.746,128,1.623,129,0.746,130,0.746,131,1.254,132,0.746,133,0.746,134,1.254,135,0.746,136,0.024,137,0.024]],["title/coverage.html",[138,1.866]],["body/coverage.html",[0,1.703,1,1.059,5,1.956,6,1.442,9,0.113,14,1.442,48,1.059,64,1.442,67,0.103,136,0.087,137,0.087,138,1.956,139,1.956,140,2.737,141,2.737,142,2.737,143,2.737,144,2.737,145,2.737,146,2.737,147,2.737,148,2.737]],["title/dependencies.html",[149,1.656,150,1.667]],["body/dependencies.html",[9,0.118,16,1.474,48,1.082,67,0.104,136,0.089,137,0.089,150,2,151,2.797,152,2.797,153,2.797,154,2.797,155,2.797,156,2.797,157,2.797,158,2.797]],["title/miscellaneous/enumerations.html",[159,0.641,160,1.667]],["body/miscellaneous/enumerations.html",[9,0.119,23,1.004,30,2.238,33,2.238,36,2.238,37,2.238,38,2.238,67,0.1,91,1.935,136,0.083,137,0.083,159,1.004,160,1.856,161,3.13,162,3.13,163,2.596,164,2.596,165,2.596,166,2.596,167,1.856]],["title/index.html",[23,0.641,84,1.184,168,1.656]],["body/index.html",[1,1.347,8,1.946,9,0.122,10,1.329,11,1.613,12,2.135,13,0.87,14,0.98,15,0.87,16,1.435,17,1.946,18,2.135,19,0.87,20,0.87,21,0.87,29,1.329,31,0.87,44,0.87,46,1.329,51,0.98,57,1.613,64,1.189,66,0.87,67,0.059,68,1.946,80,0.87,81,1.613,91,0.641,92,1.332,136,0.039,137,0.039,139,1.329,167,2.135,169,1.859,170,1.216,171,1.216,172,2.87,173,1.216,174,1.216,175,1.859,176,1.216,177,1.859,178,2.257,179,2.722,180,1.859,181,1.859,182,1.216,183,1.859,184,1.859,185,1.859,186,2.257,187,1.216,188,1.216,189,1.216,190,1.216,191,1.859,192,1.216,193,1.216,194,1.216,195,2.527,196,1.859,197,1.216,198,1.216,199,1.216,200,1.216,201,1.216,202,1.216,203,1.216,204,1.216,205,1.859,206,1.216,207,2.722,208,2.257,209,1.216,210,1.859,211,1.216,212,1.216,213,3.079,214,2.257,215,1.216,216,2.986,217,1.216,218,1.216,219,1.216,220,1.216,221,1.216,222,1.859,223,1.216,224,1.216,225,1.216,226,2.257,227,1.216,228,1.216,229,1.859,230,0.87,231,1.216,232,1.859,233,0.87,234,1.216,235,1.216,236,1.216,237,1.216,238,1.216,239,1.216,240,1.216,241,1.216,242,1.216,243,2.722,244,2.722,245,1.216,246,1.216,247,2.527,248,2.257,249,2.257,250,2.527,251,2.257,252,1.216,253,2.527,254,2.527,255,2.257,256,1.859,257,1.216,258,1.859,259,1.216,260,1.859,261,1.216,262,1.216,263,1.216,264,1.216,265,1.859,266,1.216,267,1.216,268,1.216,269,2.722,270,1.216,271,1.216,272,1.216,273,1.216,274,1.859,275,1.216,276,1.216,277,1.216,278,1.216,279,1.216,280,1.216,281,1.216,282,1.216,283,1.216,284,1.216]],["title/modules.html",[285,1.866]],["body/modules.html",[9,0.108,67,0.108,136,0.094,137,0.094,285,2.109]],["title/overview.html",[286,1.866]],["body/overview.html",[2,2.092,9,0.107,67,0.107,136,0.093,137,0.093,286,2.092,287,2.927]],["title/miscellaneous/typealiases.html",[159,0.641,288,2.332]],["body/miscellaneous/typealiases.html",[6,1.027,9,0.119,23,0.754,43,1.864,48,1.33,50,1.393,51,1.725,60,1.864,67,0.083,74,1.864,87,1.864,92,1.375,100,1.393,105,1.864,136,0.062,137,0.062,159,0.754,230,1.864,233,1.864,289,1.948,290,3.759,291,3.368,292,3.139,293,2.608,294,2.608,295,2.608,296,2.939,297,2.608,298,2.608,299,2.608,300,2.608,301,2.608,302,2.608,303,1.948,304,2.939,305,3.139,306,3.139,307,1.948,308,2.608,309,1.948,310,3.272,311,2.608,312,3.368,313,1.948]]],"invertedIndex":[["",{"_index":9,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":79,"title":{},"body":{"classes/Stubborn.html":{}}}],["1",{"_index":251,"title":{},"body":{"index.html":{}}}],["1.0.4",{"_index":156,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":154,"title":{},"body":{"dependencies.html":{}}}],["10/16",{"_index":146,"title":{},"body":{"coverage.html":{}}}],["14/28",{"_index":144,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":287,"title":{},"body":{"overview.html":{}}}],["200",{"_index":165,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3.1.3",{"_index":152,"title":{},"body":{"dependencies.html":{}}}],["4.17.11",{"_index":158,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":143,"title":{},"body":{"coverage.html":{}}}],["501",{"_index":167,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["62",{"_index":145,"title":{},"body":{"coverage.html":{}}}],["8.x",{"_index":189,"title":{},"body":{"index.html":{}}}],["above",{"_index":190,"title":{},"body":{"index.html":{}}}],["accept",{"_index":151,"title":{},"body":{"dependencies.html":{}}}],["add",{"_index":196,"title":{},"body":{"index.html":{}}}],["added",{"_index":256,"title":{},"body":{"index.html":{}}}],["affected",{"_index":83,"title":{},"body":{"classes/Stubborn.html":{}}}],["afterall(async",{"_index":237,"title":{},"body":{"index.html":{}}}],["aftereach",{"_index":241,"title":{},"body":{"index.html":{}}}],["against",{"_index":205,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":289,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["api",{"_index":172,"title":{},"body":{"index.html":{}}}],["async",{"_index":244,"title":{},"body":{"index.html":{}}}],["await",{"_index":18,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["based",{"_index":181,"title":{},"body":{"index.html":{}}}],["basically",{"_index":174,"title":{},"body":{"index.html":{}}}],["beforeall(async",{"_index":235,"title":{},"body":{"index.html":{}}}],["body",{"_index":16,"title":{},"body":{"classes/Stubborn.html":{},"dependencies.html":{},"index.html":{}}}],["boolean",{"_index":309,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["break",{"_index":225,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":227,"title":{},"body":{"index.html":{}}}],["change",{"_index":222,"title":{},"body":{"index.html":{}}}],["checkout",{"_index":270,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Stubborn.html":{},"overview.html":{}}}],["clean",{"_index":239,"title":{},"body":{"index.html":{}}}],["clear",{"_index":32,"title":{},"body":{"classes/Stubborn.html":{}}}],["code",{"_index":223,"title":{},"body":{"index.html":{}}}],["commit",{"_index":275,"title":{},"body":{"index.html":{}}}],["const",{"_index":12,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["constants",{"_index":107,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor",{"_index":41,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor(options",{"_index":42,"title":{},"body":{"classes/Stubborn.html":{}}}],["content",{"_index":155,"title":{},"body":{"dependencies.html":{}}}],["contributing",{"_index":185,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":138,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":62,"title":{},"body":{"classes/Stubborn.html":{}}}],["createserver",{"_index":104,"title":{},"body":{"classes/Stubborn.html":{}}}],["d",{"_index":197,"title":{},"body":{"index.html":{}}}],["default",{"_index":90,"title":{},"body":{"classes/Stubborn.html":{}}}],["defaultheaders",{"_index":112,"title":{},"body":{"classes/Stubborn.html":{}}}],["defined",{"_index":44,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["definition",{"_index":68,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["definitions",{"_index":206,"title":{},"body":{"index.html":{}}}],["delete",{"_index":33,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["delete(path",{"_index":59,"title":{},"body":{"classes/Stubborn.html":{}}}],["dependencies",{"_index":150,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["describe('test",{"_index":234,"title":{},"body":{"index.html":{}}}],["description",{"_index":65,"title":{},"body":{"classes/Stubborn.html":{}}}],["dev",{"_index":194,"title":{},"body":{"index.html":{}}}],["doc",{"_index":274,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":139,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":284,"title":{},"body":{"index.html":{}}}],["dyson",{"_index":177,"title":{},"body":{"index.html":{}}}],["enumerations",{"_index":160,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["etc",{"_index":215,"title":{},"body":{"index.html":{}}}],["ex",{"_index":211,"title":{},"body":{"index.html":{}}}],["exactly",{"_index":209,"title":{},"body":{"index.html":{}}}],["example",{"_index":7,"title":{},"body":{"classes/Stubborn.html":{}}}],["expect(res.body).toequal",{"_index":22,"title":{},"body":{"classes/Stubborn.html":{}}}],["expect(res.body).toequal(body",{"_index":245,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(200",{"_index":267,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(501",{"_index":255,"title":{},"body":{"index.html":{}}}],["expected",{"_index":221,"title":{},"body":{"index.html":{}}}],["export",{"_index":110,"title":{},"body":{"classes/Stubborn.html":{}}}],["external",{"_index":171,"title":{},"body":{"index.html":{}}}],["extra",{"_index":212,"title":{},"body":{"index.html":{}}}],["fact",{"_index":218,"title":{},"body":{"index.html":{}}}],["false",{"_index":254,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{}}}],["follow",{"_index":280,"title":{},"body":{"index.html":{}}}],["function",{"_index":310,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["get(path",{"_index":69,"title":{},"body":{"classes/Stubborn.html":{}}}],["getorigin",{"_index":34,"title":{},"body":{"classes/Stubborn.html":{}}}],["getport",{"_index":35,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport",{"_index":108,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport(this.server",{"_index":120,"title":{},"body":{"classes/Stubborn.html":{}}}],["getting",{"_index":168,"title":{"index.html":{}},"body":{}}],["git",{"_index":269,"title":{},"body":{"index.html":{}}}],["github",{"_index":283,"title":{},"body":{"index.html":{}}}],["go",{"_index":282,"title":{},"body":{"index.html":{}}}],["got(${sb.getorigin",{"_index":252,"title":{},"body":{"index.html":{}}}],["got(${sb.getorigin()}?page=1&limit=10",{"_index":257,"title":{},"body":{"index.html":{}}}],["got(${sb.getorigin()}?page=2",{"_index":258,"title":{},"body":{"index.html":{}}}],["got(`${sb.getorigin",{"_index":19,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["hardcoded",{"_index":231,"title":{},"body":{"index.html":{}}}],["header",{"_index":247,"title":{},"body":{"index.html":{}}}],["headerdefinitions",{"_index":105,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":208,"title":{},"body":{"index.html":{}}}],["host",{"_index":111,"title":{},"body":{"classes/Stubborn.html":{}}}],["hot",{"_index":200,"title":{},"body":{"index.html":{}}}],["http",{"_index":73,"title":{},"body":{"classes/Stubborn.html":{}}}],["http://${this.options.host}:${this.getport",{"_index":121,"title":{},"body":{"classes/Stubborn.html":{}}}],["identifier",{"_index":140,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":248,"title":{},"body":{"index.html":{}}}],["import",{"_index":10,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Stubborn.html":{}}}],["initialized",{"_index":76,"title":{},"body":{"classes/Stubborn.html":{}}}],["install",{"_index":192,"title":{},"body":{"index.html":{}}}],["installation",{"_index":183,"title":{},"body":{"index.html":{}}}],["it('should",{"_index":243,"title":{},"body":{"index.html":{}}}],["json",{"_index":20,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["jsonvalue",{"_index":291,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["key",{"_index":265,"title":{},"body":{"index.html":{}}}],["listening",{"_index":85,"title":{},"body":{"classes/Stubborn.html":{}}}],["literal",{"_index":312,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":201,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":115,"title":{},"body":{"classes/Stubborn.html":{}}}],["lodash",{"_index":157,"title":{},"body":{"dependencies.html":{}}}],["m",{"_index":276,"title":{},"body":{"index.html":{}}}],["master",{"_index":271,"title":{},"body":{"index.html":{}}}],["match",{"_index":179,"title":{},"body":{"index.html":{}}}],["matched",{"_index":204,"title":{},"body":{"index.html":{}}}],["matches",{"_index":246,"title":{},"body":{"index.html":{}}}],["matchfunction",{"_index":292,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["meets",{"_index":176,"title":{},"body":{"index.html":{}}}],["method",{"_index":80,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["methods",{"_index":30,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["middleware",{"_index":293,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":159,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":214,"title":{},"body":{"index.html":{}}}],["mock",{"_index":170,"title":{},"body":{"index.html":{}}}],["modules",{"_index":285,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":47,"title":{},"body":{"classes/Stubborn.html":{}}}],["needed",{"_index":240,"title":{},"body":{"index.html":{}}}],["new",{"_index":14,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["nextfunction",{"_index":294,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nock",{"_index":175,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":188,"title":{},"body":{"index.html":{}}}],["not_implemented",{"_index":166,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["npm",{"_index":191,"title":{},"body":{"index.html":{}}}],["null",{"_index":51,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":50,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["object",{"_index":100,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["object.assign",{"_index":114,"title":{},"body":{"classes/Stubborn.html":{}}}],["one",{"_index":210,"title":{},"body":{"index.html":{}}}],["optional",{"_index":49,"title":{},"body":{"classes/Stubborn.html":{}}}],["options",{"_index":26,"title":{},"body":{"classes/Stubborn.html":{}}}],["options.port",{"_index":77,"title":{},"body":{"classes/Stubborn.html":{}}}],["origin",{"_index":72,"title":{},"body":{"classes/Stubborn.html":{}}}],["overview",{"_index":286,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pach",{"_index":89,"title":{},"body":{"classes/Stubborn.html":{}}}],["package",{"_index":149,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":250,"title":{},"body":{"index.html":{}}}],["param",{"_index":123,"title":{},"body":{"classes/Stubborn.html":{}}}],["parameter",{"_index":213,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":46,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["parser",{"_index":153,"title":{},"body":{"dependencies.html":{}}}],["patch",{"_index":36,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["patch(path",{"_index":86,"title":{},"body":{"classes/Stubborn.html":{}}}],["path",{"_index":66,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["path).setbody(body",{"_index":128,"title":{},"body":{"classes/Stubborn.html":{}}}],["path).setbody(null",{"_index":125,"title":{},"body":{"classes/Stubborn.html":{}}}],["pathdefinition",{"_index":60,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["picked",{"_index":228,"title":{},"body":{"index.html":{}}}],["port",{"_index":27,"title":{},"body":{"classes/Stubborn.html":{}}}],["post",{"_index":37,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["post(path",{"_index":93,"title":{},"body":{"classes/Stubborn.html":{}}}],["private",{"_index":25,"title":{},"body":{"classes/Stubborn.html":{}}}],["promise",{"_index":99,"title":{},"body":{"classes/Stubborn.html":{}}}],["promise(resolve",{"_index":131,"title":{},"body":{"classes/Stubborn.html":{}}}],["properties",{"_index":24,"title":{},"body":{"classes/Stubborn.html":{}}}],["public",{"_index":31,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["publish",{"_index":278,"title":{},"body":{"index.html":{}}}],["pull",{"_index":272,"title":{},"body":{"index.html":{}}}],["push",{"_index":279,"title":{},"body":{"index.html":{}}}],["put",{"_index":38,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["put(path",{"_index":95,"title":{},"body":{"classes/Stubborn.html":{}}}],["query",{"_index":207,"title":{},"body":{"index.html":{}}}],["querydefinitions",{"_index":295,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["randomly",{"_index":82,"title":{},"body":{"classes/Stubborn.html":{}}}],["rebase",{"_index":273,"title":{},"body":{"index.html":{}}}],["record",{"_index":308,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["regexp",{"_index":311,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["register",{"_index":63,"title":{},"body":{"classes/Stubborn.html":{}}}],["release",{"_index":186,"title":{},"body":{"index.html":{}}}],["remove",{"_index":56,"title":{},"body":{"classes/Stubborn.html":{}}}],["request",{"_index":92,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["requestbodydefinition",{"_index":87,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["requestdefinition",{"_index":296,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requestinfo",{"_index":297,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requestmatcher",{"_index":298,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requests",{"_index":180,"title":{},"body":{"index.html":{}}}],["res",{"_index":17,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["resolve",{"_index":134,"title":{},"body":{"classes/Stubborn.html":{}}}],["resolved",{"_index":101,"title":{},"body":{"classes/Stubborn.html":{}}}],["respond",{"_index":216,"title":{},"body":{"index.html":{}}}],["response",{"_index":230,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["responsebody",{"_index":299,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responsebodydefinition",{"_index":300,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responsedefinition",{"_index":301,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responseheaders",{"_index":302,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responses",{"_index":173,"title":{},"body":{"index.html":{}}}],["result",{"_index":136,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":137,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":81,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["returns",{"_index":58,"title":{},"body":{"classes/Stubborn.html":{}}}],["route",{"_index":64,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["router",{"_index":28,"title":{},"body":{"classes/Stubborn.html":{}}}],["routes",{"_index":57,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["save",{"_index":193,"title":{},"body":{"index.html":{}}}],["sb",{"_index":13,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.clear",{"_index":242,"title":{},"body":{"index.html":{}}}],["sb.get",{"_index":261,"title":{},"body":{"index.html":{}}}],["sb.get('/').setqueryparameters",{"_index":249,"title":{},"body":{"index.html":{}}}],["sb.get('/').setresponsebody",{"_index":15,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.start",{"_index":236,"title":{},"body":{"index.html":{}}}],["sb.stop",{"_index":238,"title":{},"body":{"index.html":{}}}],["see",{"_index":268,"title":{},"body":{"index.html":{}}}],["send",{"_index":224,"title":{},"body":{"index.html":{}}}],["sent",{"_index":220,"title":{},"body":{"index.html":{}}}],["separate",{"_index":182,"title":{},"body":{"index.html":{}}}],["server",{"_index":29,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["serverresponse",{"_index":313,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["set",{"_index":78,"title":{},"body":{"classes/Stubborn.html":{}}}],["setheaders(null",{"_index":263,"title":{},"body":{"index.html":{}}}],["setqueryparameters",{"_index":262,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/.../constants.ts",{"_index":161,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":290,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../stubborn.ts",{"_index":303,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/@types/index.ts",{"_index":307,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/constants.ts",{"_index":163,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/route.ts",{"_index":142,"title":{},"body":{"coverage.html":{}}}],["src/stubborn.ts",{"_index":6,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/stubborn.ts:102",{"_index":88,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:112",{"_index":94,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:122",{"_index":96,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:130",{"_index":98,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:145",{"_index":102,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:31",{"_index":54,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:32",{"_index":52,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:33",{"_index":53,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:34",{"_index":45,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:57",{"_index":75,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:65",{"_index":71,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:72",{"_index":55,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:83",{"_index":61,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:92",{"_index":70,"title":{},"body":{"classes/Stubborn.html":{}}}],["start",{"_index":39,"title":{},"body":{"classes/Stubborn.html":{}}}],["start(port",{"_index":97,"title":{},"body":{"classes/Stubborn.html":{}}}],["started",{"_index":84,"title":{"index.html":{}},"body":{"classes/Stubborn.html":{}}}],["statements",{"_index":141,"title":{},"body":{"coverage.html":{}}}],["status_codes",{"_index":162,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stop",{"_index":40,"title":{},"body":{"classes/Stubborn.html":{}}}],["stopped",{"_index":103,"title":{},"body":{"classes/Stubborn.html":{}}}],["strictly",{"_index":178,"title":{},"body":{"index.html":{}}}],["string",{"_index":74,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["stubborn",{"_index":1,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["stubbornoptions",{"_index":43,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["stuff",{"_index":266,"title":{},"body":{"index.html":{}}}],["success",{"_index":164,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":148,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":147,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":281,"title":{},"body":{"index.html":{}}}],["template",{"_index":233,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["templatearray",{"_index":304,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["templatefunction",{"_index":305,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["templateobject",{"_index":306,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["test",{"_index":226,"title":{},"body":{"index.html":{}}}],["tested",{"_index":187,"title":{},"body":{"index.html":{}}}],["testing",{"_index":198,"title":{},"body":{"index.html":{}}}],["this.options",{"_index":113,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.options.host",{"_index":119,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.port",{"_index":116,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router",{"_index":118,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.clear",{"_index":122,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.delete",{"_index":124,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.get",{"_index":126,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.patch",{"_index":127,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.post",{"_index":129,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.put",{"_index":130,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.handle(this.server",{"_index":133,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server",{"_index":117,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.close",{"_index":135,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.listen(this.port",{"_index":132,"title":{},"body":{"classes/Stubborn.html":{}}}],["throwhttperrors",{"_index":253,"title":{},"body":{"index.html":{}}}],["tool",{"_index":199,"title":{},"body":{"index.html":{}}}],["true",{"_index":21,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["type",{"_index":48,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":288,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":106,"title":{},"body":{"classes/Stubborn.html":{}}}],["typescript",{"_index":8,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["unload",{"_index":202,"title":{},"body":{"index.html":{}}}],["up",{"_index":229,"title":{},"body":{"index.html":{}}}],["update",{"_index":277,"title":{},"body":{"index.html":{}}}],["usage",{"_index":184,"title":{},"body":{"index.html":{}}}],["use",{"_index":259,"title":{},"body":{"index.html":{}}}],["using",{"_index":232,"title":{},"body":{"index.html":{}}}],["utils",{"_index":109,"title":{},"body":{"classes/Stubborn.html":{}}}],["validates",{"_index":219,"title":{},"body":{"index.html":{}}}],["value",{"_index":91,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["very",{"_index":217,"title":{},"body":{"index.html":{}}}],["web",{"_index":169,"title":{},"body":{"index.html":{}}}],["webserver",{"_index":203,"title":{},"body":{"index.html":{}}}],["wildcard",{"_index":260,"title":{},"body":{"index.html":{}}}],["ws",{"_index":11,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["x",{"_index":264,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":195,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Stubborn.html":{"url":"classes/Stubborn.html","title":"class - Stubborn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stubborn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Stubborn.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n                        \n                            ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n                        \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                options\n                            \n                            \n                                    Private\n                                port\n                            \n                            \n                                    Private\n                                router\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getOrigin\n                            \n                            \n                                    Public\n                                getPort\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: StubbornOptions)\n                    \n                \n                        \n                            \n                                Defined in src/Stubborn.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        StubbornOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StubbornOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            port\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:31\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:72\n                \n            \n\n\n            \n                \n                    Remove all routes from the server\n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:83\n                \n            \n\n\n            \n                \n                    Create and Register a new DELETE route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:92\n                \n            \n\n\n            \n                \n                    Create and Register a new GET route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOrigin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrigin()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:65\n                \n            \n\n\n            \n                \n                    Returns the server origin (http://:)\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the server origin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPort\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPort()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:57\n                \n            \n\n\n            \n                \n                    Returns the server port.\nIf the server is initialized with options.port set to 0 this method\nwill return the randomly affected port only after the server is started\n\n\n                    \n                    \n                    \n                        Returns :     number | null\n\n                    \n                    \n                        Listening port or null if the server is not started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:102\n                \n            \n\n\n            \n                \n                    Create and Register a new PACH route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:112\n                \n            \n\n\n            \n                \n                    Create and Register a new POST route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:122\n                \n            \n\n\n            \n                \n                    Create and Register a new PUT route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(port: number)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:130\n                \n            \n\n\n            \n                \n                    Start the Stubborn server\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:145\n                \n            \n\n\n            \n                \n                    Stop the Stubborn server\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is stopped\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { createServer, Server } from 'http';\n\nimport {\n  HeaderDefinitions,\n  PathDefinition,\n  RequestBodyDefinition,\n} from './@types';\nimport { METHODS } from './constants';\nimport { Router } from './Router';\nimport { getServerPort } from './utils';\n\nexport type StubbornOptions = {\n  host?: string;\n  defaultHeaders?: HeaderDefinitions;\n};\n\n/**\n * @example\n * ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n */\nexport class Stubborn {\n  private server: Server;\n  private port: number | null;\n  private router: Router;\n  private options: StubbornOptions;\n\n  constructor(options: StubbornOptions = {}) {\n    this.options = Object.assign(\n      {\n        host: 'localhost',\n        defaultHeaders: {},\n      },\n      options,\n    );\n\n    this.port = null;\n    this.server = createServer();\n    this.router = new Router({ host: this.options.host });\n  }\n\n  /**\n   * Returns the server port.\n   *\n   * If the server is initialized with options.port set to 0 this method\n   * will return the randomly affected port only after the server is started\n   * @returns Listening port or null if the server is not started\n   */\n  public getPort(): number | null {\n    return getServerPort(this.server);\n  }\n\n  /**\n   * Returns the server origin (http://:)\n   * @returns the server origin\n   */\n  public getOrigin(): string {\n    return `http://${this.options.host}:${this.getPort()}`;\n  }\n\n  /**\n   * Remove all routes from the server\n   */\n  public clear() {\n    this.router.clear();\n\n    return this;\n  }\n\n  /**\n   * Create and Register a new DELETE route\n   *\n   * @param path Path matching definition\n   */\n  public delete(path: PathDefinition) {\n    return this.router.createRoute(METHODS.DELETE, path).setBody(null);\n  }\n\n  /**\n   * Create and Register a new GET route\n   *\n   * @param path Path matching definition\n   */\n  public get(path: PathDefinition) {\n    return this.router.createRoute(METHODS.GET, path).setBody(null);\n  }\n\n  /**\n   * Create and Register a new PACH route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public patch(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.PATCH, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new POST route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public post(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.POST, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new PUT route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public put(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.PUT, path).setBody(body);\n  }\n\n  /**\n   * Start the Stubborn server\n   * @returns Promise object resolved when server is started\n   */\n  public start(port: number = 0) {\n    this.port = port;\n\n    return new Promise(resolve => {\n      this.server.listen(this.port);\n      this.router.handle(this.server);\n      resolve();\n    });\n  }\n\n  /**\n   * Stop the Stubborn server\n   *\n   * @returns Promise object resolved when server is stopped\n   */\n  public stop() {\n    return new Promise(resolve => {\n      this.server.close(() => resolve());\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Route.ts\n            \n            class\n            Route\n            \n                50 %\n                (14/28)\n            \n        \n        \n            \n                \n                src/Stubborn.ts\n            \n            class\n            Stubborn\n            \n                62 %\n                (10/16)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            accept : ^3.1.3\n        \n            body-parser : ^1.19.0\n        \n            content-type : ^1.0.4\n        \n            lodash : ^4.17.11\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            METHODS   (src/.../constants.ts)\n                        \n                        \n                            STATUS_CODES   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        METHODS\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        STATUS_CODES\n                    \n                \n                        \n                            \n                                 SUCCESS\n                            \n                        \n                        \n                            \n                                Value : 200\n                            \n                        \n                        \n                            \n                                 NOT_IMPLEMENTED\n                            \n                        \n                        \n                            \n                                Value : 501\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nStubborn\n \n\n\nStubborn web server to mock external api responses. It is basically nock meets Dyson. Stubborn will strictly match the requests based on the definition like nock but in a separate web server like Dyson.\n\n\n\nInstallation\nUsage\nAPI\nContributing\nRelease\n\n\n\n\n\nInstallation\nStubborn is tested on NodeJS 8.x and above.\nNpm:\nnpm install --save-dev stubborn-ws\nYarn:\nyarn add -D stubborn-ws\nUsage\nStubborn is a testing tool that let you hot load and unload routes into a webserver.\nRequests are strictly matched against routes definitions based on Method, Path, Query parameters, Headers and Body.\nIf the request does not exactly match one route definition (ex: extra parameter, missing parameter, value does not match, etc), Stubborn will respond with a 501.\nThe very fact that Stubborn respond to the request validates that the parameters sent are the expected one, any change in the code that send the request will break the test. Any breaking change will be picked up by your test.\nStubborn response headers and body can be hardcoded or defined using a template.\n```typescript\nimport got from 'got';\nimport { Stubborn } from 'stubborn-ws';\ndescribe('Test', () => {\n  const sb = new Stubborn();\n  beforeAll(async () => await sb.start());\n  afterAll(async () => await sb.stop());\n  // Clean up all routes after a test if needed\n  afterEach(() => sb.clear());\n  it('should respond to query', async () => {\n    const body = { some: 'body' };\n    sb.get('/').setResponseBody({ some: 'body' });\nconst res = await got(`${sb.getOrigin()}`, { json: true });\n\nexpect(res.body).toEqual(body);  });\n});\n```\nStubborn strictly matches the request against the route definition.\nIf a query parameter or a header is missing, stubborn will return a 501 (not implemented)\n```typescript\nit('should respond 501 if a parameter is missing', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n  const res = await got(${sb.getOrigin()}, { throwHttpErrors: false });\n  expect(res.statusCode).toEqual(501);\n});\n```\nIf a query parameter or a header is added, stubborn will return a 501 (not implemented)\n```typescript\nit('should respond 501 if a parameter is added', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n  const res = await got(${sb.getOrigin()}?page=1&limit=10, {\n    throwHttpErrors: false,\n  });\n  expect(res.statusCode).toEqual(501);\n});\n```\nIf a query parameter or a header does not match the route definition, stubborn will return a 501 (not implemented)\n```typescript\nit('should respond 501 if a parameter does not match the definition', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n  const res = await got(${sb.getOrigin()}?page=2, { throwHttpErrors: false });\n  expect(res.statusCode).toEqual(501);\n});\n```\nYou can use null as wildcard\n```typescript\nit('should respond using wildcard', async () => {\n  sb.get('/')\n    .setQueryParameters({ page: null })\n    .setHeaders(null);\n  const res = await got(${sb.getOrigin()}?page=2, {\n    headers: { 'x-api-key': 'api key', 'any-other-header': 'stuff' },\n    throwHttpErrors: false,\n  });\n  expect(res.statusCode).toEqual(200);\n});\n```\nPublic API\nSee the API documentation\nContributing\nRelease\ngit checkout master\ngit pull --rebase\nyarn doc\ngit add .\ngit commit -m 'doc(): Update documentation'\nyarn publish --\ngit push --follow-tags\nThen go to github to draft a new release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HeaderDefinitions   (src/.../index.ts)\n                        \n                        \n                            JsonValue   (src/.../index.ts)\n                        \n                        \n                            MatchFunction   (src/.../index.ts)\n                        \n                        \n                            Middleware   (src/.../index.ts)\n                        \n                        \n                            NextFunction   (src/.../index.ts)\n                        \n                        \n                            PathDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryDefinitions   (src/.../index.ts)\n                        \n                        \n                            Request   (src/.../index.ts)\n                        \n                        \n                            RequestBodyDefinition   (src/.../index.ts)\n                        \n                        \n                            RequestDefinition   (src/.../index.ts)\n                        \n                        \n                            RequestInfo   (src/.../index.ts)\n                        \n                        \n                            RequestMatcher   (src/.../index.ts)\n                        \n                        \n                            Response   (src/.../index.ts)\n                        \n                        \n                            ResponseBody   (src/.../index.ts)\n                        \n                        \n                            ResponseBodyDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseHeaders   (src/.../index.ts)\n                        \n                        \n                            StubbornOptions   (src/.../Stubborn.ts)\n                        \n                        \n                            Template   (src/.../index.ts)\n                        \n                        \n                            TemplateArray   (src/.../index.ts)\n                        \n                        \n                            TemplateFunction   (src/.../index.ts)\n                        \n                        \n                            TemplateObject   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/@types/index.ts\n    \n    \n        \n            \n                \n                    \n                    HeaderDefinitions\n                \n            \n            \n                \n                        Record | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonValue\n                \n            \n            \n                \n                        null | string | number | boolean | object\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatchFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Middleware\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PathDefinition\n                \n            \n            \n                \n                            null | string | RegExp | MatchFunction\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryDefinitions\n                \n            \n            \n                \n                        Record | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Request\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestBodyDefinition\n                \n            \n            \n                \n                            RequestDefinition\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestDefinition\n                \n            \n            \n                \n                        null | RegExp | MatchFunction | JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMatcher\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                            ServerResponse\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBody\n                \n            \n            \n                \n                            JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBodyDefinition\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseDefinition\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseHeaders\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Template\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject | TemplateArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateArray\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/Stubborn.ts\n    \n    \n        \n            \n                \n                    \n                    StubbornOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
