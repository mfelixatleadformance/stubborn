var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/BodyDefinitionArray.html",[0,0.813,1,0.967]],["body/interfaces/BodyDefinitionArray.html",[0,1.109,1,1.319,2,1.113,3,0.79,4,0.79,5,0.665,6,0.937,7,2.225,8,2.225,9,0.95,10,0.069,11,1.906,12,1.591,13,1.113,14,1.339,15,0.926,16,1.439,17,0.937,18,1.908,19,0.892,20,1.591,21,1.505,22,1.523,23,1.857,24,1.13,25,1.591,26,1.906,27,2.425,28,1.13,29,1.333,30,0.937,31,1.333,32,1.113,33,0.665,34,1.333,35,1.333,36,1.113,37,1.109,38,1.339,39,1.113,40,1.333,41,0.926,42,1.591,43,2.23,44,0.937,45,2.225,46,1.113,47,1.857,48,1.333,49,1.333,50,1.339,51,1.332,52,1.333,53,1.113,54,0.79,55,1.113,56,0.937,57,1.113,58,0.937,59,2.144,60,1.591,61,1.591,62,1.857,63,0.937,64,1.857,65,1.113,66,1.113,67,1.591,68,1.333,69,1.591,70,1.591,71,1.706,72,1.591,73,0.37,74,1.113,75,1.333,76,1.339,77,1.591,78,1.591,79,1.591,80,1.591,81,1.591,82,1.591,83,1.591,84,1.13,85,1.113,86,0.79,87,1.333,88,1.333,89,1.339,90,1.591,91,1.333,92,0.79,93,1.113,94,1.906,95,0.937,96,1.113,97,1.113,98,1.113,99,1.113,100,0.79,101,0.028,102,0.04,103,0.028]],["title/classes/Debugger.html",[104,0.813,105,1.631]],["body/classes/Debugger.html",[3,1.071,4,1.071,5,0.901,9,1.507,10,0.068,15,0.976,18,1.071,19,0.65,37,1.374,38,1.83,51,1.46,54,1.071,73,0.501,76,1.83,84,1.39,85,1.958,86,1.544,92,1.071,96,1.508,101,0.038,102,0.049,103,0.038,104,0.901,105,2.346,106,1.508,107,2.206,108,2.444,109,4.294,110,2.865,111,1.806,112,2.814,113,2.174,114,2.814,115,1.958,116,2.346,117,2.346,118,2.814,119,2.346,120,3.653,121,2.444,122,2.814,123,2.206,124,2.814,125,2.206,126,2.814,127,2.206,128,2.814,129,2.206,130,2.814,131,2.206,132,2.814,133,2.174,134,2.206,135,1.508,136,3.653,137,3.653,138,3.653,139,3.653,140,4.057,141,2.814,142,1.958,143,2.206,144,1.508,145,4.057,146,2.814,147,2.814,148,2.814,149,2.814,150,2.814,151,2.814,152,2.814,153,2.814,154,2.814,155,2.814,156,2.814,157,2.814,158,2.206,159,2.814]],["title/interfaces/DiffError.html",[0,0.813,100,0.967]],["body/interfaces/DiffError.html",[0,1.085,1,1.098,2,1.069,3,0.759,4,0.759,5,0.639,6,0.9,7,1.852,8,1.852,9,0.923,10,0.069,11,1.852,12,1.546,13,1.069,14,1.675,15,0.905,16,1.413,17,0.9,18,1.903,19,0.895,20,1.546,21,1.53,22,1.499,23,1.816,24,1.413,25,1.546,26,1.852,27,2.461,28,1.098,29,1.281,30,0.9,31,1.281,32,1.069,33,0.639,34,1.281,35,1.281,36,1.069,37,1.085,38,1.301,39,1.069,40,1.281,41,1.097,42,1.546,43,2.2,44,0.9,45,2.176,46,1.069,47,1.816,48,1.281,49,1.281,50,1.777,51,1.314,52,1.281,53,1.069,54,0.759,55,1.069,56,0.9,57,1.069,58,0.9,59,2.111,60,1.546,61,1.546,62,1.816,63,0.9,64,1.816,65,1.069,66,1.069,67,1.546,68,1.281,69,1.546,70,1.546,71,1.675,72,1.546,73,0.513,74,1.069,75,1.281,76,1.301,77,1.546,78,1.546,79,1.546,80,1.546,81,1.546,82,1.546,83,1.546,84,1.499,85,1.069,86,0.759,87,1.281,88,1.281,89,1.301,90,1.546,91,1.281,92,0.759,93,1.069,94,1.852,95,0.9,96,1.069,97,1.069,98,1.069,99,1.069,100,1.098,101,0.027,102,0.039,103,0.027,160,1.852]],["title/interfaces/JsonArray.html",[0,0.813,28,0.967]],["body/interfaces/JsonArray.html",[0,1.109,1,1.13,2,1.113,3,0.79,4,0.79,5,0.665,6,0.937,7,2.225,8,2.225,9,0.95,10,0.069,11,1.906,12,1.591,13,1.113,14,1.339,15,0.926,16,1.439,17,0.937,18,1.908,19,0.892,20,1.591,21,1.505,22,1.523,23,1.857,24,1.13,25,1.591,26,1.906,27,2.425,28,1.319,29,1.333,30,0.937,31,1.333,32,1.113,33,0.665,34,1.333,35,1.333,36,1.113,37,1.109,38,1.339,39,1.113,40,1.333,41,0.926,42,1.591,43,2.23,44,0.937,45,2.225,46,1.113,47,1.857,48,1.333,49,1.333,50,1.339,51,1.332,52,1.333,53,1.113,54,0.79,55,1.113,56,0.937,57,1.113,58,0.937,59,2.144,60,1.591,61,1.591,62,1.857,63,0.937,64,1.857,65,1.113,66,1.113,67,1.591,68,1.333,69,1.591,70,1.591,71,1.706,72,1.591,73,0.37,74,1.113,75,1.333,76,1.339,77,1.591,78,1.591,79,1.591,80,1.591,81,1.591,82,1.591,83,1.591,84,1.13,85,1.113,86,0.79,87,1.333,88,1.333,89,1.339,90,1.591,91,1.333,92,0.79,93,1.113,94,1.906,95,0.937,96,1.113,97,1.113,98,1.113,99,1.113,100,0.79,101,0.028,102,0.04,103,0.028]],["title/classes/Output.html",[104,0.813,133,1.361]],["body/classes/Output.html",[3,0.6,4,0.6,5,0.504,9,0.943,10,0.069,14,0.711,15,0.647,17,0.711,18,0.6,19,0.81,21,1.544,22,0.6,41,0.421,54,0.921,73,0.28,92,1.578,100,1.845,101,0.021,102,0.032,103,0.021,104,0.504,106,0.844,108,2.663,111,1.012,113,2.502,115,2.419,116,2.898,117,2.898,119,2.964,133,1.771,134,1.236,135,2.37,142,2.222,160,1.554,161,1.236,162,3.251,163,2.945,164,1.897,165,3.304,166,2.42,167,2.42,168,2.42,169,2.42,170,2.42,171,3.304,172,3.304,173,3.304,174,3.304,175,2.42,176,2.42,177,2.42,178,2.42,179,2.42,180,2.945,181,2.42,182,1.576,183,2.42,184,1.012,185,1.91,186,2.42,187,1.576,188,1.576,189,2.42,190,1.576,191,3.762,192,2.42,193,1.576,194,3.918,195,2.42,196,1.576,197,2.42,198,2.42,199,1.576,200,2.42,201,1.576,202,2.42,203,1.576,204,1.576,205,1.576,206,1.576,207,1.576,208,2.42,209,1.576,210,2.42,211,3.565,212,1.576,213,2.42,214,1.576,215,2.42,216,1.576,217,2.42,218,1.576,219,2.42,220,1.576,221,2.42,222,1.576,223,1.576,224,1.236,225,1.576,226,1.576,227,1.576,228,1.576,229,1.576,230,1.576,231,1.576,232,1.576,233,1.576,234,2.42,235,2.42,236,2.42,237,2.42,238,1.576,239,2.42,240,1.576,241,1.576,242,1.576,243,2.42,244,1.576,245,1.576,246,1.576,247,1.576,248,2.42,249,2.42,250,1.576,251,2.31,252,1.576,253,1.576,254,1.576,255,1.576,256,1.576,257,1.576,258,1.576,259,2.945,260,2.42,261,2.42,262,2.42,263,2.42,264,2.42,265,2.945,266,2.42,267,1.576,268,2.945,269,1.576,270,1.576,271,1.576,272,1.576,273,1.576,274,1.576,275,1.576,276,3.762,277,3.304,278,2.951,279,1.576,280,1.576,281,3.304,282,1.236,283,1.236]],["title/classes/Stubborn.html",[104,0.813,284,1.361]],["body/classes/Stubborn.html",[3,0.468,4,0.468,5,0.394,9,1.226,10,0.069,13,1.343,15,0.67,17,0.555,18,0.758,19,0.779,21,0.802,22,1.356,24,1.356,33,0.802,37,1.453,41,0.845,50,1.954,51,1.083,54,0.468,56,1.954,58,0.898,63,1.775,73,0.219,84,1.728,86,0.758,92,1.458,95,0.898,101,0.017,102,0.055,103,0.017,104,0.394,106,0.659,108,2.591,111,0.79,113,2.402,115,2.157,116,2.584,117,2.584,119,2.915,121,2.447,135,2.235,142,1.543,144,2.385,160,1.278,162,3.36,184,2.031,185,1.543,284,2.199,285,0.79,286,1.991,287,1.991,288,1.561,289,1.561,290,1.561,291,1.561,292,1.991,293,1.561,294,1.561,295,1.561,296,2.507,297,3.163,298,4.025,299,3.709,300,3.661,301,1.991,302,2.88,303,2.259,304,2.88,305,2.88,306,1.991,307,1.561,308,1.849,309,2.259,310,2.88,311,3.384,312,1.991,313,2.654,314,1.991,315,3.163,316,1.23,317,1.23,318,1.23,319,1.23,320,1.991,321,1.23,322,4.103,323,3.384,324,2.654,325,1.23,326,1.991,327,1.561,328,1.991,329,1.23,330,3.936,331,1.991,332,1.23,333,1.23,334,2.88,335,1.23,336,1.991,337,1.991,338,1.561,339,1.991,340,1.991,341,2.173,342,1.991,343,1.991,344,3.832,345,4.103,346,3.384,347,1.23,348,1.966,349,1.991,350,1.23,351,1.991,352,1.23,353,1.991,354,1.23,355,1.991,356,1.991,357,1.23,358,1.991,359,1.23,360,1.991,361,1.23,362,2.88,363,2.88,364,1.23,365,1.991,366,1.278,367,1.991,368,1.23,369,1.23,370,2.507,371,1.991,372,1.23,373,1.23,374,1.23,375,1.991,376,1.23,377,1.23,378,1.23,379,1.23,380,1.23,381,1.23,382,1.23,383,1.23,384,3.832,385,1.23,386,1.23,387,1.23,388,2.507,389,1.23,390,1.23,391,1.23,392,1.991,393,1.23,394,1.23,395,1.991,396,1.23,397,1.23,398,1.23,399,1.23]],["title/coverage.html",[400,2.678]],["body/coverage.html",[0,1.153,1,0.848,5,0.713,6,1.625,10,0.068,16,0.848,19,0.397,28,0.848,33,1.618,100,0.848,101,0.03,102,0.042,103,0.03,104,1.249,105,1.431,107,1.748,121,1.194,123,1.748,125,1.748,127,1.748,129,1.748,131,1.748,133,1.194,144,1.194,161,1.748,185,2.718,284,1.194,285,1.431,366,1.431,400,1.748,401,1.431,402,2.229,403,2.229,404,5.064,405,2.229,406,2.229,407,2.229,408,2.229,409,2.229,410,2.229,411,2.004,412,3.122,413,2.229,414,2.229,415,3.122,416,2.229,417,3.122,418,2.229,419,2.229,420,2.229,421,3.122,422,2.229,423,2.229,424,2.229,425,3.641,426,2.229,427,2.229,428,2.229,429,2.229,430,2.229,431,2.229,432,2.229,433,2.229,434,2.229,435,2.229,436,2.229,437,4.922,438,2.229,439,2.229,440,2.229,441,2.229,442,2.229,443,2.229,444,2.229,445,2.229,446,2.229,447,2.229,448,2.229,449,2.229,450,2.229,451,2.229,452,2.229,453,2.229,454,2.229,455,2.229,456,2.229,457,2.229,458,2.229,459,2.229,460,2.229,461,2.229,462,2.229,463,2.229,464,2.229,465,2.229,466,2.229]],["title/dependencies.html",[467,2.147,468,2.385]],["body/dependencies.html",[10,0.066,19,0.674,37,1.213,101,0.051,102,0.059,103,0.051,224,2.971,468,2.971,469,3.788,470,3.788,471,3.788,472,3.788,473,3.788,474,3.788,475,3.788,476,3.788,477,3.788]],["title/miscellaneous/enumerations.html",[478,0.817,479,2.385]],["body/miscellaneous/enumerations.html",[10,0.068,14,1.868,15,1.107,41,1.339,73,0.612,101,0.046,102,0.056,103,0.046,303,3.248,307,3.248,308,2.659,309,3.248,411,2.207,478,1.308,479,2.696,480,3.486,481,4.142,482,4.142,483,4.142,484,4.142,485,3.248,486,3.248,487,4.142,488,3.438,489,3.438,490,2.696,491,2.696]],["title/index.html",[73,0.382,341,1.379,492,1.684]],["body/index.html",[9,0.981,10,0.068,16,0.967,21,0.538,24,0.967,30,1.382,32,2.375,33,0.981,36,2.211,37,1.352,38,1.655,39,1.362,41,0.679,44,0.758,50,1.905,51,1.32,53,0.9,70,1.966,71,0.758,76,1.74,84,1.166,86,1.3,89,1.382,95,1.942,101,0.023,102,0.041,103,0.023,108,0.9,110,1.318,113,1.362,115,1.362,121,2.467,135,2.147,142,2.427,144,1.362,158,1.318,164,1.993,185,0.9,251,2.403,278,1.318,282,1.318,283,1.318,284,2.566,288,2.403,289,1.993,290,1.318,291,3.476,293,1.318,294,1.318,295,1.318,300,1.993,308,1.079,327,2.403,338,1.318,401,1.631,485,2.678,486,1.318,491,3.476,493,2.541,494,1.68,495,1.68,496,4.223,497,1.68,498,1.68,499,2.541,500,1.68,501,2.541,502,3.064,503,2.541,504,2.541,505,1.68,506,2.541,507,1.68,508,2.541,509,2.541,510,3.064,511,1.68,512,1.68,513,1.68,514,1.68,515,1.68,516,1.68,517,1.68,518,1.68,519,1.68,520,1.68,521,1.68,522,1.68,523,1.68,524,2.541,525,2.541,526,2.541,527,2.541,528,1.68,529,4.304,530,4.006,531,1.68,532,1.68,533,1.68,534,1.68,535,2.541,536,1.68,537,1.68,538,3.415,539,1.68,540,1.68,541,3.064,542,1.68,543,3.415,544,1.68,545,1.68,546,1.68,547,1.68,548,1.68,549,1.68,550,1.68,551,1.68,552,1.68,553,4.006,554,4.125,555,2.541,556,1.68,557,2.541,558,3.415,559,3.415,560,3.668,561,3.415,562,3.415,563,3.064,564,3.064,565,1.68,566,3.064,567,2.541,568,1.68,569,2.541,570,3.064,571,1.68,572,2.541,573,1.68,574,1.68,575,2.541,576,1.68,577,1.68,578,1.68,579,1.68,580,1.68,581,2.541,582,1.68,583,1.68,584,1.68,585,1.68,586,1.68,587,1.68,588,1.68,589,1.68,590,1.68,591,1.68,592,1.68,593,1.68,594,1.68,595,1.68,596,1.68,597,1.68,598,1.68,599,1.68,600,2.541,601,2.541,602,1.68,603,1.68,604,1.68,605,1.68,606,2.541,607,3.415,608,1.68,609,1.68,610,1.68,611,1.68,612,1.68,613,3.668,614,1.68,615,1.68,616,1.68,617,1.68,618,2.541,619,2.541,620,1.68,621,1.68,622,1.318,623,1.68,624,1.68,625,1.68,626,1.68,627,1.68,628,1.68]],["title/license.html",[341,1.379,492,1.684,629,1.684]],["body/license.html",[10,0.054,30,1.804,101,0.044,102,0.054,103,0.044,143,2.544,348,2.544,401,2.083,622,2.544,629,2.544,630,3.245,631,4.334,632,3.245,633,3.245,634,3.245,635,3.998,636,3.245,637,3.245,638,3.245,639,3.245,640,3.245,641,3.245,642,3.998,643,4.88,644,3.245,645,3.245,646,3.245,647,4.334,648,3.245,649,3.998,650,3.245,651,3.245,652,3.245,653,3.245,654,3.245,655,3.245,656,3.245,657,3.245,658,3.998,659,3.245,660,3.245,661,3.245,662,3.245,663,3.245,664,3.245,665,3.245,666,3.998,667,3.998,668,3.245,669,3.245,670,3.245,671,3.245,672,3.245,673,3.245,674,3.245,675,3.245,676,3.245,677,3.245,678,3.245,679,3.245,680,3.245,681,3.245,682,3.245,683,3.245,684,3.245,685,3.245,686,3.245,687,3.245,688,3.245,689,3.245,690,3.245,691,3.245,692,3.245,693,3.245,694,3.245,695,3.245,696,3.245]],["title/modules.html",[697,2.678]],["body/modules.html",[10,0.06,101,0.053,102,0.06,103,0.053,697,3.09]],["title/overview.html",[698,2.678]],["body/overview.html",[2,2.092,10,0.06,101,0.052,102,0.06,103,0.052,106,2.092,698,3.061,699,3.903,700,3.903]],["title/miscellaneous/typealiases.html",[478,0.817,701,3.041]],["body/miscellaneous/typealiases.html",[1,0.991,6,1.174,10,0.067,12,1.395,15,0.928,19,0.834,20,2.093,21,1.458,22,1.486,23,1.395,24,0.991,25,2.093,27,2.442,28,0.991,33,1.429,42,2.093,43,2.442,44,1.174,46,1.86,47,2.093,51,1.111,55,1.86,56,1.566,57,1.86,58,1.566,59,2.325,60,2.093,61,2.093,62,2.093,63,1.566,64,2.232,65,1.86,66,1.86,67,2.093,69,2.093,71,1.566,72,2.093,73,0.463,74,1.86,77,1.86,78,1.86,79,1.86,80,1.86,81,1.86,82,1.86,83,1.86,89,1.566,90,1.86,93,1.86,97,1.86,98,1.86,99,1.86,101,0.035,102,0.047,103,0.035,285,1.672,313,2.722,425,2.042,478,0.991,702,2.603,703,5.067,704,3.471,705,3.471,706,2.603,707,3.471,708,4.629]],["title/miscellaneous/variables.html",[478,0.817,709,2.385]],["body/miscellaneous/variables.html",[10,0.066,16,1.652,19,0.662,41,1.16,73,0.662,101,0.05,102,0.058,103,0.05,184,2.787,324,2.918,366,2.787,411,2.389,478,1.416,480,3.404,490,2.918,709,2.918,710,3.721,711,3.721,712,3.721,713,3.721]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":185,"title":{},"body":{"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["0/1",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":251,"title":{},"body":{"classes/Output.html":{},"index.html":{}}}],["1.0.4",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["11/21",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["14/28",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":247,"title":{},"body":{"classes/Output.html":{}}}],["200",{"_index":489,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3",{"_index":700,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":699,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["501",{"_index":491,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["52",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["_extend",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":665,"title":{},"body":{"license.html":{}}}],["according",{"_index":604,"title":{},"body":{"index.html":{}}}],["action",{"_index":690,"title":{},"body":{"license.html":{}}}],["add",{"_index":164,"title":{},"body":{"classes/Output.html":{},"index.html":{}}}],["add(lines",{"_index":186,"title":{},"body":{"classes/Output.html":{}}}],["added",{"_index":564,"title":{},"body":{"index.html":{}}}],["addition",{"_index":165,"title":{},"body":{"classes/Output.html":{}}}],["addition(text",{"_index":189,"title":{},"body":{"classes/Output.html":{}}}],["additional",{"_index":590,"title":{},"body":{"index.html":{}}}],["additionlabel",{"_index":166,"title":{},"body":{"classes/Output.html":{}}}],["additionlabel(error",{"_index":192,"title":{},"body":{"classes/Output.html":{}}}],["addroute",{"_index":301,"title":{},"body":{"classes/Stubborn.html":{}}}],["addroute(route",{"_index":320,"title":{},"body":{"classes/Stubborn.html":{}}}],["affected",{"_index":340,"title":{},"body":{"classes/Stubborn.html":{}}}],["afterall(async",{"_index":547,"title":{},"body":{"index.html":{}}}],["aftereach",{"_index":551,"title":{},"body":{"index.html":{}}}],["against",{"_index":525,"title":{},"body":{"index.html":{}}}],["agent",{"_index":592,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":702,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["always",{"_index":582,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":656,"title":{},"body":{"license.html":{}}}],["api",{"_index":496,"title":{},"body":{"index.html":{}}}],["args",{"_index":346,"title":{},"body":{"classes/Stubborn.html":{}}}],["arising",{"_index":694,"title":{},"body":{"license.html":{}}}],["array",{"_index":8,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["array.isarray(lines",{"_index":225,"title":{},"body":{"classes/Output.html":{}}}],["arraytohash",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["associated",{"_index":644,"title":{},"body":{"license.html":{}}}],["async",{"_index":554,"title":{},"body":{"index.html":{}}}],["authors",{"_index":683,"title":{},"body":{"license.html":{}}}],["await",{"_index":291,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["aweight",{"_index":265,"title":{},"body":{"classes/Output.html":{}}}],["b",{"_index":258,"title":{},"body":{"classes/Output.html":{}}}],["based",{"_index":504,"title":{},"body":{"index.html":{}}}],["basically",{"_index":498,"title":{},"body":{"index.html":{}}}],["beforeall(async",{"_index":545,"title":{},"body":{"index.html":{}}}],["between",{"_index":597,"title":{},"body":{"index.html":{}}}],["body",{"_index":37,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"dependencies.html":{},"index.html":{}}}],["bodydefinition",{"_index":63,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionarray",{"_index":1,"title":{"interfaces/BodyDefinitionArray.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionobject",{"_index":61,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionprimitive",{"_index":60,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionvalue",{"_index":62,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["bodydiff",{"_index":123,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["bodydiff(route.getbody",{"_index":155,"title":{},"body":{"classes/Debugger.html":{}}}],["boolean",{"_index":23,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["break",{"_index":278,"title":{},"body":{"classes/Output.html":{},"index.html":{}}}],["breaking",{"_index":539,"title":{},"body":{"index.html":{}}}],["buffer",{"_index":152,"title":{},"body":{"classes/Debugger.html":{}}}],["bweight",{"_index":268,"title":{},"body":{"classes/Output.html":{}}}],["c",{"_index":632,"title":{},"body":{"license.html":{}}}],["call",{"_index":607,"title":{},"body":{"index.html":{}}}],["called",{"_index":603,"title":{},"body":{"index.html":{}}}],["case",{"_index":276,"title":{},"body":{"classes/Output.html":{}}}],["cat",{"_index":197,"title":{},"body":{"classes/Output.html":{}}}],["cat.slice(1",{"_index":231,"title":{},"body":{"classes/Output.html":{}}}],["cat[0].touppercase",{"_index":230,"title":{},"body":{"classes/Output.html":{}}}],["category",{"_index":167,"title":{},"body":{"classes/Output.html":{}}}],["category(cat",{"_index":195,"title":{},"body":{"classes/Output.html":{}}}],["chalk",{"_index":224,"title":{},"body":{"classes/Output.html":{},"dependencies.html":{}}}],["change",{"_index":535,"title":{},"body":{"index.html":{}}}],["charge",{"_index":639,"title":{},"body":{"license.html":{}}}],["checkextra",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["checkmissing",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["checkout",{"_index":614,"title":{},"body":{"index.html":{}}}],["checkparameters",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["checkvalue",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["checkvalues",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["claim",{"_index":686,"title":{},"body":{"license.html":{}}}],["class",{"_index":104,"title":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{}}}],["classes",{"_index":106,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"overview.html":{}}}],["clean",{"_index":549,"title":{},"body":{"index.html":{}}}],["clear",{"_index":302,"title":{},"body":{"classes/Stubborn.html":{}}}],["cleared",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":536,"title":{},"body":{"index.html":{}}}],["color",{"_index":223,"title":{},"body":{"classes/Output.html":{}}}],["color.green",{"_index":244,"title":{},"body":{"classes/Output.html":{}}}],["color.red",{"_index":245,"title":{},"body":{"classes/Output.html":{}}}],["commit",{"_index":620,"title":{},"body":{"index.html":{}}}],["compare",{"_index":586,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":664,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":605,"title":{},"body":{"index.html":{}}}],["connection",{"_index":695,"title":{},"body":{"license.html":{}}}],["connexion",{"_index":593,"title":{},"body":{"index.html":{}}}],["console",{"_index":158,"title":{},"body":{"classes/Debugger.html":{},"index.html":{}}}],["console.log(out.render",{"_index":159,"title":{},"body":{"classes/Debugger.html":{}}}],["const",{"_index":142,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["constants",{"_index":17,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["constructor",{"_index":111,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["constructor(options",{"_index":312,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor(output",{"_index":182,"title":{},"body":{"classes/Output.html":{}}}],["constructor(private",{"_index":134,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{}}}],["constructor(request",{"_index":112,"title":{},"body":{"classes/Debugger.html":{}}}],["content",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["contract",{"_index":691,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":509,"title":{},"body":{"index.html":{}}}],["copies",{"_index":658,"title":{},"body":{"license.html":{}}}],["copy",{"_index":642,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":631,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":400,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":330,"title":{},"body":{"classes/Stubborn.html":{}}}],["createserver",{"_index":367,"title":{},"body":{"classes/Stubborn.html":{}}}],["currenttab",{"_index":163,"title":{},"body":{"classes/Output.html":{}}}],["d",{"_index":516,"title":{},"body":{"index.html":{}}}],["damages",{"_index":687,"title":{},"body":{"license.html":{}}}],["deal",{"_index":646,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":696,"title":{},"body":{"license.html":{}}}],["debugger",{"_index":105,"title":{"classes/Debugger.html":{}},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["default",{"_index":184,"title":{},"body":{"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/variables.html":{}}}],["defaultheaders",{"_index":371,"title":{},"body":{"classes/Stubborn.html":{}}}],["defined",{"_index":113,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["definition",{"_index":50,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["definitionmatcher",{"_index":43,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["definitions",{"_index":53,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["definitionvalue",{"_index":46,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["delete",{"_index":303,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["delete(path",{"_index":328,"title":{},"body":{"classes/Stubborn.html":{}}}],["dependencies",{"_index":468,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["describe('test",{"_index":544,"title":{},"body":{"index.html":{}}}],["description",{"_index":323,"title":{},"body":{"classes/Stubborn.html":{}}}],["dev",{"_index":514,"title":{},"body":{"index.html":{}}}],["diff",{"_index":596,"title":{},"body":{"index.html":{}}}],["diff/bodydiff",{"_index":124,"title":{},"body":{"classes/Debugger.html":{}}}],["diff/headersdiff",{"_index":126,"title":{},"body":{"classes/Debugger.html":{}}}],["diff/methoddiff",{"_index":128,"title":{},"body":{"classes/Debugger.html":{}}}],["diff/pathdiff",{"_index":130,"title":{},"body":{"classes/Debugger.html":{}}}],["diff/querydiff",{"_index":132,"title":{},"body":{"classes/Debugger.html":{}}}],["diff_types",{"_index":14,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"miscellaneous/enumerations.html":{}}}],["diff_types.extra",{"_index":260,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.extra].includes(e.type",{"_index":271,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.fail_equality",{"_index":261,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.fail_function",{"_index":263,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.fail_matching",{"_index":262,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.invalid_value_type",{"_index":264,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.missing",{"_index":259,"title":{},"body":{"classes/Output.html":{}}}],["differencekeys",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["differror",{"_index":100,"title":{"interfaces/DiffError.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"coverage.html":{}}}],["distribute",{"_index":654,"title":{},"body":{"license.html":{}}}],["doc",{"_index":619,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":401,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["draft",{"_index":628,"title":{},"body":{"index.html":{}}}],["dyson",{"_index":501,"title":{},"body":{"index.html":{}}}],["each",{"_index":34,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["element",{"_index":35,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["emitter",{"_index":296,"title":{},"body":{"classes/Stubborn.html":{}}}],["enumerations",{"_index":479,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":91,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["error",{"_index":194,"title":{},"body":{"classes/Output.html":{}}}],["error.definition",{"_index":237,"title":{},"body":{"classes/Output.html":{}}}],["error.path",{"_index":281,"title":{},"body":{"classes/Output.html":{}}}],["error.type",{"_index":275,"title":{},"body":{"classes/Output.html":{}}}],["error.value",{"_index":235,"title":{},"body":{"classes/Output.html":{}}}],["erroreq",{"_index":168,"title":{},"body":{"classes/Output.html":{}}}],["erroreq(error",{"_index":198,"title":{},"body":{"classes/Output.html":{}}}],["errorext",{"_index":169,"title":{},"body":{"classes/Output.html":{}}}],["errorext(error",{"_index":200,"title":{},"body":{"classes/Output.html":{}}}],["errormiss",{"_index":170,"title":{},"body":{"classes/Output.html":{}}}],["errormiss(error",{"_index":202,"title":{},"body":{"classes/Output.html":{}}}],["errors",{"_index":211,"title":{},"body":{"classes/Output.html":{}}}],["errors.foreach((e",{"_index":270,"title":{},"body":{"classes/Output.html":{}}}],["errors.length",{"_index":248,"title":{},"body":{"classes/Output.html":{}}}],["errors.pop",{"_index":254,"title":{},"body":{"classes/Output.html":{}}}],["errors.sort((a",{"_index":257,"title":{},"body":{"classes/Output.html":{}}}],["etc",{"_index":39,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["event",{"_index":348,"title":{},"body":{"classes/Stubborn.html":{},"license.html":{}}}],["eventemitter",{"_index":315,"title":{},"body":{"classes/Stubborn.html":{}}}],["events",{"_index":366,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ex",{"_index":528,"title":{},"body":{"index.html":{}}}],["exactly",{"_index":526,"title":{},"body":{"index.html":{}}}],["example",{"_index":286,"title":{},"body":{"classes/Stubborn.html":{}}}],["expect(res).toreplywith(status_codes.success",{"_index":579,"title":{},"body":{"index.html":{}}}],["expect(res.body).toequal",{"_index":295,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["expect(res.body).toequal(body",{"_index":556,"title":{},"body":{"index.html":{}}}],["expect(res.calls.length).tobe(1",{"_index":611,"title":{},"body":{"index.html":{}}}],["expect(res.calls[0]).toequal",{"_index":612,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).tobe(501",{"_index":601,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(200",{"_index":572,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(501",{"_index":563,"title":{},"body":{"index.html":{}}}],["expected",{"_index":283,"title":{},"body":{"classes/Output.html":{},"index.html":{}}}],["export",{"_index":18,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["express",{"_index":674,"title":{},"body":{"license.html":{}}}],["extends",{"_index":7,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["external",{"_index":495,"title":{},"body":{"index.html":{}}}],["extra",{"_index":486,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["fact",{"_index":532,"title":{},"body":{"index.html":{}}}],["fail_equality",{"_index":482,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fail_function",{"_index":484,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fail_matching",{"_index":483,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["false",{"_index":562,"title":{},"body":{"index.html":{}}}],["faq",{"_index":508,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{}}}],["files",{"_index":645,"title":{},"body":{"license.html":{}}}],["find",{"_index":585,"title":{},"body":{"index.html":{}}}],["finderrors",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["finderrorsobject",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["fitness",{"_index":679,"title":{},"body":{"license.html":{}}}],["follow",{"_index":624,"title":{},"body":{"index.html":{}}}],["following",{"_index":663,"title":{},"body":{"license.html":{}}}],["formatarray",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["formatdifferror",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["formaterror",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["formatpath",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["formatprimitive",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["formatproperty",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["formatvalue",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["free",{"_index":638,"title":{},"body":{"license.html":{}}}],["fullname",{"_index":634,"title":{},"body":{"license.html":{}}}],["function",{"_index":33,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["furnished",{"_index":661,"title":{},"body":{"license.html":{}}}],["generic",{"_index":31,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["get(path",{"_index":331,"title":{},"body":{"classes/Stubborn.html":{}}}],["getinfo",{"_index":109,"title":{},"body":{"classes/Debugger.html":{}}}],["getorigin",{"_index":304,"title":{},"body":{"classes/Stubborn.html":{}}}],["getport",{"_index":305,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport",{"_index":368,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport(this.server",{"_index":380,"title":{},"body":{"classes/Stubborn.html":{}}}],["getting",{"_index":492,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":613,"title":{},"body":{"index.html":{}}}],["github",{"_index":627,"title":{},"body":{"index.html":{}}}],["go",{"_index":626,"title":{},"body":{"index.html":{}}}],["got(`${sb.getorigin",{"_index":292,"title":{},"body":{"classes/Stubborn.html":{}}}],["granted",{"_index":637,"title":{},"body":{"license.html":{}}}],["hapi/accept",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["hardcoded",{"_index":542,"title":{},"body":{"index.html":{}}}],["hash",{"_index":85,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["hasown",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["header",{"_index":36,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["headerdefinition",{"_index":57,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":76,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["headersdefinition",{"_index":58,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["headersdiff",{"_index":125,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["headersdiff(route.getheaders",{"_index":149,"title":{},"body":{"classes/Debugger.html":{}}}],["help",{"_index":584,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":636,"title":{},"body":{"license.html":{}}}],["holders",{"_index":684,"title":{},"body":{"license.html":{}}}],["host",{"_index":370,"title":{},"body":{"classes/Stubborn.html":{}}}],["hot",{"_index":520,"title":{},"body":{"index.html":{}}}],["http",{"_index":13,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{}}}],["http://${this.options.host}:${this.getport",{"_index":381,"title":{},"body":{"classes/Stubborn.html":{}}}],["identifier",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":558,"title":{},"body":{"index.html":{}}}],["implied",{"_index":675,"title":{},"body":{"license.html":{}}}],["import",{"_index":9,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["included",{"_index":668,"title":{},"body":{"license.html":{}}}],["including",{"_index":649,"title":{},"body":{"license.html":{}}}],["incomingmessage",{"_index":11,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["index",{"_index":73,"title":{"index.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["initialized",{"_index":336,"title":{},"body":{"classes/Stubborn.html":{}}}],["inspect",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["install",{"_index":512,"title":{},"body":{"index.html":{}}}],["installation",{"_index":506,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":151,"title":{},"body":{"classes/Debugger.html":{}}}],["interface",{"_index":0,"title":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"overview.html":{}}}],["intersectkeys",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["invalid_value_type",{"_index":487,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isboolean",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["isdate",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["iserror",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["isfunction",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["isnull",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["isnumber",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["isobject",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["isregexp",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["isstring",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["isundefined",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["it('should",{"_index":553,"title":{},"body":{"index.html":{}}}],["json",{"_index":293,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["jsonarray",{"_index":28,"title":{"interfaces/JsonArray.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["jsonobject",{"_index":25,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["jsonprimitive",{"_index":20,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["jsonvalue",{"_index":27,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["key",{"_index":70,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["keystolowercase",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["kind",{"_index":673,"title":{},"body":{"license.html":{}}}],["know",{"_index":602,"title":{},"body":{"index.html":{}}}],["liability",{"_index":688,"title":{},"body":{"license.html":{}}}],["liable",{"_index":685,"title":{},"body":{"license.html":{}}}],["license",{"_index":629,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":650,"title":{},"body":{"license.html":{}}}],["limited",{"_index":676,"title":{},"body":{"license.html":{}}}],["line:no",{"_index":157,"title":{},"body":{"classes/Debugger.html":{}}}],["lines",{"_index":188,"title":{},"body":{"classes/Output.html":{}}}],["lines.foreach(line",{"_index":226,"title":{},"body":{"classes/Output.html":{}}}],["listener",{"_index":345,"title":{},"body":{"classes/Stubborn.html":{}}}],["listening",{"_index":342,"title":{},"body":{"classes/Stubborn.html":{}}}],["literal",{"_index":708,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":521,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":374,"title":{},"body":{"classes/Stubborn.html":{}}}],["lodash",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":595,"title":{},"body":{"index.html":{}}}],["logdiff",{"_index":110,"title":{},"body":{"classes/Debugger.html":{},"index.html":{}}}],["logdiff(route",{"_index":120,"title":{},"body":{"classes/Debugger.html":{}}}],["logdiffon501",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["logdiffon501(sb",{"_index":599,"title":{},"body":{"index.html":{}}}],["m",{"_index":621,"title":{},"body":{"index.html":{}}}],["master",{"_index":615,"title":{},"body":{"index.html":{}}}],["match",{"_index":32,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["matched",{"_index":524,"title":{},"body":{"index.html":{}}}],["matches",{"_index":557,"title":{},"body":{"index.html":{}}}],["matchfunction",{"_index":42,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["matching",{"_index":102,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meets",{"_index":500,"title":{},"body":{"index.html":{}}}],["member",{"_index":26,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["merchantability",{"_index":678,"title":{},"body":{"license.html":{}}}],["merge",{"_index":653,"title":{},"body":{"license.html":{}}}],["method",{"_index":86,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["methoddefinition",{"_index":55,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["methoddiff",{"_index":127,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["methoddiff(route.getmethod",{"_index":146,"title":{},"body":{"classes/Debugger.html":{}}}],["methods",{"_index":15,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["middleware",{"_index":93,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":478,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":589,"title":{},"body":{"index.html":{}}}],["missing",{"_index":485,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["mit",{"_index":630,"title":{},"body":{"license.html":{}}}],["mock",{"_index":494,"title":{},"body":{"index.html":{}}}],["modify",{"_index":652,"title":{},"body":{"license.html":{}}}],["modules",{"_index":697,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":116,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["needed",{"_index":550,"title":{},"body":{"index.html":{}}}],["new",{"_index":144,"title":{},"body":{"classes/Debugger.html":{},"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["newline",{"_index":171,"title":{},"body":{"classes/Output.html":{}}}],["next",{"_index":96,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["nextfunction",{"_index":90,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["nock",{"_index":499,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":682,"title":{},"body":{"license.html":{}}}],["not_implemented",{"_index":490,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notice",{"_index":666,"title":{},"body":{"license.html":{}}}],["npm",{"_index":511,"title":{},"body":{"index.html":{}}}],["null",{"_index":24,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":22,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["object",{"_index":324,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":373,"title":{},"body":{"classes/Stubborn.html":{}}}],["objectorarray",{"_index":704,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["objecttostring",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["obtaining",{"_index":641,"title":{},"body":{"license.html":{}}}],["off(event",{"_index":343,"title":{},"body":{"classes/Stubborn.html":{}}}],["on(event",{"_index":349,"title":{},"body":{"classes/Stubborn.html":{}}}],["once",{"_index":306,"title":{},"body":{"classes/Stubborn.html":{}}}],["once(event",{"_index":351,"title":{},"body":{"classes/Stubborn.html":{}}}],["one",{"_index":527,"title":{},"body":{"index.html":{}}}],["optional",{"_index":117,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["options",{"_index":297,"title":{},"body":{"classes/Stubborn.html":{}}}],["options.port",{"_index":337,"title":{},"body":{"classes/Stubborn.html":{}}}],["origin",{"_index":334,"title":{},"body":{"classes/Stubborn.html":{}}}],["otherwise",{"_index":693,"title":{},"body":{"license.html":{}}}],["out",{"_index":143,"title":{},"body":{"classes/Debugger.html":{},"license.html":{}}}],["out.rendererrors",{"_index":145,"title":{},"body":{"classes/Debugger.html":{}}}],["out.rendererrors('body",{"_index":154,"title":{},"body":{"classes/Debugger.html":{}}}],["out.rendererrors('path",{"_index":147,"title":{},"body":{"classes/Debugger.html":{}}}],["output",{"_index":133,"title":{"classes/Output.html":{}},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"coverage.html":{}}}],["overview",{"_index":698,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pach",{"_index":355,"title":{},"body":{"classes/Stubborn.html":{}}}],["package",{"_index":467,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":560,"title":{},"body":{"index.html":{}}}],["param",{"_index":384,"title":{},"body":{"classes/Stubborn.html":{}}}],["parameter",{"_index":529,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":115,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["parseint(value",{"_index":577,"title":{},"body":{"index.html":{}}}],["parser",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":52,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["particular",{"_index":680,"title":{},"body":{"license.html":{}}}],["patch",{"_index":307,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["patch(path",{"_index":353,"title":{},"body":{"classes/Stubborn.html":{}}}],["path",{"_index":84,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["path).setbody(body",{"_index":388,"title":{},"body":{"classes/Stubborn.html":{}}}],["pathdefinition",{"_index":56,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["pathdiff",{"_index":129,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["pathdiff(route.getpath",{"_index":148,"title":{},"body":{"classes/Debugger.html":{}}}],["permission",{"_index":635,"title":{},"body":{"license.html":{}}}],["permit",{"_index":659,"title":{},"body":{"license.html":{}}}],["person",{"_index":640,"title":{},"body":{"license.html":{}}}],["persons",{"_index":660,"title":{},"body":{"license.html":{}}}],["picked",{"_index":540,"title":{},"body":{"index.html":{}}}],["port",{"_index":298,"title":{},"body":{"classes/Stubborn.html":{}}}],["portions",{"_index":670,"title":{},"body":{"license.html":{}}}],["possible",{"_index":48,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["post",{"_index":308,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["post(path",{"_index":356,"title":{},"body":{"classes/Stubborn.html":{}}}],["private",{"_index":162,"title":{},"body":{"classes/Output.html":{},"classes/Stubborn.html":{}}}],["promise",{"_index":362,"title":{},"body":{"classes/Stubborn.html":{}}}],["promise(resolve",{"_index":392,"title":{},"body":{"classes/Stubborn.html":{}}}],["properties",{"_index":160,"title":{},"body":{"interfaces/DiffError.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["property",{"_index":608,"title":{},"body":{"index.html":{}}}],["provided",{"_index":671,"title":{},"body":{"license.html":{}}}],["public",{"_index":108,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["publish",{"_index":622,"title":{},"body":{"index.html":{},"license.html":{}}}],["pull",{"_index":616,"title":{},"body":{"index.html":{}}}],["pulltab",{"_index":172,"title":{},"body":{"classes/Output.html":{}}}],["purpose",{"_index":681,"title":{},"body":{"license.html":{}}}],["push",{"_index":623,"title":{},"body":{"index.html":{}}}],["pushtab",{"_index":173,"title":{},"body":{"classes/Output.html":{}}}],["put",{"_index":309,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["put(path",{"_index":358,"title":{},"body":{"classes/Stubborn.html":{}}}],["q",{"_index":581,"title":{},"body":{"index.html":{}}}],["query",{"_index":38,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["querydefinition",{"_index":66,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["querydiff",{"_index":131,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["querydiff(route.getqueryparameters",{"_index":150,"title":{},"body":{"classes/Debugger.html":{}}}],["queryparameterdefinition",{"_index":65,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["queryparameterdefinitionprimitives",{"_index":64,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["randomly",{"_index":339,"title":{},"body":{"classes/Stubborn.html":{}}}],["rebase",{"_index":617,"title":{},"body":{"index.html":{}}}],["rec",{"_index":416,"title":{},"body":{"coverage.html":{}}}],["received",{"_index":282,"title":{},"body":{"classes/Output.html":{},"index.html":{}}}],["receiving",{"_index":588,"title":{},"body":{"index.html":{}}}],["record",{"_index":59,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["reducetosinglestring",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["regex",{"_index":573,"title":{},"body":{"index.html":{}}}],["regexp",{"_index":44,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":322,"title":{},"body":{"classes/Stubborn.html":{}}}],["release",{"_index":510,"title":{},"body":{"index.html":{}}}],["remove",{"_index":326,"title":{},"body":{"classes/Stubborn.html":{}}}],["render",{"_index":174,"title":{},"body":{"classes/Output.html":{}}}],["rendererror",{"_index":175,"title":{},"body":{"classes/Output.html":{}}}],["rendererror(error",{"_index":208,"title":{},"body":{"classes/Output.html":{}}}],["rendererrors",{"_index":176,"title":{},"body":{"classes/Output.html":{}}}],["rendererrors(cat",{"_index":210,"title":{},"body":{"classes/Output.html":{}}}],["rendermultipleserrors",{"_index":177,"title":{},"body":{"classes/Output.html":{}}}],["rendermultipleserrors(errors",{"_index":213,"title":{},"body":{"classes/Output.html":{}}}],["renderoneerror",{"_index":178,"title":{},"body":{"classes/Output.html":{}}}],["renderoneerror(errors",{"_index":215,"title":{},"body":{"classes/Output.html":{}}}],["repeat(this.currenttab",{"_index":246,"title":{},"body":{"classes/Output.html":{}}}],["req",{"_index":94,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["request",{"_index":51,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["request('/?page=2",{"_index":578,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin",{"_index":555,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin()}?page=1&limit=10",{"_index":565,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin()}?page=2",{"_index":566,"title":{},"body":{"index.html":{}}}],["request(sb.getorigin",{"_index":600,"title":{},"body":{"index.html":{}}}],["requestbody",{"_index":79,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestdiff",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["requesthash",{"_index":81,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestheaders",{"_index":77,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestinfo",{"_index":83,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestmatcher",{"_index":97,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestmethod",{"_index":82,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestpath",{"_index":80,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestquery",{"_index":78,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requests",{"_index":503,"title":{},"body":{"index.html":{}}}],["res",{"_index":95,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["resolve",{"_index":395,"title":{},"body":{"classes/Stubborn.html":{}}}],["resolved",{"_index":363,"title":{},"body":{"classes/Stubborn.html":{}}}],["respond",{"_index":530,"title":{},"body":{"index.html":{}}}],["response",{"_index":89,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["responsebody",{"_index":99,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["responsedefinition",{"_index":74,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["responseheaders",{"_index":98,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["responses",{"_index":497,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":648,"title":{},"body":{"license.html":{}}}],["result",{"_index":101,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":103,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":135,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["returned",{"_index":587,"title":{},"body":{"index.html":{}}}],["returns",{"_index":119,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["rights",{"_index":651,"title":{},"body":{"license.html":{}}}],["route",{"_index":121,"title":{},"body":{"classes/Debugger.html":{},"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["router",{"_index":299,"title":{},"body":{"classes/Stubborn.html":{}}}],["routes",{"_index":327,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["save",{"_index":513,"title":{},"body":{"index.html":{}}}],["sb",{"_index":289,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.clear",{"_index":552,"title":{},"body":{"index.html":{}}}],["sb.get",{"_index":567,"title":{},"body":{"index.html":{}}}],["sb.get('/').setqueryparameters",{"_index":559,"title":{},"body":{"index.html":{}}}],["sb.get('/').setresponsebody",{"_index":290,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.post",{"_index":574,"title":{},"body":{"index.html":{}}}],["sb.start",{"_index":546,"title":{},"body":{"index.html":{}}}],["sb.stop",{"_index":548,"title":{},"body":{"index.html":{}}}],["scope",{"_index":68,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["searchparams",{"_index":87,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["see",{"_index":580,"title":{},"body":{"index.html":{}}}],["sell",{"_index":657,"title":{},"body":{"license.html":{}}}],["send",{"_index":537,"title":{},"body":{"index.html":{}}}],["sent",{"_index":534,"title":{},"body":{"index.html":{}}}],["separate",{"_index":505,"title":{},"body":{"index.html":{}}}],["server",{"_index":300,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["serverresponse",{"_index":12,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["set",{"_index":338,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["setheaders",{"_index":594,"title":{},"body":{"index.html":{}}}],["setheaders(null",{"_index":569,"title":{},"body":{"index.html":{}}}],["setqueryparameters",{"_index":568,"title":{},"body":{"index.html":{}}}],["setresponsebody('content",{"_index":610,"title":{},"body":{"index.html":{}}}],["setup",{"_index":609,"title":{},"body":{"index.html":{}}}],["shall",{"_index":667,"title":{},"body":{"license.html":{}}}],["slug",{"_index":575,"title":{},"body":{"index.html":{}}}],["software",{"_index":643,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["specify",{"_index":40,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["src/.../constants.ts",{"_index":480,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":703,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../stubborn.ts",{"_index":706,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../utils.ts",{"_index":705,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/@types/index.ts",{"_index":6,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/constants.ts",{"_index":411,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/debug/debugger.ts",{"_index":107,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["src/debug/debugger.ts:10",{"_index":114,"title":{},"body":{"classes/Debugger.html":{}}}],["src/debug/debugger.ts:13",{"_index":118,"title":{},"body":{"classes/Debugger.html":{}}}],["src/debug/debugger.ts:24",{"_index":122,"title":{},"body":{"classes/Debugger.html":{}}}],["src/debug/output.ts",{"_index":161,"title":{},"body":{"classes/Output.html":{},"coverage.html":{}}}],["src/debug/output.ts:10",{"_index":187,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:130",{"_index":209,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:153",{"_index":218,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:157",{"_index":193,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:21",{"_index":196,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:27",{"_index":204,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:31",{"_index":199,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:42",{"_index":203,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:49",{"_index":201,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:56",{"_index":207,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:60",{"_index":206,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:64",{"_index":205,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:68",{"_index":190,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:7",{"_index":183,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:72",{"_index":220,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:76",{"_index":222,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:80",{"_index":212,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:93",{"_index":216,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:98",{"_index":214,"title":{},"body":{"classes/Output.html":{}}}],["src/diff/bodydiff.ts",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["src/diff/headersdiff.ts",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["src/diff/methoddiff.ts",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["src/diff/pathdiff.ts",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["src/diff/querydiff.ts",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["src/diff/requestdiff.ts",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["src/diff/utils.ts",{"_index":425,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/inspect.ts",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["src/route.ts",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["src/stubborn.ts",{"_index":285,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/stubborn.ts:103",{"_index":354,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:113",{"_index":357,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:123",{"_index":359,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:131",{"_index":321,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:139",{"_index":361,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:154",{"_index":364,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:160",{"_index":350,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:164",{"_index":352,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:168",{"_index":347,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:29",{"_index":319,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:30",{"_index":317,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:31",{"_index":318,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:32",{"_index":316,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:33",{"_index":314,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:56",{"_index":335,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:64",{"_index":333,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:71",{"_index":325,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:84",{"_index":329,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:93",{"_index":332,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/utils.ts",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["start",{"_index":310,"title":{},"body":{"classes/Stubborn.html":{}}}],["start(port",{"_index":360,"title":{},"body":{"classes/Stubborn.html":{}}}],["started",{"_index":341,"title":{"index.html":{},"license.html":{}},"body":{"classes/Stubborn.html":{}}}],["statements",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["status_codes",{"_index":481,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":75,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["stop",{"_index":311,"title":{},"body":{"classes/Stubborn.html":{}}}],["stopped",{"_index":365,"title":{},"body":{"classes/Stubborn.html":{}}}],["strictly",{"_index":502,"title":{},"body":{"index.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["string(this.request.body",{"_index":153,"title":{},"body":{"classes/Debugger.html":{}}}],["stringify",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["stubborn",{"_index":284,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["stubbornoptions",{"_index":313,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["stuff",{"_index":571,"title":{},"body":{"index.html":{}}}],["stylizenocolor",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["stylizewithcolor",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["subject",{"_index":662,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":655,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":669,"title":{},"body":{"license.html":{}}}],["substractionlabel",{"_index":179,"title":{},"body":{"classes/Output.html":{}}}],["substractionlabel(error",{"_index":217,"title":{},"body":{"classes/Output.html":{}}}],["substration",{"_index":180,"title":{},"body":{"classes/Output.html":{}}}],["substration(text",{"_index":219,"title":{},"body":{"classes/Output.html":{}}}],["subtraction",{"_index":240,"title":{},"body":{"classes/Output.html":{}}}],["success",{"_index":488,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["switch",{"_index":274,"title":{},"body":{"classes/Output.html":{}}}],["symbol",{"_index":344,"title":{},"body":{"classes/Stubborn.html":{}}}],["symbol.for('cleared",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.for('not_implemented",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.for('wildcard",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tab",{"_index":181,"title":{},"body":{"classes/Output.html":{}}}],["tab(text",{"_index":221,"title":{},"body":{"classes/Output.html":{}}}],["table",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["tagsthen",{"_index":625,"title":{},"body":{"index.html":{}}}],["template",{"_index":71,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["templatearray",{"_index":72,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["templatefunction",{"_index":67,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["templateobject",{"_index":69,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["test",{"_index":538,"title":{},"body":{"index.html":{}}}],["testing",{"_index":518,"title":{},"body":{"index.html":{}}}],["text",{"_index":191,"title":{},"body":{"classes/Output.html":{}}}],["therefore",{"_index":583,"title":{},"body":{"index.html":{}}}],["this.add",{"_index":233,"title":{},"body":{"classes/Output.html":{}}}],["this.add(color.bold.underline(uccat",{"_index":232,"title":{},"body":{"classes/Output.html":{}}}],["this.add(line",{"_index":227,"title":{},"body":{"classes/Output.html":{}}}],["this.add(this.addition(this.tab(addition",{"_index":239,"title":{},"body":{"classes/Output.html":{}}}],["this.add(this.substration(this.tab(substration",{"_index":238,"title":{},"body":{"classes/Output.html":{}}}],["this.add(this.substration(this.tab(subtraction",{"_index":241,"title":{},"body":{"classes/Output.html":{}}}],["this.additionlabel(error",{"_index":236,"title":{},"body":{"classes/Output.html":{}}}],["this.category(cat",{"_index":250,"title":{},"body":{"classes/Output.html":{}}}],["this.currenttab",{"_index":243,"title":{},"body":{"classes/Output.html":{}}}],["this.emitter",{"_index":379,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.emit(events.cleared",{"_index":383,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.off(event",{"_index":399,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.on(event",{"_index":397,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.once(event",{"_index":398,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.erroreq(error",{"_index":277,"title":{},"body":{"classes/Output.html":{}}}],["this.errorext(error",{"_index":280,"title":{},"body":{"classes/Output.html":{}}}],["this.errormiss(error",{"_index":279,"title":{},"body":{"classes/Output.html":{}}}],["this.newline",{"_index":249,"title":{},"body":{"classes/Output.html":{}}}],["this.options",{"_index":372,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.options.host",{"_index":378,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.output.join('\\n",{"_index":242,"title":{},"body":{"classes/Output.html":{}}}],["this.output.push(lines",{"_index":228,"title":{},"body":{"classes/Output.html":{}}}],["this.port",{"_index":375,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.pulltab",{"_index":273,"title":{},"body":{"classes/Output.html":{}}}],["this.pushtab",{"_index":256,"title":{},"body":{"classes/Output.html":{}}}],["this.rendererror(e",{"_index":272,"title":{},"body":{"classes/Output.html":{}}}],["this.rendererror(error",{"_index":255,"title":{},"body":{"classes/Output.html":{}}}],["this.rendermultipleserrors(errors",{"_index":253,"title":{},"body":{"classes/Output.html":{}}}],["this.renderoneerror(errors",{"_index":252,"title":{},"body":{"classes/Output.html":{}}}],["this.request.body",{"_index":140,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.hash",{"_index":141,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.headers",{"_index":138,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.method",{"_index":136,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.path",{"_index":137,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.query",{"_index":139,"title":{},"body":{"classes/Debugger.html":{}}}],["this.router",{"_index":377,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.addroute(route",{"_index":391,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.clear",{"_index":382,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.delete",{"_index":385,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.get",{"_index":386,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.patch",{"_index":387,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.post",{"_index":389,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.put",{"_index":390,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.handle(this.server",{"_index":394,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server",{"_index":376,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.close",{"_index":396,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.listen(this.port",{"_index":393,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.substractionlabel(error",{"_index":234,"title":{},"body":{"classes/Output.html":{}}}],["throwhttperrors",{"_index":561,"title":{},"body":{"index.html":{}}}],["throwing",{"_index":598,"title":{},"body":{"index.html":{}}}],["todo",{"_index":29,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["tool",{"_index":519,"title":{},"body":{"index.html":{}}}],["tort",{"_index":692,"title":{},"body":{"license.html":{}}}],["true",{"_index":294,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["tslint:disable",{"_index":156,"title":{},"body":{"classes/Debugger.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":701,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":45,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["types",{"_index":54,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["types.indexof(a.type",{"_index":267,"title":{},"body":{"classes/Output.html":{}}}],["types.indexof(b.type",{"_index":269,"title":{},"body":{"classes/Output.html":{}}}],["types.length",{"_index":266,"title":{},"body":{"classes/Output.html":{}}}],["typescript",{"_index":287,"title":{},"body":{"classes/Stubborn.html":{}}}],["uccat",{"_index":229,"title":{},"body":{"classes/Output.html":{}}}],["undefined",{"_index":47,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["unload",{"_index":522,"title":{},"body":{"index.html":{}}}],["up",{"_index":541,"title":{},"body":{"index.html":{}}}],["update",{"_index":606,"title":{},"body":{"index.html":{}}}],["urlsearchparams",{"_index":88,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["usage",{"_index":507,"title":{},"body":{"index.html":{}}}],["use",{"_index":30,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":591,"title":{},"body":{"index.html":{}}}],["using",{"_index":543,"title":{},"body":{"index.html":{}}}],["utils",{"_index":369,"title":{},"body":{"classes/Stubborn.html":{}}}],["validatefn",{"_index":707,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["validates",{"_index":533,"title":{},"body":{"index.html":{}}}],["value",{"_index":41,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":49,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["variable",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":709,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["very",{"_index":531,"title":{},"body":{"index.html":{}}}],["void",{"_index":92,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["warranties",{"_index":677,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":672,"title":{},"body":{"license.html":{}}}],["web",{"_index":493,"title":{},"body":{"index.html":{}}}],["webserver",{"_index":523,"title":{},"body":{"index.html":{}}}],["whether",{"_index":689,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":16,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":647,"title":{},"body":{"license.html":{}}}],["ws",{"_index":288,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["wsusage",{"_index":517,"title":{},"body":{"index.html":{}}}],["wsyarn",{"_index":515,"title":{},"body":{"index.html":{}}}],["x",{"_index":570,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":618,"title":{},"body":{"index.html":{}}}],["year",{"_index":633,"title":{},"body":{"license.html":{}}}],["z",{"_index":576,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/BodyDefinitionArray.html":{"url":"interfaces/BodyDefinitionArray.html","title":"interface - BodyDefinitionArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BodyDefinitionArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n\n\n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from 'http';\nimport { DIFF_TYPES, METHODS, WILDCARD } from '../constants';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type Request = IncomingMessage &\n  RequestInfo & {\n    searchParams?: URLSearchParams;\n  };\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue;\n\nexport interface DiffError {\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Debugger.html":{"url":"classes/Debugger.html","title":"class - Debugger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Debugger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/debug/Debugger.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getInfo\n                            \n                            \n                                    Public\n                                logDiff\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/debug/Debugger.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Debugger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { method: any; path: any; headers: any; query: any; body: any; hash: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            logDiff\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logDiff(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Debugger.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Request } from '../@types';\nimport { bodyDiff } from '../diff/bodyDiff';\nimport { headersDiff } from '../diff/headersDiff';\nimport { methodDiff } from '../diff/methodDiff';\nimport { pathDiff } from '../diff/pathDiff';\nimport { queryDiff } from '../diff/queryDiff';\nimport { Route } from '../Route';\nimport { Output } from './Output';\n\nexport class Debugger {\n  constructor(private request: Request) {}\n\n  public getInfo() {\n    return {\n      method: this.request.method,\n      path: this.request.path,\n      headers: this.request.headers,\n      query: this.request.query,\n      body: this.request.body,\n      hash: this.request.hash,\n    };\n  }\n\n  public logDiff(route: Route) {\n    const out = new Output();\n\n    out.renderErrors(\n      'Method',\n      methodDiff(route.getMethod(), this.request.method),\n    );\n    out.renderErrors('Path', pathDiff(route.getPath(), this.request.path));\n    out.renderErrors(\n      'Headers',\n      headersDiff(route.getHeaders(), this.request.headers),\n    );\n    out.renderErrors(\n      'Query',\n      queryDiff(route.getQueryParameters(), this.request.query),\n    );\n    const body =\n      this.request.body instanceof Buffer\n        ? String(this.request.body)\n        : this.request.body;\n    out.renderErrors('Body', bodyDiff(route.getBody(), body));\n\n    // tslint:disable-next-line:no-console\n    console.log(out.render());\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiffError.html":{"url":"interfaces/DiffError.html","title":"interface - DiffError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DiffError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        definition\n                                \n                                \n                                        path\n                                \n                                \n                                        type\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        definition\n                                    \n                                \n                                \n                                    \n                                        definition:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         DIFF_TYPES\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DIFF_TYPES\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         JsonValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JsonValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from 'http';\nimport { DIFF_TYPES, METHODS, WILDCARD } from '../constants';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type Request = IncomingMessage &\n  RequestInfo & {\n    searchParams?: URLSearchParams;\n  };\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue;\n\nexport interface DiffError {\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JsonArray.html":{"url":"interfaces/JsonArray.html","title":"interface - JsonArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JsonArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n\n\n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from 'http';\nimport { DIFF_TYPES, METHODS, WILDCARD } from '../constants';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type Request = IncomingMessage &\n  RequestInfo & {\n    searchParams?: URLSearchParams;\n  };\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue;\n\nexport interface DiffError {\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Output.html":{"url":"classes/Output.html","title":"class - Output","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Output\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/debug/Output.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentTab\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                addition\n                            \n                            \n                                    Private\n                                additionLabel\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                errorEq\n                            \n                            \n                                    Public\n                                errorExt\n                            \n                            \n                                    Public\n                                errorMiss\n                            \n                            \n                                    Public\n                                newLine\n                            \n                            \n                                    Public\n                                pullTab\n                            \n                            \n                                    Public\n                                pushTab\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                renderError\n                            \n                            \n                                    Public\n                                renderErrors\n                            \n                            \n                                    Public\n                                renderMultiplesErrors\n                            \n                            \n                                    Public\n                                renderOneError\n                            \n                            \n                                    Private\n                                substractionLabel\n                            \n                            \n                                    Public\n                                substration\n                            \n                            \n                                    Public\n                                tab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(output: string[])\n                    \n                \n                        \n                            \n                                Defined in src/debug/Output.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        output\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/debug/Output.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(lines: string | string[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lines\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addition(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            additionLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    additionLabel(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            category\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    category(cat: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cat\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            errorEq\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorEq(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            errorExt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorExt(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            errorMiss\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorMiss(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            newLine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newLine()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            pullTab\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    pullTab()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            pushTab\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    pushTab()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderError(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderErrors\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderErrors(cat: string, errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cat\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderMultiplesErrors\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderMultiplesErrors(errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderOneError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderOneError(errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            substractionLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    substractionLabel(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            substration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    substration(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            tab\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    tab(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Color from 'chalk';\n\nimport { DiffError } from '../@types';\nimport { DIFF_TYPES } from '../constants';\n\nexport class Output {\n  private currentTab = 0;\n  constructor(private output: string[] = []) {}\n\n  public add(lines: string | string[]) {\n    if (Array.isArray(lines)) {\n      lines.forEach(line => this.add(line));\n      return this;\n    }\n\n    this.output.push(lines);\n\n    return this;\n  }\n\n  public category(cat: string) {\n    const ucCat = cat[0].toUpperCase() + cat.slice(1);\n\n    return this.add(Color.bold.underline(ucCat));\n  }\n\n  public newLine() {\n    return this.add('');\n  }\n\n  public errorEq(error: DiffError) {\n    const substration = `${this.substractionLabel(error)}: ${String(\n      error.value,\n    )}`;\n    const addition = `${this.additionLabel(error)}: ${String(\n      error.definition,\n    )}`;\n    this.add(this.substration(this.tab(substration)));\n    this.add(this.addition(this.tab(addition)));\n  }\n\n  public errorMiss(error: DiffError) {\n    const addition = `${this.additionLabel(error)}: ${String(\n      error.definition,\n    )}`;\n    this.add(this.addition(this.tab(addition)));\n  }\n\n  public errorExt(error: DiffError) {\n    const subtraction = `${this.substractionLabel(error)}: ${String(\n      error.value,\n    )}`;\n    this.add(this.substration(this.tab(subtraction)));\n  }\n\n  public render() {\n    return this.output.join('\\n');\n  }\n\n  public pushTab() {\n    this.currentTab++;\n  }\n\n  public pullTab() {\n    this.currentTab--;\n  }\n\n  public addition(text: string) {\n    return Color.green(`+ ${text}`);\n  }\n\n  public substration(text: string) {\n    return Color.red(`- ${text}`);\n  }\n\n  public tab(text: string) {\n    return ' '.repeat(this.currentTab * 2) + text;\n  }\n\n  public renderErrors(cat: string, errors: DiffError[]) {\n    if (errors.length === 0) {\n      return;\n    }\n\n    this.newLine();\n\n    this.category(cat);\n    errors.length === 1\n      ? this.renderOneError(errors)\n      : this.renderMultiplesErrors(errors);\n  }\n\n  public renderOneError(errors: DiffError[]) {\n    const error = errors.pop() as DiffError;\n    this.renderError(error);\n  }\n\n  public renderMultiplesErrors(errors: DiffError[]) {\n    this.pushTab();\n\n    errors.sort((a: DiffError, b: DiffError) => {\n      const types = [\n        DIFF_TYPES.MISSING,\n        DIFF_TYPES.EXTRA,\n        DIFF_TYPES.FAIL_EQUALITY,\n        DIFF_TYPES.FAIL_MATCHING,\n        DIFF_TYPES.FAIL_FUNCTION,\n        DIFF_TYPES.INVALID_VALUE_TYPE,\n      ];\n      const aWeight = types.length - types.indexOf(a.type);\n      const bWeight = types.length - types.indexOf(b.type);\n\n      if (aWeight === bWeight) {\n        return 0;\n      }\n\n      return aWeight > bWeight ? -1 : 1;\n    });\n\n    errors.forEach((e, i) => {\n      if (i !== 0 && ![DIFF_TYPES.MISSING, DIFF_TYPES.EXTRA].includes(e.type)) {\n        this.newLine();\n      }\n\n      this.renderError(e);\n    });\n    this.pullTab();\n  }\n\n  public renderError(error: DiffError) {\n    switch (error.type) {\n      case DIFF_TYPES.FAIL_EQUALITY:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.FAIL_MATCHING:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.FAIL_FUNCTION:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.MISSING:\n        this.errorMiss(error);\n        break;\n      case DIFF_TYPES.EXTRA:\n        this.errorExt(error);\n        break;\n      case DIFF_TYPES.INVALID_VALUE_TYPE:\n        this.errorEq(error);\n        break;\n    }\n  }\n\n  private substractionLabel(error: DiffError) {\n    return error.path === '' ? 'Received' : error.path;\n  }\n\n  private additionLabel(error: DiffError) {\n    return error.path === '' ? 'Expected' : error.path;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stubborn.html":{"url":"classes/Stubborn.html","title":"class - Stubborn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stubborn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Stubborn.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n                        \n                            ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n                        \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitter\n                            \n                            \n                                    Private\n                                options\n                            \n                            \n                                    Private\n                                port\n                            \n                            \n                                    Private\n                                router\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRoute\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getOrigin\n                            \n                            \n                                    Public\n                                getPort\n                            \n                            \n                                    Public\n                                off\n                            \n                            \n                                    Public\n                                on\n                            \n                            \n                                    Public\n                                once\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: StubbornOptions)\n                    \n                \n                        \n                            \n                                Defined in src/Stubborn.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        StubbornOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            emitter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventEmitter\n\n                        \n                    \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StubbornOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            port\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRoute\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRoute(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:131\n                \n            \n\n\n            \n                \n                    Register a new route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route a Route object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:71\n                \n            \n\n\n            \n                \n                    Remove all routes from the server\n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:84\n                \n            \n\n\n            \n                \n                    Create and Register a new DELETE route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:93\n                \n            \n\n\n            \n                \n                    Create and Register a new GET route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOrigin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrigin()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:64\n                \n            \n\n\n            \n                \n                    Returns the server origin (http://:)\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the server origin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPort\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPort()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:56\n                \n            \n\n\n            \n                \n                    Returns the server port.\nIf the server is initialized with options.port set to 0 this method\nwill return the randomly affected port only after the server is started\n\n\n                    \n                    \n                    \n                        Returns :     number | null\n\n                    \n                    \n                        Listening port or null if the server is not started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            off\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    off(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            on\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    on(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            once\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    once(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:103\n                \n            \n\n\n            \n                \n                    Create and Register a new PACH route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:113\n                \n            \n\n\n            \n                \n                    Create and Register a new POST route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:123\n                \n            \n\n\n            \n                \n                    Create and Register a new PUT route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(port: number)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:139\n                \n            \n\n\n            \n                \n                    Start the Stubborn server\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:154\n                \n            \n\n\n            \n                \n                    Stop the Stubborn server\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is stopped\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import EventEmitter from 'events';\nimport { createServer, Server } from 'http';\n\nimport { BodyDefinition, HeadersDefinition, PathDefinition } from './@types';\nimport { EVENTS, METHODS } from './constants';\nimport { Route } from './Route';\nimport { Router } from './Router';\nimport { getServerPort } from './utils';\n\nexport type StubbornOptions = {\n  host?: string;\n  defaultHeaders?: HeadersDefinition;\n};\n\n/**\n * @example\n * ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n */\nexport class Stubborn {\n  private server: Server;\n  private port: number | null;\n  private router: Router;\n  private options: StubbornOptions;\n  private emitter: EventEmitter = new EventEmitter();\n\n  constructor(options: StubbornOptions = {}) {\n    this.options = Object.assign(\n      {\n        host: 'localhost',\n        defaultHeaders: {},\n      },\n      options,\n    );\n\n    this.port = null;\n    this.server = createServer();\n    this.router = new Router({ host: this.options.host }, this.emitter);\n  }\n\n  /**\n   * Returns the server port.\n   *\n   * If the server is initialized with options.port set to 0 this method\n   * will return the randomly affected port only after the server is started\n   * @returns Listening port or null if the server is not started\n   */\n  public getPort(): number | null {\n    return getServerPort(this.server);\n  }\n\n  /**\n   * Returns the server origin (http://:)\n   * @returns the server origin\n   */\n  public getOrigin(): string {\n    return `http://${this.options.host}:${this.getPort()}`;\n  }\n\n  /**\n   * Remove all routes from the server\n   */\n  public clear() {\n    this.router.clear();\n\n    this.emitter.emit(EVENTS.CLEARED);\n\n    return this;\n  }\n\n  /**\n   * Create and Register a new DELETE route\n   *\n   * @param path Path matching definition\n   */\n  public delete(path: PathDefinition) {\n    return this.router.createRoute(METHODS.DELETE, path);\n  }\n\n  /**\n   * Create and Register a new GET route\n   *\n   * @param path Path matching definition\n   */\n  public get(path: PathDefinition) {\n    return this.router.createRoute(METHODS.GET, path);\n  }\n\n  /**\n   * Create and Register a new PACH route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public patch(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.PATCH, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new POST route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public post(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.POST, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new PUT route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public put(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.PUT, path).setBody(body);\n  }\n  /**\n   * Register a new route\n   *\n   * @param route Route a Route object\n   */\n  public addRoute(route: Route) {\n    return this.router.addRoute(route);\n  }\n\n  /**\n   * Start the Stubborn server\n   * @returns Promise object resolved when server is started\n   */\n  public start(port: number = 0) {\n    this.port = port;\n\n    return new Promise(resolve => {\n      this.server.listen(this.port);\n      this.router.handle(this.server);\n      resolve();\n    });\n  }\n\n  /**\n   * Stop the Stubborn server\n   *\n   * @returns Promise object resolved when server is stopped\n   */\n  public stop() {\n    return new Promise(resolve => {\n      this.server.close(() => resolve());\n    });\n  }\n\n  public on(event: symbol, listener: (...args: any[]) => void) {\n    this.emitter.on(event, listener);\n  }\n\n  public once(event: symbol, listener: (...args: any[]) => void) {\n    this.emitter.once(event, listener);\n  }\n\n  public off(event: symbol, listener: (...args: any[]) => void) {\n    this.emitter.off(event, listener);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            BodyDefinitionArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            DiffError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            JsonArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Route.ts\n            \n            class\n            Route\n            \n                50 %\n                (14/28)\n            \n        \n        \n            \n                \n                src/Stubborn.ts\n            \n            class\n            Stubborn\n            \n                52 %\n                (11/21)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            EVENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            WILDCARD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/debug/Debugger.ts\n            \n            class\n            Debugger\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/debug/Output.ts\n            \n            class\n            Output\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/diff/bodyDiff.ts\n            \n            function\n            bodyDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/bodyDiff.ts\n            \n            function\n            rec\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/headersDiff.ts\n            \n            function\n            headersDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/headersDiff.ts\n            \n            function\n            keysToLowerCase\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/methodDiff.ts\n            \n            function\n            methodDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/pathDiff.ts\n            \n            function\n            pathDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/queryDiff.ts\n            \n            function\n            checkParameters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/queryDiff.ts\n            \n            function\n            queryDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/requestDiff.ts\n            \n            function\n            requestDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkExtra\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkMissing\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkValues\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            differenceKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            findErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            findErrorsObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            formatDiffError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            formatPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            intersectKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            stringify\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            _extend\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            arrayToHash\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatPrimitive\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatProperty\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            hasOwn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            inspect\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isBoolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isFunction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isNull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isRegExp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isUndefined\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            objectToString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            reduceToSingleString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            stylizeNoColor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            stylizeWithColor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            logDiffOn501\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/accept : ^4.0.0\n        \n            body-parser : ^1.19.0\n        \n            chalk : ^3.0.0\n        \n            content-type : ^1.0.4\n        \n            lodash : ^4.17.15\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DIFF_TYPES   (src/.../constants.ts)\n                        \n                        \n                            METHODS   (src/.../constants.ts)\n                        \n                        \n                            STATUS_CODES   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        DIFF_TYPES\n                    \n                \n                        \n                            \n                                 FAIL_EQUALITY\n                            \n                        \n                        \n                            \n                                Value : FAIL_EQUALITY\n                            \n                        \n                        \n                            \n                                 FAIL_MATCHING\n                            \n                        \n                        \n                            \n                                Value : FAIL_MATCHING\n                            \n                        \n                        \n                            \n                                 FAIL_FUNCTION\n                            \n                        \n                        \n                            \n                                Value : FAIL_FUNCTION\n                            \n                        \n                        \n                            \n                                 MISSING\n                            \n                        \n                        \n                            \n                                Value : MISSING\n                            \n                        \n                        \n                            \n                                 EXTRA\n                            \n                        \n                        \n                            \n                                Value : EXTRA\n                            \n                        \n                        \n                            \n                                 INVALID_VALUE_TYPE\n                            \n                        \n                        \n                            \n                                Value : INVALID_VALUE_TYPE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        METHODS\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        STATUS_CODES\n                    \n                \n                        \n                            \n                                 SUCCESS\n                            \n                        \n                        \n                            \n                                Value : 200\n                            \n                        \n                        \n                            \n                                 NOT_IMPLEMENTED\n                            \n                        \n                        \n                            \n                                Value : 501\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nStubborn\n \n\n\nStubborn web server to mock external api responses. It is basically nock meets Dyson. Stubborn will strictly match the requests based on the definition like nock but in a separate web server like Dyson.\n\n\n\nInstallation\nUsage\nAPI\nFAQ\nContributing\nRelease\n\n\n\n\n\nInstallation\nnpm install --save-dev stubborn-wsyarn add -D stubborn-wsUsage\nStubborn is a testing tool that let you hot load and unload routes into a webserver.\nRequests are strictly matched against routes definitions based on Method, Path, Query parameters, Headers and Body.\nIf the request does not exactly match one route definition (ex: extra parameter, missing parameter, value does not match, etc), Stubborn will respond with a 501.\nThe very fact that Stubborn respond to the request validates that the parameters sent are the expected one, any change in the code that send the request will break the test. Any breaking change will be picked up by your test.\nStubborn response headers and body can be hardcoded or defined using a template.\nimport request from 'got';\nimport { Stubborn } from 'stubborn-ws';\n\ndescribe('Test', () => {\n  const sb = new Stubborn();\n\n  beforeAll(async () => await sb.start());\n  afterAll(async () => await sb.stop());\n\n  // Clean up all routes after a test if needed\n  afterEach(() => sb.clear());\n\n  it('should respond to query', async () => {\n    const body = { some: 'body' };\n    sb.get('/').setResponseBody({ some: 'body' });\n\n    const res = await request(`${sb.getOrigin()}`, { json: true });\n\n    expect(res.body).toEqual(body);\n  });\n});Stubborn strictly matches the request against the route definition.\nIf a query parameter or a header is missing, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is missing', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}`, { throwHttpErrors: false });\n\n  expect(res.statusCode).toEqual(501);\n});If a query parameter or a header is added, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is added', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}?page=1&limit=10`, {\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(501);\n});If a query parameter or a header does not match the route definition, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter does not match the definition', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(501);\n});You can use null as wildcard\nit('should match using wildcard', async () => {\n  sb.get('/')\n    .setQueryParameters({ page: null })\n    .setHeaders(null);\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    headers: { 'x-api-key': 'api key', 'any-other-header': 'stuff' },\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use regex to match a parameter, header or body\nit('should match using a regexp', async () => {\n  sb.post('/', {\n    slug: /^[a-z\\-]*$/,\n  });\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    method: 'POST',\n    body: { slug: 'stubborn-ws' },\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use a function to match a parameter, header or body\nit('should match using a function', async () => {\n  sb.get('/').setQueryParameters({\n    page: value => parseInt(value as string) > 0,\n  });\n\n  const res = await request('/?page=2');\n\n  expect(res).toReplyWith(STATUS_CODES.SUCCESS);\n});Public API\nSee the API documentation\nFAQ\nQ: Stubborn is not matching my route definition and always return a 501\nStubborn is STUBBORN, therefore it will return a 501 if it does not exactly match the route definition you have set up.\nTo help you find what missing in the route definition, you can compare it to the response body returned when receiving a 501:\nimport {logDiff} from 'stubborn-ws';\n\nconst route = sb\n  .get('/')\n  // This header definition will miss additional header added by got, like user-agent, connexion, etc...\n  .setHeaders({ 'X-Api-Key': 'test' });\n\n// Will log in console the diff between the route and any request throwing a 501\nlogDiffOn501(sb, route);\n\nconst res = await request(sb.getOrigin(), {\n  headers: { 'x-api-key': 'api key' },\n});\n\nexpect(res.statusCode).toBe(501);\nQ: How do I know if stubborn has been called and matched the route defined?\nStubborn will return a 501 (Not Implemented) if it received a request but cannot match any route.\nIf the request matches the route it will respond according to the route response configuration and update the call property of the route\n  async function call() {\n    return request(sb.getOrigin());\n  }\n\n  // No route setup in Stubborn\n  const res = await call();\n\n  expect(res.statusCode).toBe(501);\n  expect(res.body).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n    // ...\n  });\n\n\n  const route = sb.get('/')\n    .setHeaders(null)\n    .setResponseBody('content');\n\n\n  const res = await call();\n  expect(res.calls.length).toBe(1);\n  expect(res.calls[0]).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n      // ...\n    });Contributing\nRelease\ngit checkout master\ngit pull --rebase\nyarn doc\ngit add .\ngit commit -m 'doc(): Update documentation'\nyarn publish --\ngit push --follow-tagsThen go to github to draft a new release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) [year] [fullname]\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BodyDefinition   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionObject   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionPrimitive   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionValue   (src/.../index.ts)\n                        \n                        \n                            DefinitionMatcher   (src/.../index.ts)\n                        \n                        \n                            DefinitionValue   (src/.../index.ts)\n                        \n                        \n                            HeaderDefinition   (src/.../index.ts)\n                        \n                        \n                            HeadersDefinition   (src/.../index.ts)\n                        \n                        \n                            JsonObject   (src/.../index.ts)\n                        \n                        \n                            JsonPrimitive   (src/.../index.ts)\n                        \n                        \n                            JsonValue   (src/.../index.ts)\n                        \n                        \n                            MatchFunction   (src/.../index.ts)\n                        \n                        \n                            MethodDefinition   (src/.../index.ts)\n                        \n                        \n                            Middleware   (src/.../index.ts)\n                        \n                        \n                            NextFunction   (src/.../index.ts)\n                        \n                        \n                            ObjectOrArray   (src/.../utils.ts)\n                        \n                        \n                            PathDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryParameterDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryParameterDefinitionPrimitives   (src/.../index.ts)\n                        \n                        \n                            Request   (src/.../index.ts)\n                        \n                        \n                            RequestBody   (src/.../index.ts)\n                        \n                        \n                            RequestHash   (src/.../index.ts)\n                        \n                        \n                            RequestHeaders   (src/.../index.ts)\n                        \n                        \n                            RequestInfo   (src/.../index.ts)\n                        \n                        \n                            RequestMatcher   (src/.../index.ts)\n                        \n                        \n                            RequestMethod   (src/.../index.ts)\n                        \n                        \n                            RequestPath   (src/.../index.ts)\n                        \n                        \n                            RequestQuery   (src/.../index.ts)\n                        \n                        \n                            Response   (src/.../index.ts)\n                        \n                        \n                            ResponseBody   (src/.../index.ts)\n                        \n                        \n                            ResponseDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseHeaders   (src/.../index.ts)\n                        \n                        \n                            StubbornOptions   (src/.../Stubborn.ts)\n                        \n                        \n                            Template   (src/.../index.ts)\n                        \n                        \n                            TemplateArray   (src/.../index.ts)\n                        \n                        \n                            TemplateFunction   (src/.../index.ts)\n                        \n                        \n                            TemplateObject   (src/.../index.ts)\n                        \n                        \n                            ValidateFn   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/@types/index.ts\n    \n    \n        \n            \n                \n                    \n                    BodyDefinition\n                \n            \n            \n                \n                        undefined | BodyDefinitionValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionPrimitive\n                \n            \n            \n                \n                        DefinitionMatcher | JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionValue\n                \n            \n            \n                \n                            BodyDefinitionPrimitive | BodyDefinitionObject | BodyDefinitionArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DefinitionMatcher\n                \n            \n            \n                \n                            RegExp | MatchFunction | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DefinitionValue\n                \n            \n            \n                \n                            DefinitionMatcher | JsonValue | undefined | METHODS\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderDefinition\n                \n            \n            \n                \n                            DefinitionMatcher | string | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersDefinition\n                \n            \n            \n                \n                            Record | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonPrimitive\n                \n            \n            \n                \n                        string | number | boolean | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonValue\n                \n            \n            \n                \n                            JsonPrimitive | JsonObject | JsonArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatchFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MethodDefinition\n                \n            \n            \n                \n                            METHODS\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Middleware\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PathDefinition\n                \n            \n            \n                \n                            DefinitionMatcher | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryDefinition\n                \n            \n            \n                \n                            Record | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryParameterDefinition\n                \n            \n            \n                \n                        QueryParameterDefinitionPrimitives | QueryParameterDefinitionPrimitives[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryParameterDefinitionPrimitives\n                \n            \n            \n                \n                            DefinitionMatcher | string | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Request\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestBody\n                \n            \n            \n                \n                            JsonValue | undefined\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestHash\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestHeaders\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMatcher\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMethod\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestPath\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestQuery\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                            ServerResponse\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBody\n                \n            \n            \n                \n                            JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseDefinition\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseHeaders\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Template\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject | TemplateArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateArray\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/diff/utils.ts\n    \n    \n        \n            \n                \n                    \n                    ObjectOrArray\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ValidateFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/Stubborn.ts\n    \n    \n        \n            \n                \n                    \n                    StubbornOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENTS   (src/.../constants.ts)\n                        \n                        \n                            WILDCARD   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EVENTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  NOT_IMPLEMENTED: Symbol.for('NOT_IMPLEMENTED'),\n  CLEARED: Symbol.for('CLEARED'),\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WILDCARD\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Symbol.for('WILDCARD')\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
