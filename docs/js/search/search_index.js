var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/Stubborn.html",[0,1.265,1,0.987]],["body/classes/Stubborn.html",[0,0.469,1,1.441,2,0.606,3,0.816,4,0.816,5,0.606,6,0.469,7,1.375,8,1.375,9,0.1,10,2.107,11,1.023,12,1.557,13,1.023,14,2.004,15,1.023,16,2.101,17,1.023,18,1.023,19,1.375,20,1.023,21,1.023,22,1.023,23,0.284,24,1.375,25,3.212,26,2.338,27,3.136,28,2.834,29,2.819,30,1.326,31,2.878,32,1.375,33,2.094,34,1.557,35,2.094,36,2.094,37,1.023,38,1.203,39,1.557,40,2.094,41,2.535,42,0.816,43,1.375,44,1.885,45,2.56,46,1.375,47,1.629,48,2.107,49,1.471,50,2.107,51,2.006,52,1.55,53,0.816,54,0.816,55,0.816,56,1.375,57,2.117,58,0.816,59,3.212,60,2.535,61,1.885,62,3.563,63,0.816,64,1.375,65,1.023,66,1.375,67,2.56,68,0.816,69,3.049,70,2.719,71,0.075,72,2.56,73,1.375,74,0.816,75,0.816,76,2.094,77,1.783,78,1.025,79,0.816,80,1.375,81,1.375,82,1.023,83,1.203,84,1.023,85,2.439,86,1.375,87,1.375,88,1.457,89,1.375,90,1.375,91,2.267,92,0.816,93,1.375,94,2.094,95,1.203,96,1.457,97,1.375,98,0.816,99,1.375,100,0.816,101,1.375,102,0.816,103,2.094,104,2.094,105,0.816,106,1.375,107,1.375,108,1.023,109,0.816,110,0.816,111,0.816,112,0.816,113,1.375,114,1.783,115,1.375,116,0.816,117,0.816,118,0.816,119,1.375,120,0.816,121,0.816,122,0.816,123,0.816,124,0.816,125,0.816,126,2.95,127,0.816,128,0.816,129,0.816,130,1.783,131,0.816,132,0.816,133,0.816,134,1.375,135,0.816,136,0.816,137,1.375,138,0.816,139,0.019,140,0.019]],["title/coverage.html",[141,2.179]],["body/coverage.html",[0,2.019,1,1.315,5,2.18,6,1.685,9,0.095,14,1.685,49,1.315,57,1.685,71,0.082,83,2.019,139,0.068,140,0.068,141,2.18,142,1.685,143,2.932,144,2.932,145,2.932,146,2.932,147,2.932,148,2.932,149,2.932,150,2.613,151,2.019,152,2.18,153,3.514,154,2.18,155,2.932,156,2.932]],["title/dependencies.html",[157,1.874,158,1.953]],["body/dependencies.html",[9,0.096,16,1.793,49,1.4,71,0.085,139,0.073,140,0.073,158,2.32,159,3.12,160,3.12,161,3.12,162,3.12,163,3.12,164,3.12,165,3.12,166,3.12]],["title/miscellaneous/enumerations.html",[167,0.495,168,1.953]],["body/miscellaneous/enumerations.html",[9,0.097,23,1.01,30,2.597,34,2.597,37,2.597,38,2.007,39,2.597,71,0.082,95,2.348,139,0.068,140,0.068,167,0.766,168,2.159,169,3.493,170,3.493,171,2.903,172,2.903,173,2.903,174,2.903,175,2.159]],["title/miscellaneous/functions.html",[167,0.495,176,1.953]],["body/miscellaneous/functions.html",[9,0.092,23,1.059,47,2.065,48,2.672,50,2.672,71,0.084,139,0.071,140,0.071,150,2.264,152,2.672,154,2.672,167,0.804,176,2.264,177,3.593,178,3.044,179,3.593,180,3.044]],["title/index.html",[23,0.652,88,1.077,181,1.394]],["body/index.html",[1,1.737,9,0.099,10,1.23,11,1.23,12,2.672,13,1.23,14,0.951,15,0.758,16,1.843,17,2.451,18,2.556,20,0.758,21,0.758,22,0.758,29,1.23,31,0.758,38,0.586,45,1.23,47,0.951,52,0.951,57,2.039,65,1.552,70,1.552,71,0.049,72,2.451,78,0.586,82,0.758,83,0.586,84,1.786,85,2.215,95,0.951,96,1.894,139,0.024,140,0.024,142,0.951,151,1.2,175,2.507,182,1.654,183,1.019,184,1.019,185,3.207,186,1.019,187,1.019,188,1.654,189,1.019,190,1.654,191,2.087,192,3.496,193,1.654,194,1.654,195,1.019,196,1.654,197,1.019,198,1.654,199,1.654,200,2.087,201,1.019,202,1.019,203,1.019,204,0.758,205,1.654,206,1.019,207,1.019,208,1.019,209,1.019,210,2.087,211,1.654,212,1.019,213,1.019,214,1.019,215,1.654,216,1.019,217,1.019,218,1.019,219,1.019,220,1.654,221,2.087,222,1.019,223,2.641,224,2.828,225,1.654,226,1.654,227,1.019,228,1.019,229,3.296,230,2.402,231,1.654,232,2.979,233,1.019,234,1.019,235,1.019,236,1.019,237,1.019,238,1.654,239,1.019,240,1.019,241,1.019,242,2.402,243,1.019,244,1.019,245,2.087,246,1.552,247,1.019,248,2.402,249,0.758,250,1.019,251,1.019,252,1.019,253,1.019,254,1.019,255,1.019,256,1.019,257,1.019,258,1.019,259,2.979,260,3.103,261,1.654,262,1.019,263,1.654,264,3.103,265,2.402,266,2.402,267,2.641,268,2.087,269,2.402,270,2.402,271,2.087,272,2.087,273,1.019,274,2.087,275,1.786,276,1.654,277,1.654,278,1.019,279,1.654,280,2.087,281,2.641,282,1.019,283,1.654,284,1.019,285,0.758,286,1.019,287,1.654,288,1.019,289,1.019,290,1.019,291,1.019,292,1.019,293,1.654,294,1.019,295,1.019,296,1.019,297,1.654,298,1.019,299,1.019,300,1.019,301,1.019,302,1.019,303,1.019,304,1.019,305,1.019,306,1.019,307,1.654,308,1.654,309,1.654,310,1.019,311,1.019,312,1.654,313,1.019,314,1.654,315,1.019,316,1.654,317,1.019,318,1.019,319,1.019,320,1.019,321,1.019,322,1.019,323,1.019,324,1.019,325,1.654,326,2.402,327,1.019,328,1.019,329,1.019,330,1.019,331,1.019,332,2.641,333,1.019,334,1.019,335,1.019,336,1.019,337,1.654,338,1.019,339,1.019,340,0.758,341,1.019,342,1.019,343,1.019,344,1.019,345,1.019,346,1.019]],["title/license.html",[88,1.077,181,1.394,347,1.394]],["body/license.html",[9,0.073,71,0.073,139,0.057,140,0.057,142,1.407,204,1.821,275,2.337,340,1.821,347,1.821,348,2.449,349,3.47,350,2.449,351,2.449,352,2.449,353,3.142,354,2.449,355,2.449,356,2.449,357,2.449,358,2.449,359,2.449,360,3.142,361,4.03,362,2.449,363,2.449,364,2.449,365,3.47,366,2.449,367,3.142,368,2.449,369,2.449,370,2.449,371,2.449,372,2.449,373,2.449,374,2.449,375,2.449,376,3.142,377,2.449,378,2.449,379,2.449,380,2.449,381,2.449,382,2.449,383,3.142,384,3.142,385,2.449,386,2.449,387,2.449,388,2.449,389,2.449,390,2.449,391,2.449,392,2.449,393,2.449,394,2.449,395,2.449,396,2.449,397,2.449,398,2.449,399,2.449,400,2.449,401,2.449,402,2.449,403,2.449,404,2.449,405,2.449,406,2.449,407,2.449,408,2.449,409,2.449,410,2.449,411,2.449,412,2.449,413,2.449,414,2.449,415,2.449]],["title/modules.html",[416,2.179]],["body/modules.html",[9,0.088,71,0.088,139,0.077,140,0.077,416,2.442]],["title/overview.html",[417,2.179]],["body/overview.html",[2,2.423,9,0.087,71,0.087,139,0.076,140,0.076,417,2.423,418,3.259]],["title/miscellaneous/typealiases.html",[167,0.495,419,2.626]],["body/miscellaneous/typealiases.html",[6,1.257,9,0.097,23,0.761,44,2.169,49,1.72,51,1.626,52,2.098,61,1.626,67,2.169,71,0.068,78,1.677,91,2.169,96,1.677,108,2.169,139,0.051,140,0.051,151,2.098,167,0.577,246,2.169,249,2.169,285,2.169,420,2.186,421,4.183,422,3.754,423,3.503,424,2.917,425,2.917,426,2.917,427,3.283,428,2.917,429,2.917,430,2.917,431,2.917,432,2.917,433,2.917,434,2.186,435,3.283,436,3.503,437,3.503,438,2.186,439,2.917,440,2.186,441,2.186,442,3.754,443,2.186]]],"invertedIndex":[["",{"_index":9,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":83,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["0/1",{"_index":153,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":268,"title":{},"body":{"index.html":{}}}],["1.0.4",{"_index":164,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":162,"title":{},"body":{"dependencies.html":{}}}],["11/17",{"_index":149,"title":{},"body":{"coverage.html":{}}}],["14/28",{"_index":147,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":418,"title":{},"body":{"overview.html":{}}}],["200",{"_index":173,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["4.0.0",{"_index":160,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":166,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":146,"title":{},"body":{"coverage.html":{}}}],["501",{"_index":175,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["64",{"_index":148,"title":{},"body":{"coverage.html":{}}}],["8.x",{"_index":203,"title":{},"body":{"index.html":{}}}],["above",{"_index":204,"title":{},"body":{"index.html":{},"license.html":{}}}],["according",{"_index":323,"title":{},"body":{"index.html":{}}}],["action",{"_index":408,"title":{},"body":{"license.html":{}}}],["actual",{"_index":315,"title":{},"body":{"index.html":{}}}],["add",{"_index":211,"title":{},"body":{"index.html":{}}}],["added",{"_index":272,"title":{},"body":{"index.html":{}}}],["additional",{"_index":302,"title":{},"body":{"index.html":{}}}],["addroute",{"_index":32,"title":{},"body":{"classes/Stubborn.html":{}}}],["addroute(route",{"_index":56,"title":{},"body":{"classes/Stubborn.html":{}}}],["affected",{"_index":87,"title":{},"body":{"classes/Stubborn.html":{}}}],["afterall(async",{"_index":253,"title":{},"body":{"index.html":{}}}],["aftereach",{"_index":257,"title":{},"body":{"index.html":{}}}],["against",{"_index":221,"title":{},"body":{"index.html":{}}}],["agent",{"_index":304,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":420,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["always",{"_index":294,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":374,"title":{},"body":{"license.html":{}}}],["api",{"_index":185,"title":{},"body":{"index.html":{}}}],["arising",{"_index":412,"title":{},"body":{"license.html":{}}}],["associated",{"_index":362,"title":{},"body":{"license.html":{}}}],["async",{"_index":260,"title":{},"body":{"index.html":{}}}],["authors",{"_index":401,"title":{},"body":{"license.html":{}}}],["await",{"_index":18,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["based",{"_index":194,"title":{},"body":{"index.html":{}}}],["basically",{"_index":187,"title":{},"body":{"index.html":{}}}],["beforeall(async",{"_index":251,"title":{},"body":{"index.html":{}}}],["body",{"_index":16,"title":{},"body":{"classes/Stubborn.html":{},"dependencies.html":{},"index.html":{}}}],["boolean",{"_index":440,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["break",{"_index":241,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":243,"title":{},"body":{"index.html":{}}}],["c",{"_index":350,"title":{},"body":{"license.html":{}}}],["call",{"_index":326,"title":{},"body":{"index.html":{}}}],["called",{"_index":322,"title":{},"body":{"index.html":{}}}],["change",{"_index":238,"title":{},"body":{"index.html":{}}}],["charge",{"_index":357,"title":{},"body":{"license.html":{}}}],["checkout",{"_index":333,"title":{},"body":{"index.html":{}}}],["claim",{"_index":404,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Stubborn.html":{},"overview.html":{}}}],["clean",{"_index":255,"title":{},"body":{"index.html":{}}}],["clear",{"_index":33,"title":{},"body":{"classes/Stubborn.html":{}}}],["code",{"_index":239,"title":{},"body":{"index.html":{}}}],["commit",{"_index":338,"title":{},"body":{"index.html":{}}}],["compare",{"_index":298,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":382,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":324,"title":{},"body":{"index.html":{}}}],["connection",{"_index":414,"title":{},"body":{"license.html":{}}}],["connexion",{"_index":305,"title":{},"body":{"index.html":{}}}],["console.log",{"_index":312,"title":{},"body":{"index.html":{}}}],["const",{"_index":12,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["constants",{"_index":110,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor(options",{"_index":43,"title":{},"body":{"classes/Stubborn.html":{}}}],["content",{"_index":163,"title":{},"body":{"dependencies.html":{}}}],["contract",{"_index":409,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":199,"title":{},"body":{"index.html":{}}}],["copies",{"_index":376,"title":{},"body":{"license.html":{}}}],["copy",{"_index":360,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":349,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":141,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":69,"title":{},"body":{"classes/Stubborn.html":{}}}],["createserver",{"_index":107,"title":{},"body":{"classes/Stubborn.html":{}}}],["d",{"_index":212,"title":{},"body":{"index.html":{}}}],["damages",{"_index":405,"title":{},"body":{"license.html":{}}}],["deal",{"_index":364,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":415,"title":{},"body":{"license.html":{}}}],["def",{"_index":309,"title":{},"body":{"index.html":{}}}],["default",{"_index":94,"title":{},"body":{"classes/Stubborn.html":{}}}],["defaultheaders",{"_index":115,"title":{},"body":{"classes/Stubborn.html":{}}}],["defined",{"_index":45,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["definition",{"_index":72,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["definitions",{"_index":222,"title":{},"body":{"index.html":{}}}],["defintion",{"_index":313,"title":{},"body":{"index.html":{}}}],["delete",{"_index":34,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["delete(path",{"_index":66,"title":{},"body":{"classes/Stubborn.html":{}}}],["dependencies",{"_index":158,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["describe('test",{"_index":250,"title":{},"body":{"index.html":{}}}],["description",{"_index":60,"title":{},"body":{"classes/Stubborn.html":{}}}],["dev",{"_index":208,"title":{},"body":{"index.html":{}}}],["diff",{"_index":320,"title":{},"body":{"index.html":{}}}],["differences",{"_index":319,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":372,"title":{},"body":{"license.html":{}}}],["doc",{"_index":337,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":142,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["draft",{"_index":346,"title":{},"body":{"index.html":{}}}],["dyson",{"_index":190,"title":{},"body":{"index.html":{}}}],["enumerations",{"_index":168,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["etc",{"_index":231,"title":{},"body":{"index.html":{}}}],["event",{"_index":400,"title":{},"body":{"license.html":{}}}],["ex",{"_index":227,"title":{},"body":{"index.html":{}}}],["exactly",{"_index":225,"title":{},"body":{"index.html":{}}}],["example",{"_index":7,"title":{},"body":{"classes/Stubborn.html":{}}}],["expect(res).toreplywith(status_codes.success",{"_index":291,"title":{},"body":{"index.html":{}}}],["expect(res.body).toequal",{"_index":22,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["expect(res.body).toequal(body",{"_index":262,"title":{},"body":{"index.html":{}}}],["expect(res.calls.length).tobe(1",{"_index":330,"title":{},"body":{"index.html":{}}}],["expect(res.calls[0]).toequal",{"_index":331,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).tobe(501",{"_index":308,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(200",{"_index":283,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(501",{"_index":271,"title":{},"body":{"index.html":{}}}],["expected",{"_index":237,"title":{},"body":{"index.html":{}}}],["export",{"_index":113,"title":{},"body":{"classes/Stubborn.html":{}}}],["express",{"_index":391,"title":{},"body":{"license.html":{}}}],["external",{"_index":184,"title":{},"body":{"index.html":{}}}],["extra",{"_index":228,"title":{},"body":{"index.html":{}}}],["extract",{"_index":152,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["extract(req",{"_index":178,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fact",{"_index":234,"title":{},"body":{"index.html":{}}}],["false",{"_index":270,"title":{},"body":{"index.html":{}}}],["faq",{"_index":198,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{}}}],["files",{"_index":363,"title":{},"body":{"license.html":{}}}],["find",{"_index":297,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":396,"title":{},"body":{"license.html":{}}}],["follow",{"_index":342,"title":{},"body":{"index.html":{}}}],["following",{"_index":381,"title":{},"body":{"license.html":{}}}],["free",{"_index":356,"title":{},"body":{"license.html":{}}}],["fullname",{"_index":352,"title":{},"body":{"license.html":{}}}],["function",{"_index":151,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":176,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":379,"title":{},"body":{"license.html":{}}}],["get(path",{"_index":73,"title":{},"body":{"classes/Stubborn.html":{}}}],["getorigin",{"_index":35,"title":{},"body":{"classes/Stubborn.html":{}}}],["getport",{"_index":36,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport",{"_index":111,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport(this.server",{"_index":123,"title":{},"body":{"classes/Stubborn.html":{}}}],["getting",{"_index":181,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":332,"title":{},"body":{"index.html":{}}}],["github",{"_index":345,"title":{},"body":{"index.html":{}}}],["go",{"_index":344,"title":{},"body":{"index.html":{}}}],["got(`${sb.getorigin",{"_index":19,"title":{},"body":{"classes/Stubborn.html":{}}}],["granted",{"_index":355,"title":{},"body":{"license.html":{}}}],["hapi/accept",{"_index":159,"title":{},"body":{"dependencies.html":{}}}],["hardcoded",{"_index":247,"title":{},"body":{"index.html":{}}}],["hasbody",{"_index":154,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hasbody(req",{"_index":180,"title":{},"body":{"miscellaneous/functions.html":{}}}],["header",{"_index":264,"title":{},"body":{"index.html":{}}}],["headerdefinitions",{"_index":108,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":224,"title":{},"body":{"index.html":{}}}],["help",{"_index":296,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":354,"title":{},"body":{"license.html":{}}}],["holders",{"_index":402,"title":{},"body":{"license.html":{}}}],["host",{"_index":114,"title":{},"body":{"classes/Stubborn.html":{}}}],["hot",{"_index":216,"title":{},"body":{"index.html":{}}}],["http",{"_index":77,"title":{},"body":{"classes/Stubborn.html":{}}}],["http://${this.options.host}:${this.getport",{"_index":124,"title":{},"body":{"classes/Stubborn.html":{}}}],["identifier",{"_index":143,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":265,"title":{},"body":{"index.html":{}}}],["implied",{"_index":392,"title":{},"body":{"license.html":{}}}],["import",{"_index":10,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["included",{"_index":385,"title":{},"body":{"license.html":{}}}],["including",{"_index":367,"title":{},"body":{"license.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Stubborn.html":{}}}],["initialized",{"_index":80,"title":{},"body":{"classes/Stubborn.html":{}}}],["install",{"_index":206,"title":{},"body":{"index.html":{}}}],["installation",{"_index":196,"title":{},"body":{"index.html":{}}}],["it('should",{"_index":259,"title":{},"body":{"index.html":{}}}],["json",{"_index":20,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["jsonvalue",{"_index":422,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["key",{"_index":281,"title":{},"body":{"index.html":{}}}],["kind",{"_index":390,"title":{},"body":{"license.html":{}}}],["know",{"_index":321,"title":{},"body":{"index.html":{}}}],["liability",{"_index":406,"title":{},"body":{"license.html":{}}}],["liable",{"_index":403,"title":{},"body":{"license.html":{}}}],["license",{"_index":347,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":368,"title":{},"body":{"license.html":{}}}],["limited",{"_index":393,"title":{},"body":{"license.html":{}}}],["listening",{"_index":89,"title":{},"body":{"classes/Stubborn.html":{}}}],["literal",{"_index":442,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":217,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":118,"title":{},"body":{"classes/Stubborn.html":{}}}],["lodash",{"_index":165,"title":{},"body":{"dependencies.html":{}}}],["m",{"_index":339,"title":{},"body":{"index.html":{}}}],["master",{"_index":334,"title":{},"body":{"index.html":{}}}],["match",{"_index":192,"title":{},"body":{"index.html":{}}}],["matched",{"_index":220,"title":{},"body":{"index.html":{}}}],["matches",{"_index":263,"title":{},"body":{"index.html":{}}}],["matchfunction",{"_index":423,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["matching",{"_index":71,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["meets",{"_index":189,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":395,"title":{},"body":{"license.html":{}}}],["merge",{"_index":371,"title":{},"body":{"license.html":{}}}],["method",{"_index":84,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["methods",{"_index":30,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["middleware",{"_index":424,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":167,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["miss",{"_index":301,"title":{},"body":{"index.html":{}}}],["missing",{"_index":230,"title":{},"body":{"index.html":{}}}],["mit",{"_index":348,"title":{},"body":{"license.html":{}}}],["mock",{"_index":183,"title":{},"body":{"index.html":{}}}],["modify",{"_index":370,"title":{},"body":{"license.html":{}}}],["modules",{"_index":416,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["n",{"_index":314,"title":{},"body":{"index.html":{}}}],["name",{"_index":48,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":256,"title":{},"body":{"index.html":{}}}],["new",{"_index":14,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["nextfunction",{"_index":425,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nock",{"_index":188,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":202,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":399,"title":{},"body":{"license.html":{}}}],["not_implemented",{"_index":174,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notice",{"_index":383,"title":{},"body":{"license.html":{}}}],["npm",{"_index":205,"title":{},"body":{"index.html":{}}}],["null",{"_index":52,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":51,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["object",{"_index":61,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["object.assign",{"_index":117,"title":{},"body":{"classes/Stubborn.html":{}}}],["obtaining",{"_index":359,"title":{},"body":{"license.html":{}}}],["one",{"_index":226,"title":{},"body":{"index.html":{}}}],["optional",{"_index":50,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":26,"title":{},"body":{"classes/Stubborn.html":{}}}],["options.port",{"_index":81,"title":{},"body":{"classes/Stubborn.html":{}}}],["origin",{"_index":76,"title":{},"body":{"classes/Stubborn.html":{}}}],["otherwise",{"_index":411,"title":{},"body":{"license.html":{}}}],["out",{"_index":413,"title":{},"body":{"license.html":{}}}],["overview",{"_index":417,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pach",{"_index":93,"title":{},"body":{"classes/Stubborn.html":{}}}],["package",{"_index":157,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":267,"title":{},"body":{"index.html":{}}}],["param",{"_index":126,"title":{},"body":{"classes/Stubborn.html":{}}}],["parameter",{"_index":229,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":47,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parseint(value",{"_index":289,"title":{},"body":{"index.html":{}}}],["parser",{"_index":161,"title":{},"body":{"dependencies.html":{}}}],["particular",{"_index":397,"title":{},"body":{"license.html":{}}}],["patch",{"_index":37,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["patch(path",{"_index":90,"title":{},"body":{"classes/Stubborn.html":{}}}],["path",{"_index":70,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["path).setbody(body",{"_index":130,"title":{},"body":{"classes/Stubborn.html":{}}}],["pathdefinition",{"_index":67,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["permission",{"_index":353,"title":{},"body":{"license.html":{}}}],["permit",{"_index":377,"title":{},"body":{"license.html":{}}}],["person",{"_index":358,"title":{},"body":{"license.html":{}}}],["persons",{"_index":378,"title":{},"body":{"license.html":{}}}],["picked",{"_index":244,"title":{},"body":{"index.html":{}}}],["port",{"_index":27,"title":{},"body":{"classes/Stubborn.html":{}}}],["portions",{"_index":387,"title":{},"body":{"license.html":{}}}],["post",{"_index":38,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["post(path",{"_index":97,"title":{},"body":{"classes/Stubborn.html":{}}}],["private",{"_index":25,"title":{},"body":{"classes/Stubborn.html":{}}}],["promise",{"_index":103,"title":{},"body":{"classes/Stubborn.html":{}}}],["promise(resolve",{"_index":134,"title":{},"body":{"classes/Stubborn.html":{}}}],["properties",{"_index":24,"title":{},"body":{"classes/Stubborn.html":{}}}],["property",{"_index":327,"title":{},"body":{"index.html":{}}}],["provided",{"_index":388,"title":{},"body":{"license.html":{}}}],["public",{"_index":31,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["publish",{"_index":340,"title":{},"body":{"index.html":{},"license.html":{}}}],["pull",{"_index":335,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":398,"title":{},"body":{"license.html":{}}}],["push",{"_index":341,"title":{},"body":{"index.html":{}}}],["put",{"_index":39,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["put(path",{"_index":99,"title":{},"body":{"classes/Stubborn.html":{}}}],["q",{"_index":293,"title":{},"body":{"index.html":{}}}],["query",{"_index":223,"title":{},"body":{"index.html":{}}}],["querydefinitions",{"_index":426,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["randomly",{"_index":86,"title":{},"body":{"classes/Stubborn.html":{}}}],["rebase",{"_index":336,"title":{},"body":{"index.html":{}}}],["received",{"_index":316,"title":{},"body":{"index.html":{}}}],["receiving",{"_index":300,"title":{},"body":{"index.html":{}}}],["record",{"_index":439,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["regex",{"_index":284,"title":{},"body":{"index.html":{}}}],["regexp",{"_index":285,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":59,"title":{},"body":{"classes/Stubborn.html":{}}}],["release",{"_index":200,"title":{},"body":{"index.html":{}}}],["remove",{"_index":64,"title":{},"body":{"classes/Stubborn.html":{}}}],["req",{"_index":179,"title":{},"body":{"miscellaneous/functions.html":{}}}],["request",{"_index":96,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["request('/?page=2",{"_index":290,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin",{"_index":261,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin()}?page=1&limit=10",{"_index":273,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin()}?page=2",{"_index":274,"title":{},"body":{"index.html":{}}}],["request(sb.getorigin",{"_index":307,"title":{},"body":{"index.html":{}}}],["requestbodydefinition",{"_index":91,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["requestdefinition",{"_index":427,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requestinfo",{"_index":428,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requestmatcher",{"_index":429,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requests",{"_index":193,"title":{},"body":{"index.html":{}}}],["res",{"_index":17,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["res.body",{"_index":317,"title":{},"body":{"index.html":{}}}],["resolve",{"_index":137,"title":{},"body":{"classes/Stubborn.html":{}}}],["resolved",{"_index":104,"title":{},"body":{"classes/Stubborn.html":{}}}],["respond",{"_index":232,"title":{},"body":{"index.html":{}}}],["response",{"_index":246,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["responsebody",{"_index":430,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responsebodydefinition",{"_index":431,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responsedefinition",{"_index":432,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responseheaders",{"_index":433,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responses",{"_index":186,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":366,"title":{},"body":{"license.html":{}}}],["result",{"_index":139,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":140,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":85,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["returned",{"_index":299,"title":{},"body":{"index.html":{}}}],["returns",{"_index":62,"title":{},"body":{"classes/Stubborn.html":{}}}],["rights",{"_index":369,"title":{},"body":{"license.html":{}}}],["route",{"_index":57,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["route.getdefinition",{"_index":310,"title":{},"body":{"index.html":{}}}],["router",{"_index":28,"title":{},"body":{"classes/Stubborn.html":{}}}],["routes",{"_index":65,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["save",{"_index":207,"title":{},"body":{"index.html":{}}}],["sb",{"_index":13,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.clear",{"_index":258,"title":{},"body":{"index.html":{}}}],["sb.get",{"_index":277,"title":{},"body":{"index.html":{}}}],["sb.get('/').setqueryparameters",{"_index":266,"title":{},"body":{"index.html":{}}}],["sb.get('/').setresponsebody",{"_index":15,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.post",{"_index":286,"title":{},"body":{"index.html":{}}}],["sb.start",{"_index":252,"title":{},"body":{"index.html":{}}}],["sb.stop",{"_index":254,"title":{},"body":{"index.html":{}}}],["see",{"_index":292,"title":{},"body":{"index.html":{}}}],["sell",{"_index":375,"title":{},"body":{"license.html":{}}}],["send",{"_index":240,"title":{},"body":{"index.html":{}}}],["sent",{"_index":236,"title":{},"body":{"index.html":{}}}],["separate",{"_index":195,"title":{},"body":{"index.html":{}}}],["server",{"_index":29,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["serverresponse",{"_index":443,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["set",{"_index":82,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["setheaders",{"_index":306,"title":{},"body":{"index.html":{}}}],["setheaders(null",{"_index":279,"title":{},"body":{"index.html":{}}}],["setqueryparameters",{"_index":278,"title":{},"body":{"index.html":{}}}],["setresponsebody('content",{"_index":329,"title":{},"body":{"index.html":{}}}],["setup",{"_index":328,"title":{},"body":{"index.html":{}}}],["shall",{"_index":384,"title":{},"body":{"license.html":{}}}],["slug",{"_index":287,"title":{},"body":{"index.html":{}}}],["software",{"_index":361,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Stubborn.html":{}}}],["spot",{"_index":318,"title":{},"body":{"index.html":{}}}],["src/.../bodymatcher.ts",{"_index":177,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":169,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":421,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../stubborn.ts",{"_index":434,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/@types/index.ts",{"_index":438,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/constants.ts",{"_index":171,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/matchers/bodymatcher.ts",{"_index":150,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/route.ts",{"_index":145,"title":{},"body":{"coverage.html":{}}}],["src/stubborn.ts",{"_index":6,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/stubborn.ts:103",{"_index":92,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:113",{"_index":98,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:123",{"_index":100,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:131",{"_index":58,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:139",{"_index":102,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:154",{"_index":105,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:32",{"_index":55,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:33",{"_index":53,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:34",{"_index":54,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:35",{"_index":46,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:58",{"_index":79,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:66",{"_index":75,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:73",{"_index":63,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:84",{"_index":68,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:93",{"_index":74,"title":{},"body":{"classes/Stubborn.html":{}}}],["start",{"_index":40,"title":{},"body":{"classes/Stubborn.html":{}}}],["start(port",{"_index":101,"title":{},"body":{"classes/Stubborn.html":{}}}],["started",{"_index":88,"title":{"index.html":{},"license.html":{}},"body":{"classes/Stubborn.html":{}}}],["statements",{"_index":144,"title":{},"body":{"coverage.html":{}}}],["status_codes",{"_index":170,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stop",{"_index":41,"title":{},"body":{"classes/Stubborn.html":{}}}],["stopped",{"_index":106,"title":{},"body":{"classes/Stubborn.html":{}}}],["strictly",{"_index":191,"title":{},"body":{"index.html":{}}}],["string",{"_index":78,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stubborn",{"_index":1,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["stubbornoptions",{"_index":44,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["stuff",{"_index":282,"title":{},"body":{"index.html":{}}}],["subject",{"_index":380,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":373,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":386,"title":{},"body":{"license.html":{}}}],["success",{"_index":172,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":156,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":155,"title":{},"body":{"coverage.html":{}}}],["tagsthen",{"_index":343,"title":{},"body":{"index.html":{}}}],["template",{"_index":249,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["templatearray",{"_index":435,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["templatefunction",{"_index":436,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["templateobject",{"_index":437,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["test",{"_index":242,"title":{},"body":{"index.html":{}}}],["tested",{"_index":201,"title":{},"body":{"index.html":{}}}],["testing",{"_index":214,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":295,"title":{},"body":{"index.html":{}}}],["this.options",{"_index":116,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.options.host",{"_index":122,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.port",{"_index":119,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router",{"_index":121,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.addroute(route",{"_index":133,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.clear",{"_index":125,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.delete",{"_index":127,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.get",{"_index":128,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.patch",{"_index":129,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.post",{"_index":131,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.put",{"_index":132,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.handle(this.server",{"_index":136,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server",{"_index":120,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.close",{"_index":138,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.listen(this.port",{"_index":135,"title":{},"body":{"classes/Stubborn.html":{}}}],["throwhttperrors",{"_index":269,"title":{},"body":{"index.html":{}}}],["tool",{"_index":215,"title":{},"body":{"index.html":{}}}],["tort",{"_index":410,"title":{},"body":{"license.html":{}}}],["true",{"_index":21,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["type",{"_index":49,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":419,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":109,"title":{},"body":{"classes/Stubborn.html":{}}}],["typescript",{"_index":8,"title":{},"body":{"classes/Stubborn.html":{}}}],["undefined",{"_index":441,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unload",{"_index":218,"title":{},"body":{"index.html":{}}}],["up",{"_index":245,"title":{},"body":{"index.html":{}}}],["update",{"_index":325,"title":{},"body":{"index.html":{}}}],["usage",{"_index":197,"title":{},"body":{"index.html":{}}}],["use",{"_index":275,"title":{},"body":{"index.html":{},"license.html":{}}}],["used",{"_index":311,"title":{},"body":{"index.html":{}}}],["user",{"_index":303,"title":{},"body":{"index.html":{}}}],["using",{"_index":248,"title":{},"body":{"index.html":{}}}],["utils",{"_index":112,"title":{},"body":{"classes/Stubborn.html":{}}}],["validates",{"_index":235,"title":{},"body":{"index.html":{}}}],["value",{"_index":95,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["very",{"_index":233,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":394,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":389,"title":{},"body":{"license.html":{}}}],["web",{"_index":182,"title":{},"body":{"index.html":{}}}],["webserver",{"_index":219,"title":{},"body":{"index.html":{}}}],["whether",{"_index":407,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":276,"title":{},"body":{"index.html":{}}}],["without",{"_index":365,"title":{},"body":{"license.html":{}}}],["ws",{"_index":11,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["wsusage",{"_index":213,"title":{},"body":{"index.html":{}}}],["wsyarn",{"_index":209,"title":{},"body":{"index.html":{}}}],["x",{"_index":280,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":210,"title":{},"body":{"index.html":{}}}],["year",{"_index":351,"title":{},"body":{"license.html":{}}}],["z",{"_index":288,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Stubborn.html":{"url":"classes/Stubborn.html","title":"class - Stubborn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stubborn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Stubborn.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n                        \n                            ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n                        \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                options\n                            \n                            \n                                    Private\n                                port\n                            \n                            \n                                    Private\n                                router\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRoute\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getOrigin\n                            \n                            \n                                    Public\n                                getPort\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: StubbornOptions)\n                    \n                \n                        \n                            \n                                Defined in src/Stubborn.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        StubbornOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StubbornOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            port\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:32\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRoute\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRoute(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:131\n                \n            \n\n\n            \n                \n                    Register a new route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route a Route object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:73\n                \n            \n\n\n            \n                \n                    Remove all routes from the server\n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:84\n                \n            \n\n\n            \n                \n                    Create and Register a new DELETE route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:93\n                \n            \n\n\n            \n                \n                    Create and Register a new GET route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOrigin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrigin()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:66\n                \n            \n\n\n            \n                \n                    Returns the server origin (http://:)\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the server origin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPort\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPort()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:58\n                \n            \n\n\n            \n                \n                    Returns the server port.\nIf the server is initialized with options.port set to 0 this method\nwill return the randomly affected port only after the server is started\n\n\n                    \n                    \n                    \n                        Returns :     number | null\n\n                    \n                    \n                        Listening port or null if the server is not started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:103\n                \n            \n\n\n            \n                \n                    Create and Register a new PACH route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:113\n                \n            \n\n\n            \n                \n                    Create and Register a new POST route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:123\n                \n            \n\n\n            \n                \n                    Create and Register a new PUT route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(port: number)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:139\n                \n            \n\n\n            \n                \n                    Start the Stubborn server\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:154\n                \n            \n\n\n            \n                \n                    Stop the Stubborn server\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is stopped\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { createServer, Server } from 'http';\n\nimport {\n  HeaderDefinitions,\n  PathDefinition,\n  RequestBodyDefinition,\n} from './@types';\nimport { METHODS } from './constants';\nimport { Route } from './Route';\nimport { Router } from './Router';\nimport { getServerPort } from './utils';\n\nexport type StubbornOptions = {\n  host?: string;\n  defaultHeaders?: HeaderDefinitions;\n};\n\n/**\n * @example\n * ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n */\nexport class Stubborn {\n  private server: Server;\n  private port: number | null;\n  private router: Router;\n  private options: StubbornOptions;\n\n  constructor(options: StubbornOptions = {}) {\n    this.options = Object.assign(\n      {\n        host: 'localhost',\n        defaultHeaders: {},\n      },\n      options,\n    );\n\n    this.port = null;\n    this.server = createServer();\n    this.router = new Router({ host: this.options.host });\n  }\n\n  /**\n   * Returns the server port.\n   *\n   * If the server is initialized with options.port set to 0 this method\n   * will return the randomly affected port only after the server is started\n   * @returns Listening port or null if the server is not started\n   */\n  public getPort(): number | null {\n    return getServerPort(this.server);\n  }\n\n  /**\n   * Returns the server origin (http://:)\n   * @returns the server origin\n   */\n  public getOrigin(): string {\n    return `http://${this.options.host}:${this.getPort()}`;\n  }\n\n  /**\n   * Remove all routes from the server\n   */\n  public clear() {\n    this.router.clear();\n\n    return this;\n  }\n\n  /**\n   * Create and Register a new DELETE route\n   *\n   * @param path Path matching definition\n   */\n  public delete(path: PathDefinition) {\n    return this.router.createRoute(METHODS.DELETE, path);\n  }\n\n  /**\n   * Create and Register a new GET route\n   *\n   * @param path Path matching definition\n   */\n  public get(path: PathDefinition) {\n    return this.router.createRoute(METHODS.GET, path);\n  }\n\n  /**\n   * Create and Register a new PACH route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public patch(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.PATCH, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new POST route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public post(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.POST, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new PUT route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public put(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.PUT, path).setBody(body);\n  }\n  /**\n   * Register a new route\n   *\n   * @param route Route a Route object\n   */\n  public addRoute(route: Route) {\n    return this.router.addRoute(route);\n  }\n\n  /**\n   * Start the Stubborn server\n   * @returns Promise object resolved when server is started\n   */\n  public start(port: number = 0) {\n    this.port = port;\n\n    return new Promise(resolve => {\n      this.server.listen(this.port);\n      this.router.handle(this.server);\n      resolve();\n    });\n  }\n\n  /**\n   * Stop the Stubborn server\n   *\n   * @returns Promise object resolved when server is stopped\n   */\n  public stop() {\n    return new Promise(resolve => {\n      this.server.close(() => resolve());\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Route.ts\n            \n            class\n            Route\n            \n                50 %\n                (14/28)\n            \n        \n        \n            \n                \n                src/Stubborn.ts\n            \n            class\n            Stubborn\n            \n                64 %\n                (11/17)\n            \n        \n        \n            \n                \n                src/matchers/BodyMatcher.ts\n            \n            function\n            extract\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/matchers/BodyMatcher.ts\n            \n            function\n            hasBody\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/accept : ^4.0.0\n        \n            body-parser : ^1.19.0\n        \n            content-type : ^1.0.4\n        \n            lodash : ^4.17.15\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            METHODS   (src/.../constants.ts)\n                        \n                        \n                            STATUS_CODES   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        METHODS\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        STATUS_CODES\n                    \n                \n                        \n                            \n                                 SUCCESS\n                            \n                        \n                        \n                            \n                                Value : 200\n                            \n                        \n                        \n                            \n                                 NOT_IMPLEMENTED\n                            \n                        \n                        \n                            \n                                Value : 501\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            extract   (src/.../BodyMatcher.ts)\n                        \n                        \n                            hasBody   (src/.../BodyMatcher.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/matchers/BodyMatcher.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            extract\n                        \n                        \n                    \n                \n            \n            \n                \nextract(req)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasBody\n                        \n                        \n                    \n                \n            \n            \n                \nhasBody(req)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nStubborn\n \n\n\nStubborn web server to mock external api responses. It is basically nock meets Dyson. Stubborn will strictly match the requests based on the definition like nock but in a separate web server like Dyson.\n\n\n\nInstallation\nUsage\nAPI\nFAQ\nContributing\nRelease\n\n\n\n\n\nInstallation\nStubborn is tested on NodeJS 8.x and above.\nNpm:\nnpm install --save-dev stubborn-wsYarn:\nyarn add -D stubborn-wsUsage\nStubborn is a testing tool that let you hot load and unload routes into a webserver.\nRequests are strictly matched against routes definitions based on Method, Path, Query parameters, Headers and Body.\nIf the request does not exactly match one route definition (ex: extra parameter, missing parameter, value does not match, etc), Stubborn will respond with a 501.\nThe very fact that Stubborn respond to the request validates that the parameters sent are the expected one, any change in the code that send the request will break the test. Any breaking change will be picked up by your test.\nStubborn response headers and body can be hardcoded or defined using a template.\nimport request from 'got';\nimport { Stubborn } from 'stubborn-ws';\n\ndescribe('Test', () => {\n  const sb = new Stubborn();\n\n  beforeAll(async () => await sb.start());\n  afterAll(async () => await sb.stop());\n\n  // Clean up all routes after a test if needed\n  afterEach(() => sb.clear());\n\n  it('should respond to query', async () => {\n    const body = { some: 'body' };\n    sb.get('/').setResponseBody({ some: 'body' });\n\n    const res = await request(`${sb.getOrigin()}`, { json: true });\n\n    expect(res.body).toEqual(body);\n  });\n});Stubborn strictly matches the request against the route definition.\nIf a query parameter or a header is missing, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is missing', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}`, { throwHttpErrors: false });\n\n  expect(res.statusCode).toEqual(501);\n});If a query parameter or a header is added, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is added', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}?page=1&limit=10`, {\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(501);\n});If a query parameter or a header does not match the route definition, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter does not match the definition', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(501);\n});You can use null as wildcard\nit('should match using wildcard', async () => {\n  sb.get('/')\n    .setQueryParameters({ page: null })\n    .setHeaders(null);\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    headers: { 'x-api-key': 'api key', 'any-other-header': 'stuff' },\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use regex to match a parameter, header or body\nit('should match using a regexp', async () => {\n  sb.post('/', {\n    slug: /^[a-z\\-]*$/,\n  });\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    method: 'POST',\n    body: { slug: 'stubborn-ws' },\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use a function to match a parameter, header or body\nit('should match using a function', async () => {\n  sb.get('/').setQueryParameters({\n    page: value => parseInt(value as string) > 0,\n  });\n\n  const res = await request('/?page=2');\n\n  expect(res).toReplyWith(STATUS_CODES.SUCCESS);\n});Public API\nSee the API documentation\nFAQ\nQ: Stubborn is not matching my route definition and always return a 501\nStubborn is STUBBORN, therefore it will return a 501 if it does not exactly match the route definition you have set up.\nTo help you find what missing in the route definition, you can compare it to the response body returned when receiving a 501:\nconst route = sb\n  .get('/')\n  // This header definition will miss additional header added by got, like user-agent, connexion, etc...\n  .setHeaders({ 'X-Api-Key': 'test' });\n\nconst res = await request(sb.getOrigin(), {\n  headers: { 'x-api-key': 'api key' },\n});\n\nexpect(res.statusCode).toBe(501);\n\nconst def = route.getDefinition();\n\n// Definition used by stubborn to match the request against\nconsole.log('--- DEFINTION ---\\n', def);\n// Actual request received\nconsole.log('--- REQUEST ---\\n', res.body);\n\n// Spot the differences or use a diff tool to find them ;)Q: How do I know if stubborn has been called and matched the route defined?\nStubborn will return a 501 (Not Implemented) if it received a request but cannot match any route.\nIf the request matches the route it will respond according to the route response configuration and update the call property of the route\n  async function call() {\n    return request(sb.getOrigin());\n  }\n\n  // No route setup in Stubborn\n  const res = await call();\n\n  expect(res.statusCode).toBe(501);\n  expect(res.body).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n    // ...\n  });\n\n\n  const route = sb.get('/')\n    .setHeaders(null)\n    .setResponseBody('content');\n\n\n  const res = await call();\n  expect(res.calls.length).toBe(1);\n  expect(res.calls[0]).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n      // ...\n    });Contributing\nRelease\ngit checkout master\ngit pull --rebase\nyarn doc\ngit add .\ngit commit -m 'doc(): Update documentation'\nyarn publish --\ngit push --follow-tagsThen go to github to draft a new release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) [year] [fullname]\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HeaderDefinitions   (src/.../index.ts)\n                        \n                        \n                            JsonValue   (src/.../index.ts)\n                        \n                        \n                            MatchFunction   (src/.../index.ts)\n                        \n                        \n                            Middleware   (src/.../index.ts)\n                        \n                        \n                            NextFunction   (src/.../index.ts)\n                        \n                        \n                            PathDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryDefinitions   (src/.../index.ts)\n                        \n                        \n                            Request   (src/.../index.ts)\n                        \n                        \n                            RequestBodyDefinition   (src/.../index.ts)\n                        \n                        \n                            RequestDefinition   (src/.../index.ts)\n                        \n                        \n                            RequestInfo   (src/.../index.ts)\n                        \n                        \n                            RequestMatcher   (src/.../index.ts)\n                        \n                        \n                            Response   (src/.../index.ts)\n                        \n                        \n                            ResponseBody   (src/.../index.ts)\n                        \n                        \n                            ResponseBodyDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseHeaders   (src/.../index.ts)\n                        \n                        \n                            StubbornOptions   (src/.../Stubborn.ts)\n                        \n                        \n                            Template   (src/.../index.ts)\n                        \n                        \n                            TemplateArray   (src/.../index.ts)\n                        \n                        \n                            TemplateFunction   (src/.../index.ts)\n                        \n                        \n                            TemplateObject   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/@types/index.ts\n    \n    \n        \n            \n                \n                    \n                    HeaderDefinitions\n                \n            \n            \n                \n                        Record | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonValue\n                \n            \n            \n                \n                        null | string | number | boolean | object\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatchFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Middleware\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PathDefinition\n                \n            \n            \n                \n                            null | string | RegExp | MatchFunction\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryDefinitions\n                \n            \n            \n                \n                        Record | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Request\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestBodyDefinition\n                \n            \n            \n                \n                            RequestDefinition\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestDefinition\n                \n            \n            \n                \n                        null | RegExp | MatchFunction | JsonValue | undefined\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMatcher\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                            ServerResponse\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBody\n                \n            \n            \n                \n                            JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBodyDefinition\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseDefinition\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseHeaders\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Template\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject | TemplateArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateArray\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/Stubborn.ts\n    \n    \n        \n            \n                \n                    \n                    StubbornOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
