var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/Stubborn.html",[0,1.152,1,0.876]],["body/classes/Stubborn.html",[0,0.468,1,1.323,2,0.619,3,0.846,4,0.846,5,0.619,6,0.468,7,1.408,8,1.408,9,0.11,10,1.953,11,1.029,12,1.538,13,1.029,14,1.83,15,1.029,16,1.96,17,1.029,18,1.029,19,1.408,20,1.029,21,1.029,22,1.029,23,0.356,24,1.408,25,3.144,26,2.337,27,3.075,28,2.799,29,2.674,30,1.32,31,2.697,32,2.105,33,1.538,34,2.105,35,2.105,36,1.029,37,1.165,38,1.538,39,2.105,40,2.522,41,0.846,42,1.408,43,1.843,44,2.417,45,1.408,46,1.953,47,2.673,48,1.323,49,2.673,50,1.953,51,1.479,52,0.846,53,0.846,54,0.846,55,0.846,56,1.408,57,1.029,58,3.426,59,1.408,60,2.448,61,0.846,62,2.996,63,2.996,64,1.658,65,2.337,66,2.549,67,0.085,68,2.448,69,1.408,70,0.846,71,0.846,72,2.105,73,1.807,74,1,75,0.846,76,1.408,77,1.408,78,1.029,79,1.538,80,1.029,81,2.297,82,1.408,83,1.408,84,1.395,85,1.408,86,1.408,87,2.189,88,0.846,89,1.408,90,2.105,91,1.165,92,1.395,93,1.408,94,0.846,95,1.408,96,0.846,97,1.408,98,0.846,99,2.105,100,1.538,101,2.105,102,0.846,103,1.408,104,1.408,105,1.029,106,0.846,107,0.846,108,0.846,109,0.846,110,1.408,111,1.807,112,1.408,113,0.846,114,0.846,115,0.846,116,1.408,117,0.846,118,0.846,119,0.846,120,0.846,121,0.846,122,0.846,123,2.799,124,0.846,125,1.408,126,0.846,127,0.846,128,1.807,129,0.846,130,0.846,131,1.408,132,0.846,133,0.846,134,1.408,135,0.846,136,0.023,137,0.023]],["title/coverage.html",[138,2.03]],["body/coverage.html",[0,1.903,1,1.23,5,2.136,6,1.617,9,0.102,14,1.617,48,1.23,64,1.617,67,0.093,136,0.079,137,0.079,138,2.136,139,1.617,140,2.923,141,2.923,142,2.923,143,2.923,144,2.923,145,2.923,146,2.923,147,2.923,148,2.923]],["title/dependencies.html",[149,1.771,150,1.817]],["body/dependencies.html",[9,0.106,16,1.65,48,1.255,67,0.094,136,0.081,137,0.081,150,2.179,151,2.982,152,2.982,153,2.982,154,2.982,155,2.982,156,2.982,157,2.982,158,2.982]],["title/miscellaneous/enumerations.html",[159,0.745,160,1.817]],["body/miscellaneous/enumerations.html",[9,0.107,23,1.172,30,2.441,33,2.441,36,2.441,37,1.848,38,2.441,67,0.09,91,2.156,136,0.075,137,0.075,159,1.172,160,2.035,161,3.34,162,3.34,163,2.784,164,2.784,165,2.784,166,2.784,167,2.035]],["title/index.html",[23,0.745,84,0.98,168,1.294]],["body/index.html",[1,1.56,9,0.11,10,1.186,11,1.186,12,2.521,13,1.186,14,0.898,15,0.736,16,1.712,17,2.32,18,2.417,20,0.736,21,0.736,22,0.736,29,1.186,31,0.736,37,0.557,44,1.186,46,1.186,51,0.898,57,1.489,64,1.886,66,1.489,67,0.055,68,2.32,74,0.557,78,0.736,79,0.736,80,1.708,81,2.105,91,0.898,92,1.757,136,0.027,137,0.027,139,0.898,167,2.372,169,1.623,170,1.007,171,1.007,172,3.093,173,1.007,174,1.007,175,1.623,176,1.007,177,1.623,178,2.038,179,3.361,180,1.623,181,1.623,182,1.007,183,1.623,184,1.007,185,1.623,186,1.623,187,2.038,188,1.007,189,1.007,190,1.007,191,0.736,192,1.623,193,1.007,194,1.007,195,1.007,196,1.007,197,2.038,198,1.623,199,1.007,200,1.007,201,1.007,202,1.623,203,1.007,204,1.007,205,1.007,206,1.007,207,1.623,208,2.038,209,1.007,210,2.562,211,2.739,212,1.623,213,1.623,214,1.007,215,1.007,216,3.175,217,2.337,218,1.623,219,2.88,220,1.007,221,1.007,222,1.007,223,1.007,224,1.007,225,1.623,226,1.007,227,1.007,228,1.007,229,2.337,230,1.007,231,1.007,232,2.038,233,1.489,234,1.007,235,2.337,236,0.736,237,1.007,238,1.007,239,1.007,240,1.007,241,1.007,242,1.007,243,1.007,244,1.007,245,1.007,246,2.88,247,2.996,248,1.623,249,1.007,250,1.623,251,2.996,252,2.337,253,2.337,254,2.562,255,2.038,256,2.337,257,2.337,258,2.038,259,2.038,260,1.007,261,2.038,262,1.708,263,1.623,264,1.623,265,1.007,266,1.623,267,2.038,268,2.562,269,1.007,270,1.623,271,1.007,272,0.736,273,1.007,274,1.623,275,1.007,276,1.489,277,1.007,278,1.007,279,1.007,280,1.007,281,1.623,282,1.007,283,1.007,284,1.007,285,1.623,286,1.007,287,1.007,288,1.007,289,1.007,290,1.007,291,1.007,292,1.007,293,1.007,294,1.007,295,1.623,296,1.623,297,1.623,298,1.007,299,1.007,300,1.623,301,1.007,302,1.623,303,1.007,304,1.623,305,1.007,306,1.007,307,1.007,308,1.007,309,1.007,310,1.007,311,1.007,312,1.007,313,1.623,314,2.337,315,1.007,316,1.007,317,1.007,318,1.007,319,1.007,320,2.562,321,1.007,322,1.007,323,1.007,324,1.007,325,1.623,326,1.007,327,1.007,328,0.736,329,1.007,330,1.007,331,1.007,332,1.007,333,1.007,334,1.007]],["title/license.html",[84,0.98,168,1.294,335,1.294]],["body/license.html",[9,0.082,67,0.082,136,0.064,137,0.064,139,1.309,191,1.728,262,2.206,328,1.728,335,1.728,336,2.365,337,3.326,338,2.365,339,2.365,340,2.365,341,3.019,342,2.365,343,2.365,344,2.365,345,2.365,346,2.365,347,2.365,348,3.019,349,3.847,350,2.365,351,2.365,352,2.365,353,3.326,354,2.365,355,3.019,356,2.365,357,2.365,358,2.365,359,2.365,360,2.365,361,2.365,362,2.365,363,2.365,364,3.019,365,2.365,366,2.365,367,2.365,368,2.365,369,2.365,370,2.365,371,3.019,372,3.019,373,2.365,374,2.365,375,2.365,376,2.365,377,2.365,378,2.365,379,2.365,380,2.365,381,2.365,382,2.365,383,2.365,384,2.365,385,2.365,386,2.365,387,2.365,388,2.365,389,2.365,390,2.365,391,2.365,392,2.365,393,2.365,394,2.365,395,2.365,396,2.365,397,2.365,398,2.365,399,2.365,400,2.365,401,2.365,402,2.365,403,2.365]],["title/modules.html",[404,2.03]],["body/modules.html",[9,0.097,67,0.097,136,0.085,137,0.085,404,2.288]],["title/overview.html",[405,2.03]],["body/overview.html",[2,2.272,9,0.096,67,0.096,136,0.084,137,0.084,405,2.272,406,3.109]],["title/miscellaneous/typealiases.html",[159,0.745,407,2.487]],["body/miscellaneous/typealiases.html",[6,1.179,9,0.107,23,0.897,43,2.062,48,1.545,50,1.557,51,1.938,60,2.062,67,0.076,74,1.561,87,2.062,92,1.561,100,1.557,105,2.062,136,0.058,137,0.058,159,0.897,233,2.062,236,2.062,272,2.062,276,2.559,408,2.131,409,3.991,410,3.599,411,3.367,412,2.821,413,2.821,414,2.821,415,3.163,416,2.821,417,2.821,418,2.821,419,2.821,420,2.821,421,2.821,422,2.131,423,3.163,424,3.367,425,3.367,426,2.131,427,2.821,428,2.131,429,3.599,430,2.131]]],"invertedIndex":[["",{"_index":9,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":79,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["1",{"_index":255,"title":{},"body":{"index.html":{}}}],["1.0.4",{"_index":156,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":154,"title":{},"body":{"dependencies.html":{}}}],["10/16",{"_index":146,"title":{},"body":{"coverage.html":{}}}],["14/28",{"_index":144,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":406,"title":{},"body":{"overview.html":{}}}],["200",{"_index":165,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3.2.3",{"_index":152,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":158,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":143,"title":{},"body":{"coverage.html":{}}}],["501",{"_index":167,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["62",{"_index":145,"title":{},"body":{"coverage.html":{}}}],["8.x",{"_index":190,"title":{},"body":{"index.html":{}}}],["above",{"_index":191,"title":{},"body":{"index.html":{},"license.html":{}}}],["according",{"_index":311,"title":{},"body":{"index.html":{}}}],["action",{"_index":396,"title":{},"body":{"license.html":{}}}],["actual",{"_index":303,"title":{},"body":{"index.html":{}}}],["add",{"_index":198,"title":{},"body":{"index.html":{}}}],["added",{"_index":259,"title":{},"body":{"index.html":{}}}],["additional",{"_index":290,"title":{},"body":{"index.html":{}}}],["affected",{"_index":83,"title":{},"body":{"classes/Stubborn.html":{}}}],["afterall(async",{"_index":240,"title":{},"body":{"index.html":{}}}],["aftereach",{"_index":244,"title":{},"body":{"index.html":{}}}],["against",{"_index":208,"title":{},"body":{"index.html":{}}}],["agent",{"_index":292,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":408,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["always",{"_index":282,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":362,"title":{},"body":{"license.html":{}}}],["api",{"_index":172,"title":{},"body":{"index.html":{}}}],["arising",{"_index":400,"title":{},"body":{"license.html":{}}}],["associated",{"_index":350,"title":{},"body":{"license.html":{}}}],["async",{"_index":247,"title":{},"body":{"index.html":{}}}],["authors",{"_index":389,"title":{},"body":{"license.html":{}}}],["await",{"_index":18,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["based",{"_index":181,"title":{},"body":{"index.html":{}}}],["basically",{"_index":174,"title":{},"body":{"index.html":{}}}],["beforeall(async",{"_index":238,"title":{},"body":{"index.html":{}}}],["body",{"_index":16,"title":{},"body":{"classes/Stubborn.html":{},"dependencies.html":{},"index.html":{}}}],["boolean",{"_index":428,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["break",{"_index":228,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":230,"title":{},"body":{"index.html":{}}}],["c",{"_index":338,"title":{},"body":{"license.html":{}}}],["call",{"_index":314,"title":{},"body":{"index.html":{}}}],["called",{"_index":310,"title":{},"body":{"index.html":{}}}],["change",{"_index":225,"title":{},"body":{"index.html":{}}}],["charge",{"_index":345,"title":{},"body":{"license.html":{}}}],["checkout",{"_index":321,"title":{},"body":{"index.html":{}}}],["claim",{"_index":392,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Stubborn.html":{},"overview.html":{}}}],["clean",{"_index":242,"title":{},"body":{"index.html":{}}}],["clear",{"_index":32,"title":{},"body":{"classes/Stubborn.html":{}}}],["code",{"_index":226,"title":{},"body":{"index.html":{}}}],["commit",{"_index":326,"title":{},"body":{"index.html":{}}}],["compare",{"_index":286,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":370,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":312,"title":{},"body":{"index.html":{}}}],["connection",{"_index":402,"title":{},"body":{"license.html":{}}}],["connexion",{"_index":293,"title":{},"body":{"index.html":{}}}],["console.log",{"_index":300,"title":{},"body":{"index.html":{}}}],["const",{"_index":12,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["constants",{"_index":107,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor",{"_index":41,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor(options",{"_index":42,"title":{},"body":{"classes/Stubborn.html":{}}}],["content",{"_index":155,"title":{},"body":{"dependencies.html":{}}}],["contract",{"_index":397,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":186,"title":{},"body":{"index.html":{}}}],["copies",{"_index":364,"title":{},"body":{"license.html":{}}}],["copy",{"_index":348,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":337,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":138,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":62,"title":{},"body":{"classes/Stubborn.html":{}}}],["createserver",{"_index":104,"title":{},"body":{"classes/Stubborn.html":{}}}],["d",{"_index":199,"title":{},"body":{"index.html":{}}}],["damages",{"_index":393,"title":{},"body":{"license.html":{}}}],["deal",{"_index":352,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":403,"title":{},"body":{"license.html":{}}}],["def",{"_index":297,"title":{},"body":{"index.html":{}}}],["default",{"_index":90,"title":{},"body":{"classes/Stubborn.html":{}}}],["defaultheaders",{"_index":112,"title":{},"body":{"classes/Stubborn.html":{}}}],["defined",{"_index":44,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["definition",{"_index":68,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["definitions",{"_index":209,"title":{},"body":{"index.html":{}}}],["defintion",{"_index":301,"title":{},"body":{"index.html":{}}}],["delete",{"_index":33,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["delete(path",{"_index":59,"title":{},"body":{"classes/Stubborn.html":{}}}],["dependencies",{"_index":150,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["describe('test",{"_index":237,"title":{},"body":{"index.html":{}}}],["description",{"_index":65,"title":{},"body":{"classes/Stubborn.html":{}}}],["dev",{"_index":195,"title":{},"body":{"index.html":{}}}],["diff",{"_index":308,"title":{},"body":{"index.html":{}}}],["differences",{"_index":307,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":360,"title":{},"body":{"license.html":{}}}],["doc",{"_index":325,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":139,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["draft",{"_index":334,"title":{},"body":{"index.html":{}}}],["dyson",{"_index":177,"title":{},"body":{"index.html":{}}}],["enumerations",{"_index":160,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["etc",{"_index":218,"title":{},"body":{"index.html":{}}}],["event",{"_index":388,"title":{},"body":{"license.html":{}}}],["ex",{"_index":214,"title":{},"body":{"index.html":{}}}],["exactly",{"_index":212,"title":{},"body":{"index.html":{}}}],["example",{"_index":7,"title":{},"body":{"classes/Stubborn.html":{}}}],["expect(res).toreplywith(status_codes.success",{"_index":279,"title":{},"body":{"index.html":{}}}],["expect(res.body).toequal",{"_index":22,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["expect(res.body).toequal(body",{"_index":249,"title":{},"body":{"index.html":{}}}],["expect(res.calls.length).tobe(1",{"_index":318,"title":{},"body":{"index.html":{}}}],["expect(res.calls[0]).toequal",{"_index":319,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).tobe(501",{"_index":296,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(200",{"_index":270,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(501",{"_index":258,"title":{},"body":{"index.html":{}}}],["expected",{"_index":224,"title":{},"body":{"index.html":{}}}],["export",{"_index":110,"title":{},"body":{"classes/Stubborn.html":{}}}],["express",{"_index":379,"title":{},"body":{"license.html":{}}}],["external",{"_index":171,"title":{},"body":{"index.html":{}}}],["extra",{"_index":215,"title":{},"body":{"index.html":{}}}],["fact",{"_index":221,"title":{},"body":{"index.html":{}}}],["false",{"_index":257,"title":{},"body":{"index.html":{}}}],["faq",{"_index":185,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{}}}],["files",{"_index":351,"title":{},"body":{"license.html":{}}}],["find",{"_index":285,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":384,"title":{},"body":{"license.html":{}}}],["follow",{"_index":330,"title":{},"body":{"index.html":{}}}],["following",{"_index":369,"title":{},"body":{"license.html":{}}}],["free",{"_index":344,"title":{},"body":{"license.html":{}}}],["fullname",{"_index":340,"title":{},"body":{"license.html":{}}}],["function",{"_index":276,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["furnished",{"_index":367,"title":{},"body":{"license.html":{}}}],["get(path",{"_index":69,"title":{},"body":{"classes/Stubborn.html":{}}}],["getorigin",{"_index":34,"title":{},"body":{"classes/Stubborn.html":{}}}],["getport",{"_index":35,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport",{"_index":108,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport(this.server",{"_index":120,"title":{},"body":{"classes/Stubborn.html":{}}}],["getting",{"_index":168,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":320,"title":{},"body":{"index.html":{}}}],["github",{"_index":333,"title":{},"body":{"index.html":{}}}],["go",{"_index":332,"title":{},"body":{"index.html":{}}}],["got(`${sb.getorigin",{"_index":19,"title":{},"body":{"classes/Stubborn.html":{}}}],["granted",{"_index":343,"title":{},"body":{"license.html":{}}}],["hapi/accept",{"_index":151,"title":{},"body":{"dependencies.html":{}}}],["hardcoded",{"_index":234,"title":{},"body":{"index.html":{}}}],["header",{"_index":251,"title":{},"body":{"index.html":{}}}],["headerdefinitions",{"_index":105,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":211,"title":{},"body":{"index.html":{}}}],["help",{"_index":284,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":342,"title":{},"body":{"license.html":{}}}],["holders",{"_index":390,"title":{},"body":{"license.html":{}}}],["host",{"_index":111,"title":{},"body":{"classes/Stubborn.html":{}}}],["hot",{"_index":203,"title":{},"body":{"index.html":{}}}],["http",{"_index":73,"title":{},"body":{"classes/Stubborn.html":{}}}],["http://${this.options.host}:${this.getport",{"_index":121,"title":{},"body":{"classes/Stubborn.html":{}}}],["identifier",{"_index":140,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":252,"title":{},"body":{"index.html":{}}}],["implied",{"_index":380,"title":{},"body":{"license.html":{}}}],["import",{"_index":10,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["included",{"_index":373,"title":{},"body":{"license.html":{}}}],["including",{"_index":355,"title":{},"body":{"license.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Stubborn.html":{}}}],["initialized",{"_index":76,"title":{},"body":{"classes/Stubborn.html":{}}}],["install",{"_index":193,"title":{},"body":{"index.html":{}}}],["installation",{"_index":183,"title":{},"body":{"index.html":{}}}],["it('should",{"_index":246,"title":{},"body":{"index.html":{}}}],["json",{"_index":20,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["jsonvalue",{"_index":410,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["key",{"_index":268,"title":{},"body":{"index.html":{}}}],["kind",{"_index":378,"title":{},"body":{"license.html":{}}}],["know",{"_index":309,"title":{},"body":{"index.html":{}}}],["liability",{"_index":394,"title":{},"body":{"license.html":{}}}],["liable",{"_index":391,"title":{},"body":{"license.html":{}}}],["license",{"_index":335,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":356,"title":{},"body":{"license.html":{}}}],["limited",{"_index":381,"title":{},"body":{"license.html":{}}}],["listening",{"_index":85,"title":{},"body":{"classes/Stubborn.html":{}}}],["literal",{"_index":429,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":204,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":115,"title":{},"body":{"classes/Stubborn.html":{}}}],["lodash",{"_index":157,"title":{},"body":{"dependencies.html":{}}}],["m",{"_index":327,"title":{},"body":{"index.html":{}}}],["master",{"_index":322,"title":{},"body":{"index.html":{}}}],["match",{"_index":179,"title":{},"body":{"index.html":{}}}],["matched",{"_index":207,"title":{},"body":{"index.html":{}}}],["matches",{"_index":250,"title":{},"body":{"index.html":{}}}],["matchfunction",{"_index":411,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["matching",{"_index":67,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["meets",{"_index":176,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":383,"title":{},"body":{"license.html":{}}}],["merge",{"_index":359,"title":{},"body":{"license.html":{}}}],["method",{"_index":80,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["methods",{"_index":30,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["middleware",{"_index":412,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":159,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["miss",{"_index":289,"title":{},"body":{"index.html":{}}}],["missing",{"_index":217,"title":{},"body":{"index.html":{}}}],["mit",{"_index":336,"title":{},"body":{"license.html":{}}}],["mock",{"_index":170,"title":{},"body":{"index.html":{}}}],["modify",{"_index":358,"title":{},"body":{"license.html":{}}}],["modules",{"_index":404,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["n",{"_index":302,"title":{},"body":{"index.html":{}}}],["name",{"_index":47,"title":{},"body":{"classes/Stubborn.html":{}}}],["needed",{"_index":243,"title":{},"body":{"index.html":{}}}],["new",{"_index":14,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["nextfunction",{"_index":413,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nock",{"_index":175,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":189,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":387,"title":{},"body":{"license.html":{}}}],["not_implemented",{"_index":166,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notice",{"_index":371,"title":{},"body":{"license.html":{}}}],["npm",{"_index":192,"title":{},"body":{"index.html":{}}}],["null",{"_index":51,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":50,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["object",{"_index":100,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["object.assign",{"_index":114,"title":{},"body":{"classes/Stubborn.html":{}}}],["obtaining",{"_index":347,"title":{},"body":{"license.html":{}}}],["one",{"_index":213,"title":{},"body":{"index.html":{}}}],["optional",{"_index":49,"title":{},"body":{"classes/Stubborn.html":{}}}],["options",{"_index":26,"title":{},"body":{"classes/Stubborn.html":{}}}],["options.port",{"_index":77,"title":{},"body":{"classes/Stubborn.html":{}}}],["origin",{"_index":72,"title":{},"body":{"classes/Stubborn.html":{}}}],["otherwise",{"_index":399,"title":{},"body":{"license.html":{}}}],["out",{"_index":401,"title":{},"body":{"license.html":{}}}],["overview",{"_index":405,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pach",{"_index":89,"title":{},"body":{"classes/Stubborn.html":{}}}],["package",{"_index":149,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":254,"title":{},"body":{"index.html":{}}}],["param",{"_index":123,"title":{},"body":{"classes/Stubborn.html":{}}}],["parameter",{"_index":216,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":46,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["parseint(value",{"_index":277,"title":{},"body":{"index.html":{}}}],["parser",{"_index":153,"title":{},"body":{"dependencies.html":{}}}],["particular",{"_index":385,"title":{},"body":{"license.html":{}}}],["patch",{"_index":36,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["patch(path",{"_index":86,"title":{},"body":{"classes/Stubborn.html":{}}}],["path",{"_index":66,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["path).setbody(body",{"_index":128,"title":{},"body":{"classes/Stubborn.html":{}}}],["path).setbody(null",{"_index":125,"title":{},"body":{"classes/Stubborn.html":{}}}],["pathdefinition",{"_index":60,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["permission",{"_index":341,"title":{},"body":{"license.html":{}}}],["permit",{"_index":365,"title":{},"body":{"license.html":{}}}],["person",{"_index":346,"title":{},"body":{"license.html":{}}}],["persons",{"_index":366,"title":{},"body":{"license.html":{}}}],["picked",{"_index":231,"title":{},"body":{"index.html":{}}}],["port",{"_index":27,"title":{},"body":{"classes/Stubborn.html":{}}}],["portions",{"_index":375,"title":{},"body":{"license.html":{}}}],["post",{"_index":37,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["post(path",{"_index":93,"title":{},"body":{"classes/Stubborn.html":{}}}],["private",{"_index":25,"title":{},"body":{"classes/Stubborn.html":{}}}],["promise",{"_index":99,"title":{},"body":{"classes/Stubborn.html":{}}}],["promise(resolve",{"_index":131,"title":{},"body":{"classes/Stubborn.html":{}}}],["properties",{"_index":24,"title":{},"body":{"classes/Stubborn.html":{}}}],["property",{"_index":315,"title":{},"body":{"index.html":{}}}],["provided",{"_index":376,"title":{},"body":{"license.html":{}}}],["public",{"_index":31,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["publish",{"_index":328,"title":{},"body":{"index.html":{},"license.html":{}}}],["pull",{"_index":323,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":386,"title":{},"body":{"license.html":{}}}],["push",{"_index":329,"title":{},"body":{"index.html":{}}}],["put",{"_index":38,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["put(path",{"_index":95,"title":{},"body":{"classes/Stubborn.html":{}}}],["q",{"_index":281,"title":{},"body":{"index.html":{}}}],["query",{"_index":210,"title":{},"body":{"index.html":{}}}],["querydefinitions",{"_index":414,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["randomly",{"_index":82,"title":{},"body":{"classes/Stubborn.html":{}}}],["rebase",{"_index":324,"title":{},"body":{"index.html":{}}}],["received",{"_index":304,"title":{},"body":{"index.html":{}}}],["receiving",{"_index":288,"title":{},"body":{"index.html":{}}}],["record",{"_index":427,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["regex",{"_index":271,"title":{},"body":{"index.html":{}}}],["regexp",{"_index":272,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":63,"title":{},"body":{"classes/Stubborn.html":{}}}],["release",{"_index":187,"title":{},"body":{"index.html":{}}}],["remove",{"_index":56,"title":{},"body":{"classes/Stubborn.html":{}}}],["request",{"_index":92,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["request('/?page=2",{"_index":278,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin",{"_index":248,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin()}?page=1&limit=10",{"_index":260,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin()}?page=2",{"_index":261,"title":{},"body":{"index.html":{}}}],["request(sb.getorigin",{"_index":295,"title":{},"body":{"index.html":{}}}],["requestbodydefinition",{"_index":87,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["requestdefinition",{"_index":415,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requestinfo",{"_index":416,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requestmatcher",{"_index":417,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requests",{"_index":180,"title":{},"body":{"index.html":{}}}],["res",{"_index":17,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["res.body",{"_index":305,"title":{},"body":{"index.html":{}}}],["resolve",{"_index":134,"title":{},"body":{"classes/Stubborn.html":{}}}],["resolved",{"_index":101,"title":{},"body":{"classes/Stubborn.html":{}}}],["respond",{"_index":219,"title":{},"body":{"index.html":{}}}],["response",{"_index":233,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["responsebody",{"_index":418,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responsebodydefinition",{"_index":419,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responsedefinition",{"_index":420,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responseheaders",{"_index":421,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["responses",{"_index":173,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":354,"title":{},"body":{"license.html":{}}}],["result",{"_index":136,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":137,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":81,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["returned",{"_index":287,"title":{},"body":{"index.html":{}}}],["returns",{"_index":58,"title":{},"body":{"classes/Stubborn.html":{}}}],["rights",{"_index":357,"title":{},"body":{"license.html":{}}}],["route",{"_index":64,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["route.getdefinition",{"_index":298,"title":{},"body":{"index.html":{}}}],["router",{"_index":28,"title":{},"body":{"classes/Stubborn.html":{}}}],["routes",{"_index":57,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["save",{"_index":194,"title":{},"body":{"index.html":{}}}],["sb",{"_index":13,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.clear",{"_index":245,"title":{},"body":{"index.html":{}}}],["sb.get",{"_index":264,"title":{},"body":{"index.html":{}}}],["sb.get('/').setqueryparameters",{"_index":253,"title":{},"body":{"index.html":{}}}],["sb.get('/').setresponsebody",{"_index":15,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.post",{"_index":273,"title":{},"body":{"index.html":{}}}],["sb.start",{"_index":239,"title":{},"body":{"index.html":{}}}],["sb.stop",{"_index":241,"title":{},"body":{"index.html":{}}}],["see",{"_index":280,"title":{},"body":{"index.html":{}}}],["sell",{"_index":363,"title":{},"body":{"license.html":{}}}],["send",{"_index":227,"title":{},"body":{"index.html":{}}}],["sent",{"_index":223,"title":{},"body":{"index.html":{}}}],["separate",{"_index":182,"title":{},"body":{"index.html":{}}}],["server",{"_index":29,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["serverresponse",{"_index":430,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["set",{"_index":78,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["setheaders",{"_index":294,"title":{},"body":{"index.html":{}}}],["setheaders(null",{"_index":266,"title":{},"body":{"index.html":{}}}],["setqueryparameters",{"_index":265,"title":{},"body":{"index.html":{}}}],["setresponsebody('content",{"_index":317,"title":{},"body":{"index.html":{}}}],["setup",{"_index":316,"title":{},"body":{"index.html":{}}}],["shall",{"_index":372,"title":{},"body":{"license.html":{}}}],["slug",{"_index":274,"title":{},"body":{"index.html":{}}}],["software",{"_index":349,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Stubborn.html":{}}}],["spot",{"_index":306,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":161,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":409,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../stubborn.ts",{"_index":422,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/@types/index.ts",{"_index":426,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/constants.ts",{"_index":163,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/route.ts",{"_index":142,"title":{},"body":{"coverage.html":{}}}],["src/stubborn.ts",{"_index":6,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/stubborn.ts:102",{"_index":88,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:112",{"_index":94,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:122",{"_index":96,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:130",{"_index":98,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:145",{"_index":102,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:31",{"_index":54,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:32",{"_index":52,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:33",{"_index":53,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:34",{"_index":45,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:57",{"_index":75,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:65",{"_index":71,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:72",{"_index":55,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:83",{"_index":61,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:92",{"_index":70,"title":{},"body":{"classes/Stubborn.html":{}}}],["start",{"_index":39,"title":{},"body":{"classes/Stubborn.html":{}}}],["start(port",{"_index":97,"title":{},"body":{"classes/Stubborn.html":{}}}],["started",{"_index":84,"title":{"index.html":{},"license.html":{}},"body":{"classes/Stubborn.html":{}}}],["statements",{"_index":141,"title":{},"body":{"coverage.html":{}}}],["status_codes",{"_index":162,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stop",{"_index":40,"title":{},"body":{"classes/Stubborn.html":{}}}],["stopped",{"_index":103,"title":{},"body":{"classes/Stubborn.html":{}}}],["strictly",{"_index":178,"title":{},"body":{"index.html":{}}}],["string",{"_index":74,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stubborn",{"_index":1,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["stubbornoptions",{"_index":43,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["stuff",{"_index":269,"title":{},"body":{"index.html":{}}}],["subject",{"_index":368,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":361,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":374,"title":{},"body":{"license.html":{}}}],["success",{"_index":164,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":148,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":147,"title":{},"body":{"coverage.html":{}}}],["tagsthen",{"_index":331,"title":{},"body":{"index.html":{}}}],["template",{"_index":236,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["templatearray",{"_index":423,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["templatefunction",{"_index":424,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["templateobject",{"_index":425,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["test",{"_index":229,"title":{},"body":{"index.html":{}}}],["tested",{"_index":188,"title":{},"body":{"index.html":{}}}],["testing",{"_index":201,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":283,"title":{},"body":{"index.html":{}}}],["this.options",{"_index":113,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.options.host",{"_index":119,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.port",{"_index":116,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router",{"_index":118,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.clear",{"_index":122,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.delete",{"_index":124,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.get",{"_index":126,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.patch",{"_index":127,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.post",{"_index":129,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.put",{"_index":130,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.handle(this.server",{"_index":133,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server",{"_index":117,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.close",{"_index":135,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.listen(this.port",{"_index":132,"title":{},"body":{"classes/Stubborn.html":{}}}],["throwhttperrors",{"_index":256,"title":{},"body":{"index.html":{}}}],["tool",{"_index":202,"title":{},"body":{"index.html":{}}}],["tort",{"_index":398,"title":{},"body":{"license.html":{}}}],["true",{"_index":21,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["type",{"_index":48,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":407,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":106,"title":{},"body":{"classes/Stubborn.html":{}}}],["typescript",{"_index":8,"title":{},"body":{"classes/Stubborn.html":{}}}],["unload",{"_index":205,"title":{},"body":{"index.html":{}}}],["up",{"_index":232,"title":{},"body":{"index.html":{}}}],["update",{"_index":313,"title":{},"body":{"index.html":{}}}],["usage",{"_index":184,"title":{},"body":{"index.html":{}}}],["use",{"_index":262,"title":{},"body":{"index.html":{},"license.html":{}}}],["used",{"_index":299,"title":{},"body":{"index.html":{}}}],["user",{"_index":291,"title":{},"body":{"index.html":{}}}],["using",{"_index":235,"title":{},"body":{"index.html":{}}}],["utils",{"_index":109,"title":{},"body":{"classes/Stubborn.html":{}}}],["validates",{"_index":222,"title":{},"body":{"index.html":{}}}],["value",{"_index":91,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["very",{"_index":220,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":382,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":377,"title":{},"body":{"license.html":{}}}],["web",{"_index":169,"title":{},"body":{"index.html":{}}}],["webserver",{"_index":206,"title":{},"body":{"index.html":{}}}],["whether",{"_index":395,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":263,"title":{},"body":{"index.html":{}}}],["without",{"_index":353,"title":{},"body":{"license.html":{}}}],["ws",{"_index":11,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["wsusage",{"_index":200,"title":{},"body":{"index.html":{}}}],["wsyarn",{"_index":196,"title":{},"body":{"index.html":{}}}],["x",{"_index":267,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":197,"title":{},"body":{"index.html":{}}}],["year",{"_index":339,"title":{},"body":{"license.html":{}}}],["z",{"_index":275,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Stubborn.html":{"url":"classes/Stubborn.html","title":"class - Stubborn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stubborn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Stubborn.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n                        \n                            ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n                        \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                options\n                            \n                            \n                                    Private\n                                port\n                            \n                            \n                                    Private\n                                router\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getOrigin\n                            \n                            \n                                    Public\n                                getPort\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: StubbornOptions)\n                    \n                \n                        \n                            \n                                Defined in src/Stubborn.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        StubbornOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StubbornOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            port\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:31\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:72\n                \n            \n\n\n            \n                \n                    Remove all routes from the server\n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:83\n                \n            \n\n\n            \n                \n                    Create and Register a new DELETE route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:92\n                \n            \n\n\n            \n                \n                    Create and Register a new GET route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOrigin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrigin()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:65\n                \n            \n\n\n            \n                \n                    Returns the server origin (http://:)\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the server origin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPort\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPort()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:57\n                \n            \n\n\n            \n                \n                    Returns the server port.\nIf the server is initialized with options.port set to 0 this method\nwill return the randomly affected port only after the server is started\n\n\n                    \n                    \n                    \n                        Returns :     number | null\n\n                    \n                    \n                        Listening port or null if the server is not started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:102\n                \n            \n\n\n            \n                \n                    Create and Register a new PACH route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:112\n                \n            \n\n\n            \n                \n                    Create and Register a new POST route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(path: PathDefinition, body: RequestBodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:122\n                \n            \n\n\n            \n                \n                    Create and Register a new PUT route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                RequestBodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(port: number)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:130\n                \n            \n\n\n            \n                \n                    Start the Stubborn server\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:145\n                \n            \n\n\n            \n                \n                    Stop the Stubborn server\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is stopped\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { createServer, Server } from 'http';\n\nimport {\n  HeaderDefinitions,\n  PathDefinition,\n  RequestBodyDefinition,\n} from './@types';\nimport { METHODS } from './constants';\nimport { Router } from './Router';\nimport { getServerPort } from './utils';\n\nexport type StubbornOptions = {\n  host?: string;\n  defaultHeaders?: HeaderDefinitions;\n};\n\n/**\n * @example\n * ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n */\nexport class Stubborn {\n  private server: Server;\n  private port: number | null;\n  private router: Router;\n  private options: StubbornOptions;\n\n  constructor(options: StubbornOptions = {}) {\n    this.options = Object.assign(\n      {\n        host: 'localhost',\n        defaultHeaders: {},\n      },\n      options,\n    );\n\n    this.port = null;\n    this.server = createServer();\n    this.router = new Router({ host: this.options.host });\n  }\n\n  /**\n   * Returns the server port.\n   *\n   * If the server is initialized with options.port set to 0 this method\n   * will return the randomly affected port only after the server is started\n   * @returns Listening port or null if the server is not started\n   */\n  public getPort(): number | null {\n    return getServerPort(this.server);\n  }\n\n  /**\n   * Returns the server origin (http://:)\n   * @returns the server origin\n   */\n  public getOrigin(): string {\n    return `http://${this.options.host}:${this.getPort()}`;\n  }\n\n  /**\n   * Remove all routes from the server\n   */\n  public clear() {\n    this.router.clear();\n\n    return this;\n  }\n\n  /**\n   * Create and Register a new DELETE route\n   *\n   * @param path Path matching definition\n   */\n  public delete(path: PathDefinition) {\n    return this.router.createRoute(METHODS.DELETE, path).setBody(null);\n  }\n\n  /**\n   * Create and Register a new GET route\n   *\n   * @param path Path matching definition\n   */\n  public get(path: PathDefinition) {\n    return this.router.createRoute(METHODS.GET, path).setBody(null);\n  }\n\n  /**\n   * Create and Register a new PACH route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public patch(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.PATCH, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new POST route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public post(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.POST, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new PUT route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public put(path: PathDefinition, body: RequestBodyDefinition = '') {\n    return this.router.createRoute(METHODS.PUT, path).setBody(body);\n  }\n\n  /**\n   * Start the Stubborn server\n   * @returns Promise object resolved when server is started\n   */\n  public start(port: number = 0) {\n    this.port = port;\n\n    return new Promise(resolve => {\n      this.server.listen(this.port);\n      this.router.handle(this.server);\n      resolve();\n    });\n  }\n\n  /**\n   * Stop the Stubborn server\n   *\n   * @returns Promise object resolved when server is stopped\n   */\n  public stop() {\n    return new Promise(resolve => {\n      this.server.close(() => resolve());\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Route.ts\n            \n            class\n            Route\n            \n                50 %\n                (14/28)\n            \n        \n        \n            \n                \n                src/Stubborn.ts\n            \n            class\n            Stubborn\n            \n                62 %\n                (10/16)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/accept : ^3.2.3\n        \n            body-parser : ^1.19.0\n        \n            content-type : ^1.0.4\n        \n            lodash : ^4.17.15\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            METHODS   (src/.../constants.ts)\n                        \n                        \n                            STATUS_CODES   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        METHODS\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        STATUS_CODES\n                    \n                \n                        \n                            \n                                 SUCCESS\n                            \n                        \n                        \n                            \n                                Value : 200\n                            \n                        \n                        \n                            \n                                 NOT_IMPLEMENTED\n                            \n                        \n                        \n                            \n                                Value : 501\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nStubborn\n \n\n\nStubborn web server to mock external api responses. It is basically nock meets Dyson. Stubborn will strictly match the requests based on the definition like nock but in a separate web server like Dyson.\n\n\n\nInstallation\nUsage\nAPI\nFAQ\nContributing\nRelease\n\n\n\n\n\nInstallation\nStubborn is tested on NodeJS 8.x and above.\nNpm:\nnpm install --save-dev stubborn-wsYarn:\nyarn add -D stubborn-wsUsage\nStubborn is a testing tool that let you hot load and unload routes into a webserver.\nRequests are strictly matched against routes definitions based on Method, Path, Query parameters, Headers and Body.\nIf the request does not exactly match one route definition (ex: extra parameter, missing parameter, value does not match, etc), Stubborn will respond with a 501.\nThe very fact that Stubborn respond to the request validates that the parameters sent are the expected one, any change in the code that send the request will break the test. Any breaking change will be picked up by your test.\nStubborn response headers and body can be hardcoded or defined using a template.\nimport request from 'got';\nimport { Stubborn } from 'stubborn-ws';\n\ndescribe('Test', () => {\n  const sb = new Stubborn();\n\n  beforeAll(async () => await sb.start());\n  afterAll(async () => await sb.stop());\n\n  // Clean up all routes after a test if needed\n  afterEach(() => sb.clear());\n\n  it('should respond to query', async () => {\n    const body = { some: 'body' };\n    sb.get('/').setResponseBody({ some: 'body' });\n\n    const res = await request(`${sb.getOrigin()}`, { json: true });\n\n    expect(res.body).toEqual(body);\n  });\n});Stubborn strictly matches the request against the route definition.\nIf a query parameter or a header is missing, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is missing', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}`, { throwHttpErrors: false });\n\n  expect(res.statusCode).toEqual(501);\n});If a query parameter or a header is added, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is added', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}?page=1&limit=10`, {\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(501);\n});If a query parameter or a header does not match the route definition, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter does not match the definition', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(501);\n});You can use null as wildcard\nit('should match using wildcard', async () => {\n  sb.get('/')\n    .setQueryParameters({ page: null })\n    .setHeaders(null);\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    headers: { 'x-api-key': 'api key', 'any-other-header': 'stuff' },\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use regex to match a parameter, header or body\nit('should match using a regexp', async () => {\n  sb.post('/', {\n    slug: /^[a-z\\-]*$/,\n  });\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    method: 'POST',\n    body: { slug: 'stubborn-ws' },\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use a function to match a parameter, header or body\nit('should match using a function', async () => {\n  sb.get('/').setQueryParameters({\n    page: value => parseInt(value as string) > 0,\n  });\n\n  const res = await request('/?page=2');\n\n  expect(res).toReplyWith(STATUS_CODES.SUCCESS);\n});Public API\nSee the API documentation\nFAQ\nQ: Stubborn is not matching my route definition and always return a 501\nStubborn is STUBBORN, therefore it will return a 501 if it does not exactly match the route definition you have set up.\nTo help you find what missing in the route definition, you can compare it to the response body returned when receiving a 501:\nconst route = sb\n  .get('/')\n  // This header definition will miss additional header added by got, like user-agent, connexion, etc...\n  .setHeaders({ 'X-Api-Key': 'test' });\n\nconst res = await request(sb.getOrigin(), {\n  headers: { 'x-api-key': 'api key' },\n});\n\nexpect(res.statusCode).toBe(501);\n\nconst def = route.getDefinition();\n\n// Definition used by stubborn to match the request against\nconsole.log('--- DEFINTION ---\\n', def);\n// Actual request received\nconsole.log('--- REQUEST ---\\n', res.body);\n\n// Spot the differences or use a diff tool to find them ;)Q: How do I know if stubborn has been called and matched the route defined?\nStubborn will return a 501 (Not Implemented) if it received a request but cannot match any route.\nIf the request matches the route it will respond according to the route response configuration and update the call property of the route\n  async function call() {\n    return request(sb.getOrigin());\n  }\n\n  // No route setup in Stubborn\n  const res = await call();\n\n  expect(res.statusCode).toBe(501);\n  expect(res.body).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n    // ...\n  });\n\n\n  const route = sb.get('/')\n    .setHeaders(null)\n    .setResponseBody('content');\n\n\n  const res = await call();\n  expect(res.calls.length).toBe(1);\n  expect(res.calls[0]).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n      // ...\n    });Contributing\nRelease\ngit checkout master\ngit pull --rebase\nyarn doc\ngit add .\ngit commit -m 'doc(): Update documentation'\nyarn publish --\ngit push --follow-tagsThen go to github to draft a new release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) [year] [fullname]\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HeaderDefinitions   (src/.../index.ts)\n                        \n                        \n                            JsonValue   (src/.../index.ts)\n                        \n                        \n                            MatchFunction   (src/.../index.ts)\n                        \n                        \n                            Middleware   (src/.../index.ts)\n                        \n                        \n                            NextFunction   (src/.../index.ts)\n                        \n                        \n                            PathDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryDefinitions   (src/.../index.ts)\n                        \n                        \n                            Request   (src/.../index.ts)\n                        \n                        \n                            RequestBodyDefinition   (src/.../index.ts)\n                        \n                        \n                            RequestDefinition   (src/.../index.ts)\n                        \n                        \n                            RequestInfo   (src/.../index.ts)\n                        \n                        \n                            RequestMatcher   (src/.../index.ts)\n                        \n                        \n                            Response   (src/.../index.ts)\n                        \n                        \n                            ResponseBody   (src/.../index.ts)\n                        \n                        \n                            ResponseBodyDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseHeaders   (src/.../index.ts)\n                        \n                        \n                            StubbornOptions   (src/.../Stubborn.ts)\n                        \n                        \n                            Template   (src/.../index.ts)\n                        \n                        \n                            TemplateArray   (src/.../index.ts)\n                        \n                        \n                            TemplateFunction   (src/.../index.ts)\n                        \n                        \n                            TemplateObject   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/@types/index.ts\n    \n    \n        \n            \n                \n                    \n                    HeaderDefinitions\n                \n            \n            \n                \n                        Record | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonValue\n                \n            \n            \n                \n                        null | string | number | boolean | object\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatchFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Middleware\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PathDefinition\n                \n            \n            \n                \n                            null | string | RegExp | MatchFunction\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryDefinitions\n                \n            \n            \n                \n                        Record | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Request\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestBodyDefinition\n                \n            \n            \n                \n                            RequestDefinition\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestDefinition\n                \n            \n            \n                \n                        null | RegExp | MatchFunction | JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMatcher\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                            ServerResponse\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBody\n                \n            \n            \n                \n                            JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBodyDefinition\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseDefinition\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseHeaders\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Template\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject | TemplateArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateArray\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/Stubborn.ts\n    \n    \n        \n            \n                \n                    \n                    StubbornOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
