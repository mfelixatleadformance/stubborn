var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/BodyDefinitionArray.html",[0,0.883,1,1.038]],["body/interfaces/BodyDefinitionArray.html",[0,1.189,1,1.396,2,1.149,3,0.831,4,0.831,5,0.708,6,0.976,7,2.296,8,2.296,9,1.016,10,0.065,11,1.962,12,1.65,13,1.149,14,1.401,15,1.007,16,1.526,17,0.976,18,2.035,19,0.827,20,1.65,21,1.373,22,1.616,23,1.93,24,1.194,25,1.65,26,1.962,27,2.533,28,1.194,29,1.367,30,0.976,31,1.367,32,1.149,33,0.708,34,1.367,35,1.367,36,1.149,37,1.189,38,1.401,39,1.149,40,1.367,41,0.845,42,1.65,43,2.326,44,0.976,45,2.296,46,1.149,47,1.93,48,1.367,49,1.149,50,1.194,51,1.213,52,1.367,53,0.976,54,0.831,55,1.149,56,0.976,57,1.149,58,0.976,59,1.897,60,1.65,61,1.65,62,1.93,63,0.976,64,1.93,65,1.149,66,1.149,67,1.65,68,1.367,69,1.65,70,1.65,71,1.791,72,1.65,73,0.338,74,1.149,75,1.367,76,1.401,77,1.65,78,1.65,79,1.65,80,1.65,81,1.65,82,1.65,83,1.65,84,1.016,85,1.149,86,0.831,87,1.367,88,1.367,89,1.401,90,1.65,91,1.367,92,0.831,93,1.149,94,1.962,95,0.976,96,1.149,97,1.149,98,1.149,99,1.149,100,0.708,101,0.026,102,0.037,103,0.026]],["title/classes/Debugger.html",[104,0.883,105,1.706]],["body/classes/Debugger.html",[3,1.133,4,1.133,5,0.964,9,1.624,10,0.064,15,1.064,18,1.133,19,0.6,37,1.479,38,1.926,51,1.332,54,1.133,73,0.46,76,1.926,84,1.256,85,2.039,86,1.641,92,1.133,96,1.566,101,0.035,102,0.046,103,0.035,104,0.964,105,2.425,106,1.566,107,2.258,108,2.555,109,4.389,110,2.941,111,1.862,112,2.86,113,2.268,114,2.86,115,1.732,116,2.039,117,2.039,118,2.86,119,2.039,120,3.725,121,2.169,122,2.86,123,1.862,124,2.86,125,1.862,126,2.86,127,1.862,128,2.86,129,1.862,130,2.86,131,1.862,132,2.86,133,2.268,134,2.258,135,1.566,136,3.725,137,3.725,138,3.725,139,3.725,140,4.143,141,2.86,142,2.039,143,2.258,144,1.566,145,4.143,146,2.86,147,2.86,148,2.86,149,2.86,150,2.86,151,2.86,152,2.86,153,2.86,154,2.86,155,2.86,156,2.86,157,2.86,158,2.258,159,2.86]],["title/interfaces/DiffError.html",[0,0.883,100,0.883]],["body/interfaces/DiffError.html",[0,1.161,1,1.159,2,1.103,3,0.798,4,0.798,5,0.679,6,0.937,7,1.905,8,1.905,9,0.986,10,0.065,11,1.905,12,1.602,13,1.103,14,1.758,15,0.984,16,1.497,17,0.937,18,2.029,19,0.83,20,1.602,21,1.397,22,1.59,23,1.887,24,1.497,25,1.602,26,1.905,27,2.571,28,1.159,29,1.312,30,0.937,31,1.312,32,1.103,33,0.679,34,1.312,35,1.312,36,1.103,37,1.161,38,1.36,39,1.103,40,1.312,41,1.004,42,1.602,43,2.293,44,0.937,45,2.243,46,1.103,47,1.887,48,1.312,49,1.103,50,1.59,51,1.196,52,1.312,53,0.937,54,0.798,55,1.103,56,0.937,57,1.103,58,0.937,59,1.867,60,1.602,61,1.602,62,1.887,63,0.937,64,1.887,65,1.103,66,1.103,67,1.602,68,1.312,69,1.602,70,1.602,71,1.758,72,1.602,73,0.471,74,1.103,75,1.312,76,1.36,77,1.602,78,1.602,79,1.602,80,1.602,81,1.602,82,1.602,83,1.602,84,1.354,85,1.103,86,0.798,87,1.312,88,1.312,89,1.36,90,1.602,91,1.312,92,0.798,93,1.103,94,1.905,95,0.937,96,1.103,97,1.103,98,1.103,99,1.103,100,0.986,101,0.025,102,0.036,103,0.025,160,1.905]],["title/interfaces/JsonArray.html",[0,0.883,28,1.038]],["body/interfaces/JsonArray.html",[0,1.189,1,1.194,2,1.149,3,0.831,4,0.831,5,0.708,6,0.976,7,2.296,8,2.296,9,1.016,10,0.065,11,1.962,12,1.65,13,1.149,14,1.401,15,1.007,16,1.526,17,0.976,18,2.035,19,0.827,20,1.65,21,1.373,22,1.616,23,1.93,24,1.194,25,1.65,26,1.962,27,2.533,28,1.396,29,1.367,30,0.976,31,1.367,32,1.149,33,0.708,34,1.367,35,1.367,36,1.149,37,1.189,38,1.401,39,1.149,40,1.367,41,0.845,42,1.65,43,2.326,44,0.976,45,2.296,46,1.149,47,1.93,48,1.367,49,1.149,50,1.194,51,1.213,52,1.367,53,0.976,54,0.831,55,1.149,56,0.976,57,1.149,58,0.976,59,1.897,60,1.65,61,1.65,62,1.93,63,0.976,64,1.93,65,1.149,66,1.149,67,1.65,68,1.367,69,1.65,70,1.65,71,1.791,72,1.65,73,0.338,74,1.149,75,1.367,76,1.401,77,1.65,78,1.65,79,1.65,80,1.65,81,1.65,82,1.65,83,1.65,84,1.016,85,1.149,86,0.831,87,1.367,88,1.367,89,1.401,90,1.65,91,1.367,92,0.831,93,1.149,94,1.962,95,0.976,96,1.149,97,1.149,98,1.149,99,1.149,100,0.708,101,0.026,102,0.037,103,0.026]],["title/classes/Output.html",[104,0.883,133,1.434]],["body/classes/Output.html",[3,0.629,4,0.629,5,0.535,9,1.007,10,0.065,14,0.738,15,0.699,17,0.738,18,0.629,19,0.749,21,1.41,22,0.629,41,0.38,54,0.969,73,0.256,92,1.675,100,1.673,101,0.02,102,0.03,103,0.02,104,0.535,106,0.869,108,2.787,111,1.033,113,2.615,115,2.145,116,2.526,117,2.526,119,2.585,133,1.838,134,1.253,135,2.474,142,2.316,160,1.593,161,1.253,162,3.34,163,2.987,164,1.932,165,3.357,166,2.447,167,2.447,168,2.447,169,2.447,170,2.447,171,3.357,172,3.357,173,3.357,174,3.357,175,2.447,176,2.447,177,2.447,178,2.447,179,2.447,180,2.987,181,2.447,182,1.587,183,2.447,184,1.033,185,1.985,186,2.447,187,1.587,188,1.587,189,2.447,190,1.587,191,3.831,192,2.447,193,1.587,194,3.992,195,2.447,196,1.587,197,2.447,198,2.447,199,1.587,200,2.447,201,1.587,202,2.447,203,1.587,204,1.587,205,1.587,206,1.587,207,1.587,208,2.447,209,1.587,210,2.447,211,3.626,212,1.587,213,2.447,214,1.587,215,2.447,216,1.587,217,2.447,218,1.587,219,2.447,220,1.587,221,2.447,222,1.587,223,1.587,224,1.253,225,1.587,226,1.587,227,1.587,228,1.587,229,1.587,230,1.587,231,1.587,232,1.587,233,1.587,234,2.447,235,2.447,236,2.447,237,2.447,238,1.587,239,2.447,240,1.587,241,1.587,242,1.587,243,2.447,244,1.587,245,1.587,246,1.587,247,1.587,248,2.447,249,2.447,250,1.587,251,2.358,252,1.587,253,1.587,254,1.587,255,1.587,256,1.587,257,1.587,258,1.253,259,2.987,260,2.447,261,2.447,262,2.447,263,2.447,264,2.447,265,2.987,266,2.447,267,1.587,268,2.987,269,1.587,270,1.587,271,1.587,272,1.587,273,1.587,274,1.587,275,1.587,276,3.831,277,3.357,278,3.025,279,1.587,280,1.587,281,3.357,282,1.253,283,1.253]],["title/classes/Stubborn.html",[104,0.883,284,1.218]],["body/classes/Stubborn.html",[3,0.49,4,0.49,5,0.417,9,1.315,10,0.065,13,1.388,15,0.724,17,0.575,18,0.795,19,0.719,21,0.724,22,1.435,24,1.435,33,0.855,37,1.564,41,0.769,50,1.752,51,0.982,54,0.49,56,2.056,58,0.933,63,1.864,73,0.199,84,1.564,86,0.795,92,1.545,95,0.933,101,0.015,102,0.051,103,0.015,104,0.417,106,0.677,108,2.71,111,0.805,113,2.508,115,1.907,116,2.246,117,2.246,119,2.541,121,2.169,135,2.329,142,1.598,144,2.489,160,1.307,162,3.453,184,2.089,185,1.598,284,1.945,285,0.805,286,2.008,287,2.008,288,1.585,289,1.585,290,1.585,291,1.585,292,2.008,293,1.585,294,1.585,295,1.585,296,2.535,297,3.21,298,4.103,299,3.774,300,3.77,301,2.008,302,2.918,303,2.304,304,2.918,305,2.918,306,2.008,307,1.585,308,1.9,309,2.304,310,2.918,311,3.438,312,2.008,313,2.715,314,2.008,315,3.21,316,1.236,317,1.236,318,1.236,319,1.236,320,2.008,321,1.236,322,4.183,323,3.438,324,2.715,325,1.236,326,2.008,327,1.585,328,2.008,329,1.236,330,4.01,331,2.008,332,1.236,333,1.236,334,2.918,335,1.236,336,2.008,337,2.008,338,1.585,339,2.008,340,2.008,341,2.238,342,2.008,343,2.008,344,3.902,345,4.183,346,3.438,347,1.236,348,2.002,349,2.008,350,1.236,351,2.008,352,1.236,353,2.008,354,1.236,355,2.008,356,2.008,357,1.236,358,2.008,359,1.236,360,2.008,361,1.236,362,2.918,363,2.918,364,1.236,365,2.008,366,1.307,367,2.008,368,1.236,369,1.236,370,2.535,371,2.008,372,1.236,373,1.236,374,1.236,375,2.008,376,1.236,377,1.236,378,1.236,379,1.236,380,1.236,381,1.236,382,1.236,383,1.236,384,3.902,385,1.236,386,1.236,387,1.236,388,2.535,389,1.236,390,1.236,391,1.236,392,2.008,393,1.236,394,1.236,395,2.008,396,1.236,397,1.236,398,1.236,399,1.236]],["title/coverage.html",[400,2.776]],["body/coverage.html",[0,1.376,1,1.099,5,0.935,6,1.897,10,0.064,16,1.099,19,0.447,28,1.099,33,1.724,100,0.935,101,0.034,102,0.045,103,0.034,104,1.462,105,1.806,107,2.19,121,1.29,123,1.806,125,1.806,127,1.806,129,1.806,131,1.806,133,1.519,144,1.519,161,2.19,185,2.831,284,1.29,285,1.806,366,1.806,400,2.19,401,1.806,402,2.774,403,2.774,404,5.15,405,2.774,406,2.774,407,2.774,408,2.774,409,2.774,410,2.774,411,2.377,412,3.652,413,2.774,414,2.774,415,2.883,416,2.19,417,2.883,418,2.19,419,2.19,420,2.19,421,2.883,422,2.19,423,2.19,424,2.19,425,3.207,426,2.19,427,2.19,428,2.19,429,2.19,430,2.19,431,2.19,432,2.19,433,2.19,434,2.19,435,2.19,436,2.19,437,2.19,438,2.19,439,2.774,440,2.774]],["title/dependencies.html",[441,2.218,442,2.475]],["body/dependencies.html",[10,0.062,19,0.624,37,1.307,101,0.048,102,0.055,103,0.048,224,3.063,442,3.063,443,3.879,444,3.879,445,3.879,446,3.879,447,3.879,448,3.879,449,3.879,450,3.879,451,3.879]],["title/miscellaneous/enumerations.html",[452,0.633,453,2.475]],["body/miscellaneous/enumerations.html",[10,0.063,14,1.969,15,1.21,41,1.231,73,0.565,101,0.043,102,0.052,103,0.043,303,3.345,307,3.345,308,2.758,309,3.345,411,2.286,452,1.002,453,2.772,454,3.593,455,4.237,456,4.237,457,4.237,458,4.237,459,3.345,460,3.345,461,4.237,462,3.511,463,3.511,464,2.772,465,2.772]],["title/miscellaneous/functions.html",[452,0.633,466,2.475]],["body/miscellaneous/functions.html",[10,0.063,19,0.689,21,0.942,41,1.109,49,2.714,50,1.307,51,0.942,53,2.15,59,1.11,73,0.385,84,1.53,100,1.53,101,0.029,102,0.041,103,0.029,115,2.345,116,2.762,117,2.762,119,2.533,121,1.758,123,2.149,125,2.149,127,2.149,129,2.149,131,2.149,258,3.222,284,1.11,415,1.886,416,2.606,417,1.886,418,2.606,419,1.886,420,1.886,421,1.886,422,2.606,423,1.886,424,2.606,425,1.555,426,2.606,427,2.606,428,2.606,429,2.606,430,2.606,431,2.606,432,2.606,433,2.606,434,2.606,435,2.606,436,2.606,437,1.886,438,2.606,452,0.682,466,1.886,467,3.301,468,3.823,469,3.301,470,3.301,471,2.388,472,2.388,473,2.388,474,2.388,475,2.388,476,2.388,477,4.842,478,2.388,479,2.388,480,2.388,481,4.429,482,2.388,483,2.388,484,2.388,485,2.388,486,2.388,487,2.388,488,2.388,489,2.388,490,2.388,491,2.388,492,2.388,493,3.301,494,2.388,495,2.388,496,2.388,497,2.388,498,2.388,499,3.301,500,2.388,501,2.388]],["title/index.html",[73,0.357,341,1.444,502,1.752]],["body/index.html",[9,1.048,10,0.064,16,1.019,21,0.484,24,1.019,30,1.445,32,2.479,33,1.048,36,2.304,37,1.453,38,1.735,39,1.408,41,0.616,44,0.787,50,1.707,51,1.202,53,0.787,70,2.044,71,0.787,76,1.827,84,1.048,86,1.375,89,1.445,95,2.043,101,0.021,102,0.038,103,0.021,108,0.927,110,1.337,113,1.408,115,1.195,121,2.188,135,2.236,142,2.534,144,1.408,158,1.337,164,2.031,185,0.927,251,2.455,278,1.337,282,1.337,283,1.337,284,2.278,288,2.455,289,2.031,290,1.337,291,3.576,293,1.337,294,1.337,295,1.337,300,2.031,308,1.103,327,2.455,338,1.337,401,1.674,459,2.741,460,1.337,465,3.576,503,2.572,504,1.694,505,1.694,506,4.31,507,1.694,508,1.694,509,2.572,510,1.694,511,2.572,512,3.109,513,2.572,514,2.572,515,1.694,516,2.572,517,1.694,518,2.572,519,2.572,520,3.109,521,1.694,522,1.694,523,1.694,524,1.694,525,1.694,526,1.694,527,1.694,528,1.694,529,1.694,530,1.694,531,1.694,532,1.694,533,1.694,534,2.572,535,2.572,536,2.572,537,2.572,538,1.694,539,4.395,540,4.085,541,1.694,542,1.694,543,1.694,544,1.694,545,2.572,546,1.694,547,1.694,548,3.472,549,1.694,550,1.694,551,3.109,552,1.694,553,3.472,554,1.694,555,1.694,556,1.694,557,1.694,558,1.694,559,1.694,560,1.694,561,1.694,562,1.694,563,4.085,564,4.208,565,2.572,566,1.694,567,2.572,568,3.472,569,3.472,570,3.733,571,3.472,572,3.472,573,3.109,574,3.109,575,1.694,576,3.109,577,2.572,578,1.694,579,2.572,580,3.109,581,1.694,582,2.572,583,1.694,584,1.694,585,2.572,586,1.694,587,1.694,588,1.694,589,1.694,590,1.694,591,2.572,592,1.694,593,1.694,594,1.694,595,1.694,596,1.694,597,1.694,598,1.694,599,1.694,600,1.694,601,1.694,602,1.694,603,1.694,604,1.694,605,1.694,606,1.694,607,1.694,608,1.694,609,1.694,610,2.572,611,2.572,612,1.694,613,1.694,614,1.694,615,1.694,616,2.572,617,3.472,618,1.694,619,1.694,620,1.694,621,1.694,622,1.694,623,3.733,624,1.694,625,1.694,626,1.694,627,1.694,628,2.572,629,2.572,630,1.694,631,1.694,632,1.337,633,1.694,634,1.694,635,1.694,636,1.694,637,1.694,638,1.694]],["title/license.html",[341,1.444,502,1.752,639,1.752]],["body/license.html",[10,0.05,30,1.899,101,0.041,102,0.05,103,0.041,143,2.613,348,2.613,401,2.154,632,2.613,639,2.613,640,3.309,641,4.433,642,3.309,643,3.309,644,3.309,645,4.086,646,3.309,647,3.309,648,3.309,649,3.309,650,3.309,651,3.309,652,4.086,653,5,654,3.309,655,3.309,656,3.309,657,4.433,658,3.309,659,4.086,660,3.309,661,3.309,662,3.309,663,3.309,664,3.309,665,3.309,666,3.309,667,3.309,668,4.086,669,3.309,670,3.309,671,3.309,672,3.309,673,3.309,674,3.309,675,3.309,676,4.086,677,4.086,678,3.309,679,3.309,680,3.309,681,3.309,682,3.309,683,3.309,684,3.309,685,3.309,686,3.309,687,3.309,688,3.309,689,3.309,690,3.309,691,3.309,692,3.309,693,3.309,694,3.309,695,3.309,696,3.309,697,3.309,698,3.309,699,3.309,700,3.309,701,3.309,702,3.309,703,3.309,704,3.309,705,3.309,706,3.309]],["title/modules.html",[707,2.776]],["body/modules.html",[10,0.057,101,0.05,102,0.057,103,0.05,707,3.189]],["title/overview.html",[708,2.776]],["body/overview.html",[2,2.19,10,0.056,101,0.049,102,0.056,103,0.049,106,2.19,708,3.158,709,4,710,4]],["title/miscellaneous/typealiases.html",[452,0.633,711,3.135]],["body/miscellaneous/typealiases.html",[1,1.046,6,1.228,10,0.063,12,1.447,15,1.009,19,0.772,20,2.181,21,1.331,22,1.578,23,1.447,24,1.046,25,2.181,27,2.552,28,1.046,33,1.538,42,2.181,43,2.552,44,1.228,46,1.936,47,2.181,51,1.009,55,1.936,56,1.643,57,1.936,58,1.643,59,2.061,60,2.181,61,2.181,62,2.181,63,1.643,64,2.329,65,1.936,66,1.936,67,2.181,69,2.181,71,1.643,72,2.181,73,0.425,74,1.936,77,1.936,78,1.936,79,1.936,80,1.936,81,1.936,82,1.936,83,1.936,89,1.643,90,1.936,93,1.936,97,1.936,98,1.936,99,1.936,101,0.032,102,0.043,103,0.032,285,1.72,313,2.792,425,1.72,452,0.754,468,2.792,712,2.642,713,5.194,714,3.535,715,2.642,716,3.535,717,4.736]],["title/miscellaneous/variables.html",[452,0.633,718,2.475]],["body/miscellaneous/variables.html",[10,0.062,16,1.761,19,0.613,41,1.066,73,0.613,101,0.047,102,0.055,103,0.047,184,2.894,324,3.007,366,2.894,411,2.479,452,1.087,454,3.511,464,3.007,718,3.007,719,3.808,720,3.808,721,3.808,722,3.808]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":185,"title":{},"body":{"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["0/1",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":251,"title":{},"body":{"classes/Output.html":{},"index.html":{}}}],["1.0.4",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["11/21",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["14/28",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":247,"title":{},"body":{"classes/Output.html":{}}}],["200",{"_index":463,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3",{"_index":710,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":709,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["501",{"_index":465,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["52",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["_definitions",{"_index":494,"title":{},"body":{"miscellaneous/functions.html":{}}}],["_values",{"_index":493,"title":{},"body":{"miscellaneous/functions.html":{}}}],["above",{"_index":675,"title":{},"body":{"license.html":{}}}],["according",{"_index":614,"title":{},"body":{"index.html":{}}}],["action",{"_index":700,"title":{},"body":{"license.html":{}}}],["add",{"_index":164,"title":{},"body":{"classes/Output.html":{},"index.html":{}}}],["add(lines",{"_index":186,"title":{},"body":{"classes/Output.html":{}}}],["added",{"_index":574,"title":{},"body":{"index.html":{}}}],["addition",{"_index":165,"title":{},"body":{"classes/Output.html":{}}}],["addition(text",{"_index":189,"title":{},"body":{"classes/Output.html":{}}}],["additional",{"_index":600,"title":{},"body":{"index.html":{}}}],["additionlabel",{"_index":166,"title":{},"body":{"classes/Output.html":{}}}],["additionlabel(error",{"_index":192,"title":{},"body":{"classes/Output.html":{}}}],["addroute",{"_index":301,"title":{},"body":{"classes/Stubborn.html":{}}}],["addroute(route",{"_index":320,"title":{},"body":{"classes/Stubborn.html":{}}}],["affected",{"_index":340,"title":{},"body":{"classes/Stubborn.html":{}}}],["afterall(async",{"_index":557,"title":{},"body":{"index.html":{}}}],["aftereach",{"_index":561,"title":{},"body":{"index.html":{}}}],["against",{"_index":535,"title":{},"body":{"index.html":{}}}],["agent",{"_index":602,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":712,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["always",{"_index":592,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":666,"title":{},"body":{"license.html":{}}}],["api",{"_index":506,"title":{},"body":{"index.html":{}}}],["args",{"_index":346,"title":{},"body":{"classes/Stubborn.html":{}}}],["arising",{"_index":704,"title":{},"body":{"license.html":{}}}],["array",{"_index":8,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["array.isarray(lines",{"_index":225,"title":{},"body":{"classes/Output.html":{}}}],["associated",{"_index":654,"title":{},"body":{"license.html":{}}}],["async",{"_index":564,"title":{},"body":{"index.html":{}}}],["authors",{"_index":693,"title":{},"body":{"license.html":{}}}],["await",{"_index":291,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["aweight",{"_index":265,"title":{},"body":{"classes/Output.html":{}}}],["b",{"_index":258,"title":{},"body":{"classes/Output.html":{},"miscellaneous/functions.html":{}}}],["based",{"_index":514,"title":{},"body":{"index.html":{}}}],["basically",{"_index":508,"title":{},"body":{"index.html":{}}}],["beforeall(async",{"_index":555,"title":{},"body":{"index.html":{}}}],["between",{"_index":607,"title":{},"body":{"index.html":{}}}],["body",{"_index":37,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"dependencies.html":{},"index.html":{}}}],["bodydefinition",{"_index":63,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionarray",{"_index":1,"title":{"interfaces/BodyDefinitionArray.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionobject",{"_index":61,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionprimitive",{"_index":60,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionvalue",{"_index":62,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["bodydiff",{"_index":123,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["bodydiff(definitions",{"_index":474,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bodydiff(route.getbody",{"_index":155,"title":{},"body":{"classes/Debugger.html":{}}}],["boolean",{"_index":23,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["break",{"_index":278,"title":{},"body":{"classes/Output.html":{},"index.html":{}}}],["breaking",{"_index":549,"title":{},"body":{"index.html":{}}}],["buffer",{"_index":152,"title":{},"body":{"classes/Debugger.html":{}}}],["bweight",{"_index":268,"title":{},"body":{"classes/Output.html":{}}}],["c",{"_index":642,"title":{},"body":{"license.html":{}}}],["call",{"_index":617,"title":{},"body":{"index.html":{}}}],["called",{"_index":613,"title":{},"body":{"index.html":{}}}],["case",{"_index":276,"title":{},"body":{"classes/Output.html":{}}}],["cat",{"_index":197,"title":{},"body":{"classes/Output.html":{}}}],["cat.slice(1",{"_index":231,"title":{},"body":{"classes/Output.html":{}}}],["cat[0].touppercase",{"_index":230,"title":{},"body":{"classes/Output.html":{}}}],["category",{"_index":167,"title":{},"body":{"classes/Output.html":{}}}],["category(cat",{"_index":195,"title":{},"body":{"classes/Output.html":{}}}],["chalk",{"_index":224,"title":{},"body":{"classes/Output.html":{},"dependencies.html":{}}}],["change",{"_index":545,"title":{},"body":{"index.html":{}}}],["charge",{"_index":649,"title":{},"body":{"license.html":{}}}],["checkextra",{"_index":426,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checkextra(definitions",{"_index":476,"title":{},"body":{"miscellaneous/functions.html":{}}}],["checkmissing",{"_index":427,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checkmissing(definitions",{"_index":478,"title":{},"body":{"miscellaneous/functions.html":{}}}],["checkout",{"_index":624,"title":{},"body":{"index.html":{}}}],["checkparameters",{"_index":422,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checkparameters(definition",{"_index":490,"title":{},"body":{"miscellaneous/functions.html":{}}}],["checkvalue",{"_index":428,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checkvalue(definition",{"_index":479,"title":{},"body":{"miscellaneous/functions.html":{}}}],["checkvalues",{"_index":429,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checkvalues(definitions",{"_index":480,"title":{},"body":{"miscellaneous/functions.html":{}}}],["claim",{"_index":696,"title":{},"body":{"license.html":{}}}],["class",{"_index":104,"title":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{}}}],["classes",{"_index":106,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"overview.html":{}}}],["clean",{"_index":559,"title":{},"body":{"index.html":{}}}],["clear",{"_index":302,"title":{},"body":{"classes/Stubborn.html":{}}}],["cleared",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":546,"title":{},"body":{"index.html":{}}}],["color",{"_index":223,"title":{},"body":{"classes/Output.html":{}}}],["color.green",{"_index":244,"title":{},"body":{"classes/Output.html":{}}}],["color.red",{"_index":245,"title":{},"body":{"classes/Output.html":{}}}],["commit",{"_index":630,"title":{},"body":{"index.html":{}}}],["compare",{"_index":596,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":674,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":615,"title":{},"body":{"index.html":{}}}],["connection",{"_index":705,"title":{},"body":{"license.html":{}}}],["connexion",{"_index":603,"title":{},"body":{"index.html":{}}}],["console",{"_index":158,"title":{},"body":{"classes/Debugger.html":{},"index.html":{}}}],["console.log(out.render",{"_index":159,"title":{},"body":{"classes/Debugger.html":{}}}],["const",{"_index":142,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["constants",{"_index":17,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["constructor",{"_index":111,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["constructor(options",{"_index":312,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor(output",{"_index":182,"title":{},"body":{"classes/Output.html":{}}}],["constructor(private",{"_index":134,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{}}}],["constructor(request",{"_index":112,"title":{},"body":{"classes/Debugger.html":{}}}],["content",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["contract",{"_index":701,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":519,"title":{},"body":{"index.html":{}}}],["copies",{"_index":668,"title":{},"body":{"license.html":{}}}],["copy",{"_index":652,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":641,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":400,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":330,"title":{},"body":{"classes/Stubborn.html":{}}}],["createserver",{"_index":367,"title":{},"body":{"classes/Stubborn.html":{}}}],["currenttab",{"_index":163,"title":{},"body":{"classes/Output.html":{}}}],["d",{"_index":526,"title":{},"body":{"index.html":{}}}],["damages",{"_index":697,"title":{},"body":{"license.html":{}}}],["deal",{"_index":656,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":706,"title":{},"body":{"license.html":{}}}],["debugger",{"_index":105,"title":{"classes/Debugger.html":{}},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["def",{"_index":499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":184,"title":{},"body":{"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/variables.html":{}}}],["defaultheaders",{"_index":371,"title":{},"body":{"classes/Stubborn.html":{}}}],["defined",{"_index":113,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["definition",{"_index":50,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["definitionmatcher",{"_index":43,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["definitions",{"_index":53,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["definitionvalue",{"_index":46,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["delete",{"_index":303,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["delete(path",{"_index":328,"title":{},"body":{"classes/Stubborn.html":{}}}],["dependencies",{"_index":442,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["describe('test",{"_index":554,"title":{},"body":{"index.html":{}}}],["description",{"_index":323,"title":{},"body":{"classes/Stubborn.html":{}}}],["dev",{"_index":524,"title":{},"body":{"index.html":{}}}],["diff",{"_index":606,"title":{},"body":{"index.html":{}}}],["diff/bodydiff",{"_index":124,"title":{},"body":{"classes/Debugger.html":{}}}],["diff/headersdiff",{"_index":126,"title":{},"body":{"classes/Debugger.html":{}}}],["diff/methoddiff",{"_index":128,"title":{},"body":{"classes/Debugger.html":{}}}],["diff/pathdiff",{"_index":130,"title":{},"body":{"classes/Debugger.html":{}}}],["diff/querydiff",{"_index":132,"title":{},"body":{"classes/Debugger.html":{}}}],["diff_types",{"_index":14,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"miscellaneous/enumerations.html":{}}}],["diff_types.extra",{"_index":260,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.extra].includes(e.type",{"_index":271,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.fail_equality",{"_index":261,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.fail_function",{"_index":263,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.fail_matching",{"_index":262,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.invalid_value_type",{"_index":264,"title":{},"body":{"classes/Output.html":{}}}],["diff_types.missing",{"_index":259,"title":{},"body":{"classes/Output.html":{}}}],["differencekeys",{"_index":430,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["differencekeys(a",{"_index":482,"title":{},"body":{"miscellaneous/functions.html":{}}}],["differror",{"_index":100,"title":{"interfaces/DiffError.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["distribute",{"_index":664,"title":{},"body":{"license.html":{}}}],["doc",{"_index":629,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":401,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["draft",{"_index":638,"title":{},"body":{"index.html":{}}}],["dyson",{"_index":511,"title":{},"body":{"index.html":{}}}],["each",{"_index":34,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["element",{"_index":35,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["emitter",{"_index":296,"title":{},"body":{"classes/Stubborn.html":{}}}],["enumerations",{"_index":453,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":91,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["error",{"_index":194,"title":{},"body":{"classes/Output.html":{}}}],["error.definition",{"_index":237,"title":{},"body":{"classes/Output.html":{}}}],["error.path",{"_index":281,"title":{},"body":{"classes/Output.html":{}}}],["error.type",{"_index":275,"title":{},"body":{"classes/Output.html":{}}}],["error.value",{"_index":235,"title":{},"body":{"classes/Output.html":{}}}],["erroreq",{"_index":168,"title":{},"body":{"classes/Output.html":{}}}],["erroreq(error",{"_index":198,"title":{},"body":{"classes/Output.html":{}}}],["errorext",{"_index":169,"title":{},"body":{"classes/Output.html":{}}}],["errorext(error",{"_index":200,"title":{},"body":{"classes/Output.html":{}}}],["errormiss",{"_index":170,"title":{},"body":{"classes/Output.html":{}}}],["errormiss(error",{"_index":202,"title":{},"body":{"classes/Output.html":{}}}],["errors",{"_index":211,"title":{},"body":{"classes/Output.html":{}}}],["errors.foreach((e",{"_index":270,"title":{},"body":{"classes/Output.html":{}}}],["errors.length",{"_index":248,"title":{},"body":{"classes/Output.html":{}}}],["errors.pop",{"_index":254,"title":{},"body":{"classes/Output.html":{}}}],["errors.sort((a",{"_index":257,"title":{},"body":{"classes/Output.html":{}}}],["etc",{"_index":39,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["event",{"_index":348,"title":{},"body":{"classes/Stubborn.html":{},"license.html":{}}}],["eventemitter",{"_index":315,"title":{},"body":{"classes/Stubborn.html":{}}}],["events",{"_index":366,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ex",{"_index":538,"title":{},"body":{"index.html":{}}}],["exactly",{"_index":536,"title":{},"body":{"index.html":{}}}],["example",{"_index":286,"title":{},"body":{"classes/Stubborn.html":{}}}],["expect(res).toreplywith(status_codes.success",{"_index":589,"title":{},"body":{"index.html":{}}}],["expect(res.body).toequal",{"_index":295,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["expect(res.body).toequal(body",{"_index":566,"title":{},"body":{"index.html":{}}}],["expect(res.calls.length).tobe(1",{"_index":621,"title":{},"body":{"index.html":{}}}],["expect(res.calls[0]).toequal",{"_index":622,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).tobe(501",{"_index":611,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(200",{"_index":582,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(501",{"_index":573,"title":{},"body":{"index.html":{}}}],["expected",{"_index":283,"title":{},"body":{"classes/Output.html":{},"index.html":{}}}],["export",{"_index":18,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["express",{"_index":684,"title":{},"body":{"license.html":{}}}],["extends",{"_index":7,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["external",{"_index":505,"title":{},"body":{"index.html":{}}}],["extra",{"_index":460,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["fact",{"_index":542,"title":{},"body":{"index.html":{}}}],["fail_equality",{"_index":456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fail_function",{"_index":458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fail_matching",{"_index":457,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["false",{"_index":572,"title":{},"body":{"index.html":{}}}],["faq",{"_index":518,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{}}}],["files",{"_index":655,"title":{},"body":{"license.html":{}}}],["find",{"_index":595,"title":{},"body":{"index.html":{}}}],["finderrors",{"_index":431,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["finderrors(definitions",{"_index":483,"title":{},"body":{"miscellaneous/functions.html":{}}}],["finderrorsobject",{"_index":432,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["finderrorsobject(definitions",{"_index":484,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fitness",{"_index":689,"title":{},"body":{"license.html":{}}}],["follow",{"_index":634,"title":{},"body":{"index.html":{}}}],["following",{"_index":673,"title":{},"body":{"license.html":{}}}],["formatdifferror",{"_index":433,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["formatdifferror(undefined",{"_index":485,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formatpath",{"_index":434,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["formatpath(path",{"_index":486,"title":{},"body":{"miscellaneous/functions.html":{}}}],["free",{"_index":648,"title":{},"body":{"license.html":{}}}],["fullname",{"_index":644,"title":{},"body":{"license.html":{}}}],["function",{"_index":33,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":466,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":671,"title":{},"body":{"license.html":{}}}],["generic",{"_index":31,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["get(path",{"_index":331,"title":{},"body":{"classes/Stubborn.html":{}}}],["getinfo",{"_index":109,"title":{},"body":{"classes/Debugger.html":{}}}],["getorigin",{"_index":304,"title":{},"body":{"classes/Stubborn.html":{}}}],["getport",{"_index":305,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport",{"_index":368,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport(this.server",{"_index":380,"title":{},"body":{"classes/Stubborn.html":{}}}],["getting",{"_index":502,"title":{"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":623,"title":{},"body":{"index.html":{}}}],["github",{"_index":637,"title":{},"body":{"index.html":{}}}],["go",{"_index":636,"title":{},"body":{"index.html":{}}}],["got(`${sb.getorigin",{"_index":292,"title":{},"body":{"classes/Stubborn.html":{}}}],["granted",{"_index":647,"title":{},"body":{"license.html":{}}}],["hapi/accept",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["hardcoded",{"_index":552,"title":{},"body":{"index.html":{}}}],["hash",{"_index":85,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["header",{"_index":36,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["headerdefinition",{"_index":57,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":76,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["headersdefinition",{"_index":58,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["headersdiff",{"_index":125,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["headersdiff(_definitions",{"_index":492,"title":{},"body":{"miscellaneous/functions.html":{}}}],["headersdiff(route.getheaders",{"_index":149,"title":{},"body":{"classes/Debugger.html":{}}}],["help",{"_index":594,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":646,"title":{},"body":{"license.html":{}}}],["holders",{"_index":694,"title":{},"body":{"license.html":{}}}],["host",{"_index":370,"title":{},"body":{"classes/Stubborn.html":{}}}],["hot",{"_index":530,"title":{},"body":{"index.html":{}}}],["http",{"_index":13,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{}}}],["http://${this.options.host}:${this.getport",{"_index":381,"title":{},"body":{"classes/Stubborn.html":{}}}],["identifier",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":568,"title":{},"body":{"index.html":{}}}],["implied",{"_index":685,"title":{},"body":{"license.html":{}}}],["import",{"_index":9,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["included",{"_index":678,"title":{},"body":{"license.html":{}}}],["including",{"_index":659,"title":{},"body":{"license.html":{}}}],["incomingmessage",{"_index":11,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["index",{"_index":73,"title":{"index.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["initialized",{"_index":336,"title":{},"body":{"classes/Stubborn.html":{}}}],["install",{"_index":522,"title":{},"body":{"index.html":{}}}],["installation",{"_index":516,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":151,"title":{},"body":{"classes/Debugger.html":{}}}],["interface",{"_index":0,"title":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"overview.html":{}}}],["intersectkeys",{"_index":435,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["intersectkeys(a",{"_index":487,"title":{},"body":{"miscellaneous/functions.html":{}}}],["invalid_value_type",{"_index":461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["it('should",{"_index":563,"title":{},"body":{"index.html":{}}}],["json",{"_index":293,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["jsonarray",{"_index":28,"title":{"interfaces/JsonArray.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["jsonobject",{"_index":25,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["jsonprimitive",{"_index":20,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["jsonvalue",{"_index":27,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["key",{"_index":70,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["keystolowercase",{"_index":418,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["keystolowercase(o",{"_index":495,"title":{},"body":{"miscellaneous/functions.html":{}}}],["kind",{"_index":683,"title":{},"body":{"license.html":{}}}],["know",{"_index":612,"title":{},"body":{"index.html":{}}}],["liability",{"_index":698,"title":{},"body":{"license.html":{}}}],["liable",{"_index":695,"title":{},"body":{"license.html":{}}}],["license",{"_index":639,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":660,"title":{},"body":{"license.html":{}}}],["limited",{"_index":686,"title":{},"body":{"license.html":{}}}],["line:no",{"_index":157,"title":{},"body":{"classes/Debugger.html":{}}}],["lines",{"_index":188,"title":{},"body":{"classes/Output.html":{}}}],["lines.foreach(line",{"_index":226,"title":{},"body":{"classes/Output.html":{}}}],["listener",{"_index":345,"title":{},"body":{"classes/Stubborn.html":{}}}],["listening",{"_index":342,"title":{},"body":{"classes/Stubborn.html":{}}}],["literal",{"_index":717,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":531,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":374,"title":{},"body":{"classes/Stubborn.html":{}}}],["lodash",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":605,"title":{},"body":{"index.html":{}}}],["logdiff",{"_index":110,"title":{},"body":{"classes/Debugger.html":{},"index.html":{}}}],["logdiff(route",{"_index":120,"title":{},"body":{"classes/Debugger.html":{}}}],["logdiffon501",{"_index":438,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["logdiffon501(sb",{"_index":609,"title":{},"body":{"index.html":{}}}],["logdiffon501(stubborn",{"_index":497,"title":{},"body":{"miscellaneous/functions.html":{}}}],["m",{"_index":631,"title":{},"body":{"index.html":{}}}],["master",{"_index":625,"title":{},"body":{"index.html":{}}}],["match",{"_index":32,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["matched",{"_index":534,"title":{},"body":{"index.html":{}}}],["matches",{"_index":567,"title":{},"body":{"index.html":{}}}],["matchfunction",{"_index":42,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["matching",{"_index":102,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meets",{"_index":510,"title":{},"body":{"index.html":{}}}],["member",{"_index":26,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["merchantability",{"_index":688,"title":{},"body":{"license.html":{}}}],["merge",{"_index":663,"title":{},"body":{"license.html":{}}}],["method",{"_index":86,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["methoddefinition",{"_index":55,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["methoddiff",{"_index":127,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["methoddiff(def",{"_index":498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methoddiff(route.getmethod",{"_index":146,"title":{},"body":{"classes/Debugger.html":{}}}],["methods",{"_index":15,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["middleware",{"_index":93,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":452,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":599,"title":{},"body":{"index.html":{}}}],["missing",{"_index":459,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["mit",{"_index":640,"title":{},"body":{"license.html":{}}}],["mock",{"_index":504,"title":{},"body":{"index.html":{}}}],["modify",{"_index":662,"title":{},"body":{"license.html":{}}}],["modules",{"_index":707,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":116,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":560,"title":{},"body":{"index.html":{}}}],["new",{"_index":144,"title":{},"body":{"classes/Debugger.html":{},"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["newline",{"_index":171,"title":{},"body":{"classes/Output.html":{}}}],["next",{"_index":96,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["nextfunction",{"_index":90,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["nock",{"_index":509,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":692,"title":{},"body":{"license.html":{}}}],["not_implemented",{"_index":464,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notice",{"_index":676,"title":{},"body":{"license.html":{}}}],["npm",{"_index":521,"title":{},"body":{"index.html":{}}}],["null",{"_index":24,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":22,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["o",{"_index":496,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":324,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":373,"title":{},"body":{"classes/Stubborn.html":{}}}],["objectorarray",{"_index":714,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["obtaining",{"_index":651,"title":{},"body":{"license.html":{}}}],["off(event",{"_index":343,"title":{},"body":{"classes/Stubborn.html":{}}}],["on(event",{"_index":349,"title":{},"body":{"classes/Stubborn.html":{}}}],["once",{"_index":306,"title":{},"body":{"classes/Stubborn.html":{}}}],["once(event",{"_index":351,"title":{},"body":{"classes/Stubborn.html":{}}}],["one",{"_index":537,"title":{},"body":{"index.html":{}}}],["optional",{"_index":117,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":297,"title":{},"body":{"classes/Stubborn.html":{}}}],["options.port",{"_index":337,"title":{},"body":{"classes/Stubborn.html":{}}}],["origin",{"_index":334,"title":{},"body":{"classes/Stubborn.html":{}}}],["otherwise",{"_index":703,"title":{},"body":{"license.html":{}}}],["out",{"_index":143,"title":{},"body":{"classes/Debugger.html":{},"license.html":{}}}],["out.rendererrors",{"_index":145,"title":{},"body":{"classes/Debugger.html":{}}}],["out.rendererrors('body",{"_index":154,"title":{},"body":{"classes/Debugger.html":{}}}],["out.rendererrors('path",{"_index":147,"title":{},"body":{"classes/Debugger.html":{}}}],["output",{"_index":133,"title":{"classes/Output.html":{}},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"coverage.html":{}}}],["overview",{"_index":708,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pach",{"_index":355,"title":{},"body":{"classes/Stubborn.html":{}}}],["package",{"_index":441,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":570,"title":{},"body":{"index.html":{}}}],["param",{"_index":384,"title":{},"body":{"classes/Stubborn.html":{}}}],["parameter",{"_index":539,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":115,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parseint(value",{"_index":587,"title":{},"body":{"index.html":{}}}],["parser",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":52,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["particular",{"_index":690,"title":{},"body":{"license.html":{}}}],["patch",{"_index":307,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["patch(path",{"_index":353,"title":{},"body":{"classes/Stubborn.html":{}}}],["path",{"_index":84,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["path).setbody(body",{"_index":388,"title":{},"body":{"classes/Stubborn.html":{}}}],["pathdefinition",{"_index":56,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["pathdiff",{"_index":129,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["pathdiff(def",{"_index":500,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pathdiff(route.getpath",{"_index":148,"title":{},"body":{"classes/Debugger.html":{}}}],["permission",{"_index":645,"title":{},"body":{"license.html":{}}}],["permit",{"_index":669,"title":{},"body":{"license.html":{}}}],["person",{"_index":650,"title":{},"body":{"license.html":{}}}],["persons",{"_index":670,"title":{},"body":{"license.html":{}}}],["picked",{"_index":550,"title":{},"body":{"index.html":{}}}],["port",{"_index":298,"title":{},"body":{"classes/Stubborn.html":{}}}],["portions",{"_index":680,"title":{},"body":{"license.html":{}}}],["possible",{"_index":48,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["post",{"_index":308,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["post(path",{"_index":356,"title":{},"body":{"classes/Stubborn.html":{}}}],["prefix",{"_index":477,"title":{},"body":{"miscellaneous/functions.html":{}}}],["private",{"_index":162,"title":{},"body":{"classes/Output.html":{},"classes/Stubborn.html":{}}}],["promise",{"_index":362,"title":{},"body":{"classes/Stubborn.html":{}}}],["promise(resolve",{"_index":392,"title":{},"body":{"classes/Stubborn.html":{}}}],["properties",{"_index":160,"title":{},"body":{"interfaces/DiffError.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["property",{"_index":618,"title":{},"body":{"index.html":{}}}],["provided",{"_index":681,"title":{},"body":{"license.html":{}}}],["public",{"_index":108,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["publish",{"_index":632,"title":{},"body":{"index.html":{},"license.html":{}}}],["pull",{"_index":626,"title":{},"body":{"index.html":{}}}],["pulltab",{"_index":172,"title":{},"body":{"classes/Output.html":{}}}],["purpose",{"_index":691,"title":{},"body":{"license.html":{}}}],["push",{"_index":633,"title":{},"body":{"index.html":{}}}],["pushtab",{"_index":173,"title":{},"body":{"classes/Output.html":{}}}],["put",{"_index":309,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["put(path",{"_index":358,"title":{},"body":{"classes/Stubborn.html":{}}}],["q",{"_index":591,"title":{},"body":{"index.html":{}}}],["query",{"_index":38,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["querydefinition",{"_index":66,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["querydiff",{"_index":131,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["querydiff(definitions",{"_index":491,"title":{},"body":{"miscellaneous/functions.html":{}}}],["querydiff(route.getqueryparameters",{"_index":150,"title":{},"body":{"classes/Debugger.html":{}}}],["queryparameterdefinition",{"_index":65,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["queryparameterdefinitionprimitives",{"_index":64,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["randomly",{"_index":339,"title":{},"body":{"classes/Stubborn.html":{}}}],["rebase",{"_index":627,"title":{},"body":{"index.html":{}}}],["rec",{"_index":416,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["rec(definitions",{"_index":475,"title":{},"body":{"miscellaneous/functions.html":{}}}],["received",{"_index":282,"title":{},"body":{"classes/Output.html":{},"index.html":{}}}],["receiving",{"_index":598,"title":{},"body":{"index.html":{}}}],["record",{"_index":59,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["regex",{"_index":583,"title":{},"body":{"index.html":{}}}],["regexp",{"_index":44,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":322,"title":{},"body":{"classes/Stubborn.html":{}}}],["release",{"_index":520,"title":{},"body":{"index.html":{}}}],["remove",{"_index":326,"title":{},"body":{"classes/Stubborn.html":{}}}],["render",{"_index":174,"title":{},"body":{"classes/Output.html":{}}}],["rendererror",{"_index":175,"title":{},"body":{"classes/Output.html":{}}}],["rendererror(error",{"_index":208,"title":{},"body":{"classes/Output.html":{}}}],["rendererrors",{"_index":176,"title":{},"body":{"classes/Output.html":{}}}],["rendererrors(cat",{"_index":210,"title":{},"body":{"classes/Output.html":{}}}],["rendermultipleserrors",{"_index":177,"title":{},"body":{"classes/Output.html":{}}}],["rendermultipleserrors(errors",{"_index":213,"title":{},"body":{"classes/Output.html":{}}}],["renderoneerror",{"_index":178,"title":{},"body":{"classes/Output.html":{}}}],["renderoneerror(errors",{"_index":215,"title":{},"body":{"classes/Output.html":{}}}],["repeat(this.currenttab",{"_index":246,"title":{},"body":{"classes/Output.html":{}}}],["req",{"_index":94,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["request",{"_index":51,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["request('/?page=2",{"_index":588,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin",{"_index":565,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin()}?page=1&limit=10",{"_index":575,"title":{},"body":{"index.html":{}}}],["request(`${sb.getorigin()}?page=2",{"_index":576,"title":{},"body":{"index.html":{}}}],["request(sb.getorigin",{"_index":610,"title":{},"body":{"index.html":{}}}],["requestbody",{"_index":79,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestdiff",{"_index":424,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requestdiff(route",{"_index":501,"title":{},"body":{"miscellaneous/functions.html":{}}}],["requesthash",{"_index":81,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestheaders",{"_index":77,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestinfo",{"_index":83,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestmatcher",{"_index":97,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestmethod",{"_index":82,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestpath",{"_index":80,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestquery",{"_index":78,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requests",{"_index":513,"title":{},"body":{"index.html":{}}}],["res",{"_index":95,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["resolve",{"_index":395,"title":{},"body":{"classes/Stubborn.html":{}}}],["resolved",{"_index":363,"title":{},"body":{"classes/Stubborn.html":{}}}],["respond",{"_index":540,"title":{},"body":{"index.html":{}}}],["response",{"_index":89,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["responsebody",{"_index":99,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["responsedefinition",{"_index":74,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["responseheaders",{"_index":98,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["responses",{"_index":507,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":658,"title":{},"body":{"license.html":{}}}],["result",{"_index":101,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":103,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":135,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["returned",{"_index":597,"title":{},"body":{"index.html":{}}}],["returns",{"_index":119,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":661,"title":{},"body":{"license.html":{}}}],["route",{"_index":121,"title":{},"body":{"classes/Debugger.html":{},"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["router",{"_index":299,"title":{},"body":{"classes/Stubborn.html":{}}}],["routes",{"_index":327,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["save",{"_index":523,"title":{},"body":{"index.html":{}}}],["sb",{"_index":289,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.clear",{"_index":562,"title":{},"body":{"index.html":{}}}],["sb.get",{"_index":577,"title":{},"body":{"index.html":{}}}],["sb.get('/').setqueryparameters",{"_index":569,"title":{},"body":{"index.html":{}}}],["sb.get('/').setresponsebody",{"_index":290,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.post",{"_index":584,"title":{},"body":{"index.html":{}}}],["sb.start",{"_index":556,"title":{},"body":{"index.html":{}}}],["sb.stop",{"_index":558,"title":{},"body":{"index.html":{}}}],["scope",{"_index":68,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["searchparams",{"_index":87,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["see",{"_index":590,"title":{},"body":{"index.html":{}}}],["sell",{"_index":667,"title":{},"body":{"license.html":{}}}],["send",{"_index":547,"title":{},"body":{"index.html":{}}}],["sent",{"_index":544,"title":{},"body":{"index.html":{}}}],["separate",{"_index":515,"title":{},"body":{"index.html":{}}}],["server",{"_index":300,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["serverresponse",{"_index":12,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["set",{"_index":338,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["setheaders",{"_index":604,"title":{},"body":{"index.html":{}}}],["setheaders(null",{"_index":579,"title":{},"body":{"index.html":{}}}],["setqueryparameters",{"_index":578,"title":{},"body":{"index.html":{}}}],["setresponsebody('content",{"_index":620,"title":{},"body":{"index.html":{}}}],["setup",{"_index":619,"title":{},"body":{"index.html":{}}}],["shall",{"_index":677,"title":{},"body":{"license.html":{}}}],["slug",{"_index":585,"title":{},"body":{"index.html":{}}}],["software",{"_index":653,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["specify",{"_index":40,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["src/.../bodydiff.ts",{"_index":467,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":454,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../headersdiff.ts",{"_index":470,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../index.ts",{"_index":713,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../methoddiff.ts",{"_index":471,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pathdiff.ts",{"_index":472,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../querydiff.ts",{"_index":469,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../requestdiff.ts",{"_index":473,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../stubborn.ts",{"_index":715,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../utils.ts",{"_index":468,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/@types/index.ts",{"_index":6,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/constants.ts",{"_index":411,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/debug/debugger.ts",{"_index":107,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["src/debug/debugger.ts:10",{"_index":114,"title":{},"body":{"classes/Debugger.html":{}}}],["src/debug/debugger.ts:13",{"_index":118,"title":{},"body":{"classes/Debugger.html":{}}}],["src/debug/debugger.ts:24",{"_index":122,"title":{},"body":{"classes/Debugger.html":{}}}],["src/debug/output.ts",{"_index":161,"title":{},"body":{"classes/Output.html":{},"coverage.html":{}}}],["src/debug/output.ts:10",{"_index":187,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:130",{"_index":209,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:153",{"_index":218,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:157",{"_index":193,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:21",{"_index":196,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:27",{"_index":204,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:31",{"_index":199,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:42",{"_index":203,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:49",{"_index":201,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:56",{"_index":207,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:60",{"_index":206,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:64",{"_index":205,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:68",{"_index":190,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:7",{"_index":183,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:72",{"_index":220,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:76",{"_index":222,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:80",{"_index":212,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:93",{"_index":216,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:98",{"_index":214,"title":{},"body":{"classes/Output.html":{}}}],["src/diff/bodydiff.ts",{"_index":415,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/diff/headersdiff.ts",{"_index":417,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/diff/methoddiff.ts",{"_index":419,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/diff/pathdiff.ts",{"_index":420,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/diff/querydiff.ts",{"_index":421,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/diff/requestdiff.ts",{"_index":423,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/diff/utils.ts",{"_index":425,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/route.ts",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["src/stubborn.ts",{"_index":285,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/stubborn.ts:103",{"_index":354,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:113",{"_index":357,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:123",{"_index":359,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:131",{"_index":321,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:139",{"_index":361,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:154",{"_index":364,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:160",{"_index":350,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:164",{"_index":352,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:168",{"_index":347,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:29",{"_index":319,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:30",{"_index":317,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:31",{"_index":318,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:32",{"_index":316,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:33",{"_index":314,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:56",{"_index":335,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:64",{"_index":333,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:71",{"_index":325,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:84",{"_index":329,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:93",{"_index":332,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/utils.ts",{"_index":437,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":310,"title":{},"body":{"classes/Stubborn.html":{}}}],["start(port",{"_index":360,"title":{},"body":{"classes/Stubborn.html":{}}}],["started",{"_index":341,"title":{"index.html":{},"license.html":{}},"body":{"classes/Stubborn.html":{}}}],["statements",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["status_codes",{"_index":455,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":75,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["stop",{"_index":311,"title":{},"body":{"classes/Stubborn.html":{}}}],["stopped",{"_index":365,"title":{},"body":{"classes/Stubborn.html":{}}}],["strictly",{"_index":512,"title":{},"body":{"index.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["string(this.request.body",{"_index":153,"title":{},"body":{"classes/Debugger.html":{}}}],["stringify",{"_index":436,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stringify(val",{"_index":488,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stubborn",{"_index":284,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["stubbornoptions",{"_index":313,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["stuff",{"_index":581,"title":{},"body":{"index.html":{}}}],["subject",{"_index":672,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":665,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":679,"title":{},"body":{"license.html":{}}}],["substractionlabel",{"_index":179,"title":{},"body":{"classes/Output.html":{}}}],["substractionlabel(error",{"_index":217,"title":{},"body":{"classes/Output.html":{}}}],["substration",{"_index":180,"title":{},"body":{"classes/Output.html":{}}}],["substration(text",{"_index":219,"title":{},"body":{"classes/Output.html":{}}}],["subtraction",{"_index":240,"title":{},"body":{"classes/Output.html":{}}}],["success",{"_index":462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["switch",{"_index":274,"title":{},"body":{"classes/Output.html":{}}}],["symbol",{"_index":344,"title":{},"body":{"classes/Stubborn.html":{}}}],["symbol.for('cleared",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.for('not_implemented",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.for('wildcard",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tab",{"_index":181,"title":{},"body":{"classes/Output.html":{}}}],["tab(text",{"_index":221,"title":{},"body":{"classes/Output.html":{}}}],["table",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["tagsthen",{"_index":635,"title":{},"body":{"index.html":{}}}],["template",{"_index":71,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["templatearray",{"_index":72,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["templatefunction",{"_index":67,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["templateobject",{"_index":69,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["test",{"_index":548,"title":{},"body":{"index.html":{}}}],["testing",{"_index":528,"title":{},"body":{"index.html":{}}}],["text",{"_index":191,"title":{},"body":{"classes/Output.html":{}}}],["therefore",{"_index":593,"title":{},"body":{"index.html":{}}}],["this.add",{"_index":233,"title":{},"body":{"classes/Output.html":{}}}],["this.add(color.bold.underline(uccat",{"_index":232,"title":{},"body":{"classes/Output.html":{}}}],["this.add(line",{"_index":227,"title":{},"body":{"classes/Output.html":{}}}],["this.add(this.addition(this.tab(addition",{"_index":239,"title":{},"body":{"classes/Output.html":{}}}],["this.add(this.substration(this.tab(substration",{"_index":238,"title":{},"body":{"classes/Output.html":{}}}],["this.add(this.substration(this.tab(subtraction",{"_index":241,"title":{},"body":{"classes/Output.html":{}}}],["this.additionlabel(error",{"_index":236,"title":{},"body":{"classes/Output.html":{}}}],["this.category(cat",{"_index":250,"title":{},"body":{"classes/Output.html":{}}}],["this.currenttab",{"_index":243,"title":{},"body":{"classes/Output.html":{}}}],["this.emitter",{"_index":379,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.emit(events.cleared",{"_index":383,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.off(event",{"_index":399,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.on(event",{"_index":397,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.once(event",{"_index":398,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.erroreq(error",{"_index":277,"title":{},"body":{"classes/Output.html":{}}}],["this.errorext(error",{"_index":280,"title":{},"body":{"classes/Output.html":{}}}],["this.errormiss(error",{"_index":279,"title":{},"body":{"classes/Output.html":{}}}],["this.newline",{"_index":249,"title":{},"body":{"classes/Output.html":{}}}],["this.options",{"_index":372,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.options.host",{"_index":378,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.output.join('\\n",{"_index":242,"title":{},"body":{"classes/Output.html":{}}}],["this.output.push(lines",{"_index":228,"title":{},"body":{"classes/Output.html":{}}}],["this.port",{"_index":375,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.pulltab",{"_index":273,"title":{},"body":{"classes/Output.html":{}}}],["this.pushtab",{"_index":256,"title":{},"body":{"classes/Output.html":{}}}],["this.rendererror(e",{"_index":272,"title":{},"body":{"classes/Output.html":{}}}],["this.rendererror(error",{"_index":255,"title":{},"body":{"classes/Output.html":{}}}],["this.rendermultipleserrors(errors",{"_index":253,"title":{},"body":{"classes/Output.html":{}}}],["this.renderoneerror(errors",{"_index":252,"title":{},"body":{"classes/Output.html":{}}}],["this.request.body",{"_index":140,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.hash",{"_index":141,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.headers",{"_index":138,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.method",{"_index":136,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.path",{"_index":137,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.query",{"_index":139,"title":{},"body":{"classes/Debugger.html":{}}}],["this.router",{"_index":377,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.addroute(route",{"_index":391,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.clear",{"_index":382,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.delete",{"_index":385,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.get",{"_index":386,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.patch",{"_index":387,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.post",{"_index":389,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.put",{"_index":390,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.handle(this.server",{"_index":394,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server",{"_index":376,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.close",{"_index":396,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.listen(this.port",{"_index":393,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.substractionlabel(error",{"_index":234,"title":{},"body":{"classes/Output.html":{}}}],["throwhttperrors",{"_index":571,"title":{},"body":{"index.html":{}}}],["throwing",{"_index":608,"title":{},"body":{"index.html":{}}}],["todo",{"_index":29,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["tool",{"_index":529,"title":{},"body":{"index.html":{}}}],["tort",{"_index":702,"title":{},"body":{"license.html":{}}}],["true",{"_index":294,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["tslint:disable",{"_index":156,"title":{},"body":{"classes/Debugger.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":711,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":45,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["types",{"_index":54,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["types.indexof(a.type",{"_index":267,"title":{},"body":{"classes/Output.html":{}}}],["types.indexof(b.type",{"_index":269,"title":{},"body":{"classes/Output.html":{}}}],["types.length",{"_index":266,"title":{},"body":{"classes/Output.html":{}}}],["typescript",{"_index":287,"title":{},"body":{"classes/Stubborn.html":{}}}],["uccat",{"_index":229,"title":{},"body":{"classes/Output.html":{}}}],["undefined",{"_index":47,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["unload",{"_index":532,"title":{},"body":{"index.html":{}}}],["up",{"_index":551,"title":{},"body":{"index.html":{}}}],["update",{"_index":616,"title":{},"body":{"index.html":{}}}],["urlsearchparams",{"_index":88,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["usage",{"_index":517,"title":{},"body":{"index.html":{}}}],["use",{"_index":30,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":601,"title":{},"body":{"index.html":{}}}],["using",{"_index":553,"title":{},"body":{"index.html":{}}}],["utils",{"_index":369,"title":{},"body":{"classes/Stubborn.html":{}}}],["val",{"_index":489,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validate",{"_index":481,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validatefn",{"_index":716,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["validates",{"_index":543,"title":{},"body":{"index.html":{}}}],["value",{"_index":41,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":49,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/functions.html":{}}}],["variable",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":718,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["very",{"_index":541,"title":{},"body":{"index.html":{}}}],["void",{"_index":92,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["warranties",{"_index":687,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":682,"title":{},"body":{"license.html":{}}}],["web",{"_index":503,"title":{},"body":{"index.html":{}}}],["webserver",{"_index":533,"title":{},"body":{"index.html":{}}}],["whether",{"_index":699,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":16,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":657,"title":{},"body":{"license.html":{}}}],["ws",{"_index":288,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["wsusage",{"_index":527,"title":{},"body":{"index.html":{}}}],["wsyarn",{"_index":525,"title":{},"body":{"index.html":{}}}],["x",{"_index":580,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":628,"title":{},"body":{"index.html":{}}}],["year",{"_index":643,"title":{},"body":{"license.html":{}}}],["z",{"_index":586,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/BodyDefinitionArray.html":{"url":"interfaces/BodyDefinitionArray.html","title":"interface - BodyDefinitionArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BodyDefinitionArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n\n\n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from 'http';\nimport { DIFF_TYPES, METHODS, WILDCARD } from '../constants';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type Request = IncomingMessage &\n  RequestInfo & {\n    searchParams?: URLSearchParams;\n  };\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue;\n\nexport interface DiffError {\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Debugger.html":{"url":"classes/Debugger.html","title":"class - Debugger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Debugger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/debug/Debugger.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getInfo\n                            \n                            \n                                    Public\n                                logDiff\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/debug/Debugger.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Debugger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { method: any; path: any; headers: any; query: any; body: any; hash: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            logDiff\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logDiff(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Debugger.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Request } from '../@types';\nimport { bodyDiff } from '../diff/bodyDiff';\nimport { headersDiff } from '../diff/headersDiff';\nimport { methodDiff } from '../diff/methodDiff';\nimport { pathDiff } from '../diff/pathDiff';\nimport { queryDiff } from '../diff/queryDiff';\nimport { Route } from '../Route';\nimport { Output } from './Output';\n\nexport class Debugger {\n  constructor(private request: Request) {}\n\n  public getInfo() {\n    return {\n      method: this.request.method,\n      path: this.request.path,\n      headers: this.request.headers,\n      query: this.request.query,\n      body: this.request.body,\n      hash: this.request.hash,\n    };\n  }\n\n  public logDiff(route: Route) {\n    const out = new Output();\n\n    out.renderErrors(\n      'Method',\n      methodDiff(route.getMethod(), this.request.method),\n    );\n    out.renderErrors('Path', pathDiff(route.getPath(), this.request.path));\n    out.renderErrors(\n      'Headers',\n      headersDiff(route.getHeaders(), this.request.headers),\n    );\n    out.renderErrors(\n      'Query',\n      queryDiff(route.getQueryParameters(), this.request.query),\n    );\n    const body =\n      this.request.body instanceof Buffer\n        ? String(this.request.body)\n        : this.request.body;\n    out.renderErrors('Body', bodyDiff(route.getBody(), body));\n\n    // tslint:disable-next-line:no-console\n    console.log(out.render());\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiffError.html":{"url":"interfaces/DiffError.html","title":"interface - DiffError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DiffError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        definition\n                                \n                                \n                                        path\n                                \n                                \n                                        type\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        definition\n                                    \n                                \n                                \n                                    \n                                        definition:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         DIFF_TYPES\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DIFF_TYPES\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         JsonValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JsonValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from 'http';\nimport { DIFF_TYPES, METHODS, WILDCARD } from '../constants';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type Request = IncomingMessage &\n  RequestInfo & {\n    searchParams?: URLSearchParams;\n  };\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue;\n\nexport interface DiffError {\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JsonArray.html":{"url":"interfaces/JsonArray.html","title":"interface - JsonArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JsonArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n\n\n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from 'http';\nimport { DIFF_TYPES, METHODS, WILDCARD } from '../constants';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type Request = IncomingMessage &\n  RequestInfo & {\n    searchParams?: URLSearchParams;\n  };\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue;\n\nexport interface DiffError {\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Output.html":{"url":"classes/Output.html","title":"class - Output","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Output\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/debug/Output.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentTab\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                addition\n                            \n                            \n                                    Private\n                                additionLabel\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                errorEq\n                            \n                            \n                                    Public\n                                errorExt\n                            \n                            \n                                    Public\n                                errorMiss\n                            \n                            \n                                    Public\n                                newLine\n                            \n                            \n                                    Public\n                                pullTab\n                            \n                            \n                                    Public\n                                pushTab\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                renderError\n                            \n                            \n                                    Public\n                                renderErrors\n                            \n                            \n                                    Public\n                                renderMultiplesErrors\n                            \n                            \n                                    Public\n                                renderOneError\n                            \n                            \n                                    Private\n                                substractionLabel\n                            \n                            \n                                    Public\n                                substration\n                            \n                            \n                                    Public\n                                tab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(output: string[])\n                    \n                \n                        \n                            \n                                Defined in src/debug/Output.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        output\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/debug/Output.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(lines: string | string[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lines\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addition(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            additionLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    additionLabel(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            category\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    category(cat: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cat\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            errorEq\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorEq(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            errorExt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorExt(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            errorMiss\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorMiss(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            newLine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newLine()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            pullTab\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    pullTab()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            pushTab\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    pushTab()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderError(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderErrors\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderErrors(cat: string, errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cat\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderMultiplesErrors\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderMultiplesErrors(errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderOneError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderOneError(errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            substractionLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    substractionLabel(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            substration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    substration(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            tab\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    tab(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Color from 'chalk';\n\nimport { DiffError } from '../@types';\nimport { DIFF_TYPES } from '../constants';\n\nexport class Output {\n  private currentTab = 0;\n  constructor(private output: string[] = []) {}\n\n  public add(lines: string | string[]) {\n    if (Array.isArray(lines)) {\n      lines.forEach(line => this.add(line));\n      return this;\n    }\n\n    this.output.push(lines);\n\n    return this;\n  }\n\n  public category(cat: string) {\n    const ucCat = cat[0].toUpperCase() + cat.slice(1);\n\n    return this.add(Color.bold.underline(ucCat));\n  }\n\n  public newLine() {\n    return this.add('');\n  }\n\n  public errorEq(error: DiffError) {\n    const substration = `${this.substractionLabel(error)}: ${String(\n      error.value,\n    )}`;\n    const addition = `${this.additionLabel(error)}: ${String(\n      error.definition,\n    )}`;\n    this.add(this.substration(this.tab(substration)));\n    this.add(this.addition(this.tab(addition)));\n  }\n\n  public errorMiss(error: DiffError) {\n    const addition = `${this.additionLabel(error)}: ${String(\n      error.definition,\n    )}`;\n    this.add(this.addition(this.tab(addition)));\n  }\n\n  public errorExt(error: DiffError) {\n    const subtraction = `${this.substractionLabel(error)}: ${String(\n      error.value,\n    )}`;\n    this.add(this.substration(this.tab(subtraction)));\n  }\n\n  public render() {\n    return this.output.join('\\n');\n  }\n\n  public pushTab() {\n    this.currentTab++;\n  }\n\n  public pullTab() {\n    this.currentTab--;\n  }\n\n  public addition(text: string) {\n    return Color.green(`+ ${text}`);\n  }\n\n  public substration(text: string) {\n    return Color.red(`- ${text}`);\n  }\n\n  public tab(text: string) {\n    return ' '.repeat(this.currentTab * 2) + text;\n  }\n\n  public renderErrors(cat: string, errors: DiffError[]) {\n    if (errors.length === 0) {\n      return;\n    }\n\n    this.newLine();\n\n    this.category(cat);\n    errors.length === 1\n      ? this.renderOneError(errors)\n      : this.renderMultiplesErrors(errors);\n  }\n\n  public renderOneError(errors: DiffError[]) {\n    const error = errors.pop() as DiffError;\n    this.renderError(error);\n  }\n\n  public renderMultiplesErrors(errors: DiffError[]) {\n    this.pushTab();\n\n    errors.sort((a: DiffError, b: DiffError) => {\n      const types = [\n        DIFF_TYPES.MISSING,\n        DIFF_TYPES.EXTRA,\n        DIFF_TYPES.FAIL_EQUALITY,\n        DIFF_TYPES.FAIL_MATCHING,\n        DIFF_TYPES.FAIL_FUNCTION,\n        DIFF_TYPES.INVALID_VALUE_TYPE,\n      ];\n      const aWeight = types.length - types.indexOf(a.type);\n      const bWeight = types.length - types.indexOf(b.type);\n\n      if (aWeight === bWeight) {\n        return 0;\n      }\n\n      return aWeight > bWeight ? -1 : 1;\n    });\n\n    errors.forEach((e, i) => {\n      if (i !== 0 && ![DIFF_TYPES.MISSING, DIFF_TYPES.EXTRA].includes(e.type)) {\n        this.newLine();\n      }\n\n      this.renderError(e);\n    });\n    this.pullTab();\n  }\n\n  public renderError(error: DiffError) {\n    switch (error.type) {\n      case DIFF_TYPES.FAIL_EQUALITY:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.FAIL_MATCHING:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.FAIL_FUNCTION:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.MISSING:\n        this.errorMiss(error);\n        break;\n      case DIFF_TYPES.EXTRA:\n        this.errorExt(error);\n        break;\n      case DIFF_TYPES.INVALID_VALUE_TYPE:\n        this.errorEq(error);\n        break;\n    }\n  }\n\n  private substractionLabel(error: DiffError) {\n    return error.path === '' ? 'Received' : error.path;\n  }\n\n  private additionLabel(error: DiffError) {\n    return error.path === '' ? 'Expected' : error.path;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stubborn.html":{"url":"classes/Stubborn.html","title":"class - Stubborn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stubborn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Stubborn.ts\n        \n\n\n\n\n            \n                Example\n            \n            \n                        \n                            ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n                        \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitter\n                            \n                            \n                                    Private\n                                options\n                            \n                            \n                                    Private\n                                port\n                            \n                            \n                                    Private\n                                router\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRoute\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getOrigin\n                            \n                            \n                                    Public\n                                getPort\n                            \n                            \n                                    Public\n                                off\n                            \n                            \n                                    Public\n                                on\n                            \n                            \n                                    Public\n                                once\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: StubbornOptions)\n                    \n                \n                        \n                            \n                                Defined in src/Stubborn.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        StubbornOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            emitter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventEmitter\n\n                        \n                    \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StubbornOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            port\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRoute\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRoute(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:131\n                \n            \n\n\n            \n                \n                    Register a new route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route a Route object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:71\n                \n            \n\n\n            \n                \n                    Remove all routes from the server\n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:84\n                \n            \n\n\n            \n                \n                    Create and Register a new DELETE route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:93\n                \n            \n\n\n            \n                \n                    Create and Register a new GET route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOrigin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrigin()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:64\n                \n            \n\n\n            \n                \n                    Returns the server origin (http://:)\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the server origin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPort\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPort()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:56\n                \n            \n\n\n            \n                \n                    Returns the server port.\nIf the server is initialized with options.port set to 0 this method\nwill return the randomly affected port only after the server is started\n\n\n                    \n                    \n                    \n                        Returns :     number | null\n\n                    \n                    \n                        Listening port or null if the server is not started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            off\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    off(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            on\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    on(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            once\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    once(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:103\n                \n            \n\n\n            \n                \n                    Create and Register a new PACH route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:113\n                \n            \n\n\n            \n                \n                    Create and Register a new POST route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:123\n                \n            \n\n\n            \n                \n                    Create and Register a new PUT route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(port: number)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:139\n                \n            \n\n\n            \n                \n                    Start the Stubborn server\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:154\n                \n            \n\n\n            \n                \n                    Stop the Stubborn server\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is stopped\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import EventEmitter from 'events';\nimport { createServer, Server } from 'http';\n\nimport { BodyDefinition, HeadersDefinition, PathDefinition } from './@types';\nimport { EVENTS, METHODS } from './constants';\nimport { Route } from './Route';\nimport { Router } from './Router';\nimport { getServerPort } from './utils';\n\nexport type StubbornOptions = {\n  host?: string;\n  defaultHeaders?: HeadersDefinition;\n};\n\n/**\n * @example\n * ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n */\nexport class Stubborn {\n  private server: Server;\n  private port: number | null;\n  private router: Router;\n  private options: StubbornOptions;\n  private emitter: EventEmitter = new EventEmitter();\n\n  constructor(options: StubbornOptions = {}) {\n    this.options = Object.assign(\n      {\n        host: 'localhost',\n        defaultHeaders: {},\n      },\n      options,\n    );\n\n    this.port = null;\n    this.server = createServer();\n    this.router = new Router({ host: this.options.host }, this.emitter);\n  }\n\n  /**\n   * Returns the server port.\n   *\n   * If the server is initialized with options.port set to 0 this method\n   * will return the randomly affected port only after the server is started\n   * @returns Listening port or null if the server is not started\n   */\n  public getPort(): number | null {\n    return getServerPort(this.server);\n  }\n\n  /**\n   * Returns the server origin (http://:)\n   * @returns the server origin\n   */\n  public getOrigin(): string {\n    return `http://${this.options.host}:${this.getPort()}`;\n  }\n\n  /**\n   * Remove all routes from the server\n   */\n  public clear() {\n    this.router.clear();\n\n    this.emitter.emit(EVENTS.CLEARED);\n\n    return this;\n  }\n\n  /**\n   * Create and Register a new DELETE route\n   *\n   * @param path Path matching definition\n   */\n  public delete(path: PathDefinition) {\n    return this.router.createRoute(METHODS.DELETE, path);\n  }\n\n  /**\n   * Create and Register a new GET route\n   *\n   * @param path Path matching definition\n   */\n  public get(path: PathDefinition) {\n    return this.router.createRoute(METHODS.GET, path);\n  }\n\n  /**\n   * Create and Register a new PACH route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public patch(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.PATCH, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new POST route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public post(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.POST, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new PUT route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public put(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.PUT, path).setBody(body);\n  }\n  /**\n   * Register a new route\n   *\n   * @param route Route a Route object\n   */\n  public addRoute(route: Route) {\n    return this.router.addRoute(route);\n  }\n\n  /**\n   * Start the Stubborn server\n   * @returns Promise object resolved when server is started\n   */\n  public start(port: number = 0) {\n    this.port = port;\n\n    return new Promise(resolve => {\n      this.server.listen(this.port);\n      this.router.handle(this.server);\n      resolve();\n    });\n  }\n\n  /**\n   * Stop the Stubborn server\n   *\n   * @returns Promise object resolved when server is stopped\n   */\n  public stop() {\n    return new Promise(resolve => {\n      this.server.close(() => resolve());\n    });\n  }\n\n  public on(event: symbol, listener: (...args: any[]) => void) {\n    this.emitter.on(event, listener);\n  }\n\n  public once(event: symbol, listener: (...args: any[]) => void) {\n    this.emitter.once(event, listener);\n  }\n\n  public off(event: symbol, listener: (...args: any[]) => void) {\n    this.emitter.off(event, listener);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            BodyDefinitionArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            DiffError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            JsonArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Route.ts\n            \n            class\n            Route\n            \n                50 %\n                (14/28)\n            \n        \n        \n            \n                \n                src/Stubborn.ts\n            \n            class\n            Stubborn\n            \n                52 %\n                (11/21)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            EVENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            WILDCARD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/debug/Debugger.ts\n            \n            class\n            Debugger\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/debug/Output.ts\n            \n            class\n            Output\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/diff/bodyDiff.ts\n            \n            function\n            bodyDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/bodyDiff.ts\n            \n            function\n            rec\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/headersDiff.ts\n            \n            function\n            headersDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/headersDiff.ts\n            \n            function\n            keysToLowerCase\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/methodDiff.ts\n            \n            function\n            methodDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/pathDiff.ts\n            \n            function\n            pathDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/queryDiff.ts\n            \n            function\n            checkParameters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/queryDiff.ts\n            \n            function\n            queryDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/requestDiff.ts\n            \n            function\n            requestDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkExtra\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkMissing\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkValues\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            differenceKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            findErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            findErrorsObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            formatDiffError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            formatPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            intersectKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            stringify\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            logDiffOn501\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/accept : ^4.0.0\n        \n            body-parser : ^1.19.0\n        \n            chalk : ^3.0.0\n        \n            content-type : ^1.0.4\n        \n            lodash : ^4.17.15\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DIFF_TYPES   (src/.../constants.ts)\n                        \n                        \n                            METHODS   (src/.../constants.ts)\n                        \n                        \n                            STATUS_CODES   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        DIFF_TYPES\n                    \n                \n                        \n                            \n                                 FAIL_EQUALITY\n                            \n                        \n                        \n                            \n                                Value : FAIL_EQUALITY\n                            \n                        \n                        \n                            \n                                 FAIL_MATCHING\n                            \n                        \n                        \n                            \n                                Value : FAIL_MATCHING\n                            \n                        \n                        \n                            \n                                 FAIL_FUNCTION\n                            \n                        \n                        \n                            \n                                Value : FAIL_FUNCTION\n                            \n                        \n                        \n                            \n                                 MISSING\n                            \n                        \n                        \n                            \n                                Value : MISSING\n                            \n                        \n                        \n                            \n                                 EXTRA\n                            \n                        \n                        \n                            \n                                Value : EXTRA\n                            \n                        \n                        \n                            \n                                 INVALID_VALUE_TYPE\n                            \n                        \n                        \n                            \n                                Value : INVALID_VALUE_TYPE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        METHODS\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        STATUS_CODES\n                    \n                \n                        \n                            \n                                 SUCCESS\n                            \n                        \n                        \n                            \n                                Value : 200\n                            \n                        \n                        \n                            \n                                 NOT_IMPLEMENTED\n                            \n                        \n                        \n                            \n                                Value : 501\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bodyDiff   (src/.../bodyDiff.ts)\n                        \n                        \n                            checkExtra   (src/.../utils.ts)\n                        \n                        \n                            checkMissing   (src/.../utils.ts)\n                        \n                        \n                            checkParameters   (src/.../queryDiff.ts)\n                        \n                        \n                            checkValue   (src/.../utils.ts)\n                        \n                        \n                            checkValues   (src/.../utils.ts)\n                        \n                        \n                            differenceKeys   (src/.../utils.ts)\n                        \n                        \n                            findErrors   (src/.../utils.ts)\n                        \n                        \n                            findErrorsObject   (src/.../utils.ts)\n                        \n                        \n                            formatDiffError   (src/.../utils.ts)\n                        \n                        \n                            formatPath   (src/.../utils.ts)\n                        \n                        \n                            headersDiff   (src/.../headersDiff.ts)\n                        \n                        \n                            intersectKeys   (src/.../utils.ts)\n                        \n                        \n                            keysToLowerCase   (src/.../headersDiff.ts)\n                        \n                        \n                            logDiffOn501   (src/.../utils.ts)\n                        \n                        \n                            methodDiff   (src/.../methodDiff.ts)\n                        \n                        \n                            pathDiff   (src/.../pathDiff.ts)\n                        \n                        \n                            queryDiff   (src/.../queryDiff.ts)\n                        \n                        \n                            rec   (src/.../bodyDiff.ts)\n                        \n                        \n                            requestDiff   (src/.../requestDiff.ts)\n                        \n                        \n                            stringify   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/diff/bodyDiff.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bodyDiff\n                        \n                        \n                    \n                \n            \n            \n                \nbodyDiff(definitions, values)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    definitions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DiffError[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            rec\n                        \n                        \n                    \n                \n            \n            \n                \nrec(definitions, values, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    definitions\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/diff/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            checkExtra\n                        \n                        \n                    \n                \n            \n            \n                \ncheckExtra(definitions, values, prefix)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    definitions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkMissing\n                        \n                        \n                    \n                \n            \n            \n                \ncheckMissing(definitions, values, prefix)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    definitions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkValue\n                        \n                        \n                    \n                \n            \n            \n                \ncheckValue(definition: any, value: any, path)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    definition\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DiffError[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkValues\n                        \n                        \n                    \n                \n            \n            \n                \ncheckValues(definitions, values, validate, prefix)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    definitions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validate\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            differenceKeys\n                        \n                        \n                    \n                \n            \n            \n                \ndifferenceKeys(a, b)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findErrors\n                        \n                        \n                    \n                \n            \n            \n                \nfindErrors(definitions: any, values: any, validate, prefix)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    definitions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validate\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DiffError[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findErrorsObject\n                        \n                        \n                    \n                \n            \n            \n                \nfindErrorsObject(definitions, values: any, validate, prefix)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    definitions\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validate\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            formatDiffError\n                        \n                        \n                    \n                \n            \n            \n                \nformatDiffError(undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            formatPath\n                        \n                        \n                    \n                \n            \n            \n                \nformatPath(path, prefix)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intersectKeys\n                        \n                        \n                    \n                \n            \n            \n                \nintersectKeys(a, b)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            stringify\n                        \n                        \n                    \n                \n            \n            \n                \nstringify(val: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/diff/queryDiff.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            checkParameters\n                        \n                        \n                    \n                \n            \n            \n                \ncheckParameters(definition, value, path)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    definition\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            queryDiff\n                        \n                        \n                    \n                \n            \n            \n                \nqueryDiff(definitions, values)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    definitions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DiffError[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/diff/headersDiff.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            headersDiff\n                        \n                        \n                    \n                \n            \n            \n                \nheadersDiff(_definitions, _values)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _definitions\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _values\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DiffError[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keysToLowerCase\n                        \n                        \n                    \n                \n            \n            \n                \nkeysToLowerCase(o)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Record\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            logDiffOn501\n                        \n                        \n                    \n                \n            \n            \n                \nlogDiffOn501(stubborn, route)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stubborn\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    route\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/diff/methodDiff.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            methodDiff\n                        \n                        \n                    \n                \n            \n            \n                \nmethodDiff(def, value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    def\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DiffError[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/diff/pathDiff.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            pathDiff\n                        \n                        \n                    \n                \n            \n            \n                \npathDiff(def, value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    def\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DiffError[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/diff/requestDiff.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            requestDiff\n                        \n                        \n                    \n                \n            \n            \n                \nrequestDiff(route, request)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nStubborn\n \n\n\nStubborn web server to mock external api responses. It is basically nock meets Dyson. Stubborn will strictly match the requests based on the definition like nock but in a separate web server like Dyson.\n\n\n\nInstallation\nUsage\nAPI\nFAQ\nContributing\nRelease\n\n\n\n\n\nInstallation\nnpm install --save-dev stubborn-wsyarn add -D stubborn-wsUsage\nStubborn is a testing tool that let you hot load and unload routes into a webserver.\nRequests are strictly matched against routes definitions based on Method, Path, Query parameters, Headers and Body.\nIf the request does not exactly match one route definition (ex: extra parameter, missing parameter, value does not match, etc), Stubborn will respond with a 501.\nThe very fact that Stubborn respond to the request validates that the parameters sent are the expected one, any change in the code that send the request will break the test. Any breaking change will be picked up by your test.\nStubborn response headers and body can be hardcoded or defined using a template.\nimport request from 'got';\nimport { Stubborn } from 'stubborn-ws';\n\ndescribe('Test', () => {\n  const sb = new Stubborn();\n\n  beforeAll(async () => await sb.start());\n  afterAll(async () => await sb.stop());\n\n  // Clean up all routes after a test if needed\n  afterEach(() => sb.clear());\n\n  it('should respond to query', async () => {\n    const body = { some: 'body' };\n    sb.get('/').setResponseBody({ some: 'body' });\n\n    const res = await request(`${sb.getOrigin()}`, { json: true });\n\n    expect(res.body).toEqual(body);\n  });\n});Stubborn strictly matches the request against the route definition.\nIf a query parameter or a header is missing, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is missing', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}`, { throwHttpErrors: false });\n\n  expect(res.statusCode).toEqual(501);\n});If a query parameter or a header is added, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is added', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}?page=1&limit=10`, {\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(501);\n});If a query parameter or a header does not match the route definition, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter does not match the definition', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(501);\n});You can use null as wildcard\nit('should match using wildcard', async () => {\n  sb.get('/')\n    .setQueryParameters({ page: null })\n    .setHeaders(null);\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    headers: { 'x-api-key': 'api key', 'any-other-header': 'stuff' },\n    throwHttpErrors: false,\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use regex to match a parameter, header or body\nit('should match using a regexp', async () => {\n  sb.post('/', {\n    slug: /^[a-z\\-]*$/,\n  });\n\n  const res = await request(`${sb.getOrigin()}?page=2`, {\n    method: 'POST',\n    body: { slug: 'stubborn-ws' },\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use a function to match a parameter, header or body\nit('should match using a function', async () => {\n  sb.get('/').setQueryParameters({\n    page: value => parseInt(value as string) > 0,\n  });\n\n  const res = await request('/?page=2');\n\n  expect(res).toReplyWith(STATUS_CODES.SUCCESS);\n});Public API\nSee the API documentation\nFAQ\nQ: Stubborn is not matching my route definition and always return a 501\nStubborn is STUBBORN, therefore it will return a 501 if it does not exactly match the route definition you have set up.\nTo help you find what missing in the route definition, you can compare it to the response body returned when receiving a 501:\nimport {logDiff} from 'stubborn-ws';\n\nconst route = sb\n  .get('/')\n  // This header definition will miss additional header added by got, like user-agent, connexion, etc...\n  .setHeaders({ 'X-Api-Key': 'test' });\n\n// Will log in console the diff between the route and any request throwing a 501\nlogDiffOn501(sb, route);\n\nconst res = await request(sb.getOrigin(), {\n  headers: { 'x-api-key': 'api key' },\n});\n\nexpect(res.statusCode).toBe(501);\nQ: How do I know if stubborn has been called and matched the route defined?\nStubborn will return a 501 (Not Implemented) if it received a request but cannot match any route.\nIf the request matches the route it will respond according to the route response configuration and update the call property of the route\n  async function call() {\n    return request(sb.getOrigin());\n  }\n\n  // No route setup in Stubborn\n  const res = await call();\n\n  expect(res.statusCode).toBe(501);\n  expect(res.body).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n    // ...\n  });\n\n\n  const route = sb.get('/')\n    .setHeaders(null)\n    .setResponseBody('content');\n\n\n  const res = await call();\n  expect(res.calls.length).toBe(1);\n  expect(res.calls[0]).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n      // ...\n    });Contributing\nRelease\ngit checkout master\ngit pull --rebase\nyarn doc\ngit add .\ngit commit -m 'doc(): Update documentation'\nyarn publish --\ngit push --follow-tagsThen go to github to draft a new release\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) [year] [fullname]\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BodyDefinition   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionObject   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionPrimitive   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionValue   (src/.../index.ts)\n                        \n                        \n                            DefinitionMatcher   (src/.../index.ts)\n                        \n                        \n                            DefinitionValue   (src/.../index.ts)\n                        \n                        \n                            HeaderDefinition   (src/.../index.ts)\n                        \n                        \n                            HeadersDefinition   (src/.../index.ts)\n                        \n                        \n                            JsonObject   (src/.../index.ts)\n                        \n                        \n                            JsonPrimitive   (src/.../index.ts)\n                        \n                        \n                            JsonValue   (src/.../index.ts)\n                        \n                        \n                            MatchFunction   (src/.../index.ts)\n                        \n                        \n                            MethodDefinition   (src/.../index.ts)\n                        \n                        \n                            Middleware   (src/.../index.ts)\n                        \n                        \n                            NextFunction   (src/.../index.ts)\n                        \n                        \n                            ObjectOrArray   (src/.../utils.ts)\n                        \n                        \n                            PathDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryParameterDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryParameterDefinitionPrimitives   (src/.../index.ts)\n                        \n                        \n                            Request   (src/.../index.ts)\n                        \n                        \n                            RequestBody   (src/.../index.ts)\n                        \n                        \n                            RequestHash   (src/.../index.ts)\n                        \n                        \n                            RequestHeaders   (src/.../index.ts)\n                        \n                        \n                            RequestInfo   (src/.../index.ts)\n                        \n                        \n                            RequestMatcher   (src/.../index.ts)\n                        \n                        \n                            RequestMethod   (src/.../index.ts)\n                        \n                        \n                            RequestPath   (src/.../index.ts)\n                        \n                        \n                            RequestQuery   (src/.../index.ts)\n                        \n                        \n                            Response   (src/.../index.ts)\n                        \n                        \n                            ResponseBody   (src/.../index.ts)\n                        \n                        \n                            ResponseDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseHeaders   (src/.../index.ts)\n                        \n                        \n                            StubbornOptions   (src/.../Stubborn.ts)\n                        \n                        \n                            Template   (src/.../index.ts)\n                        \n                        \n                            TemplateArray   (src/.../index.ts)\n                        \n                        \n                            TemplateFunction   (src/.../index.ts)\n                        \n                        \n                            TemplateObject   (src/.../index.ts)\n                        \n                        \n                            ValidateFn   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/@types/index.ts\n    \n    \n        \n            \n                \n                    \n                    BodyDefinition\n                \n            \n            \n                \n                        undefined | BodyDefinitionValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionPrimitive\n                \n            \n            \n                \n                        DefinitionMatcher | JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionValue\n                \n            \n            \n                \n                            BodyDefinitionPrimitive | BodyDefinitionObject | BodyDefinitionArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DefinitionMatcher\n                \n            \n            \n                \n                            RegExp | MatchFunction | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DefinitionValue\n                \n            \n            \n                \n                            DefinitionMatcher | JsonValue | undefined | METHODS\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderDefinition\n                \n            \n            \n                \n                            DefinitionMatcher | string | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersDefinition\n                \n            \n            \n                \n                            Record | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonPrimitive\n                \n            \n            \n                \n                        string | number | boolean | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonValue\n                \n            \n            \n                \n                            JsonPrimitive | JsonObject | JsonArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatchFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MethodDefinition\n                \n            \n            \n                \n                            METHODS\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Middleware\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PathDefinition\n                \n            \n            \n                \n                            DefinitionMatcher | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryDefinition\n                \n            \n            \n                \n                            Record | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryParameterDefinition\n                \n            \n            \n                \n                        QueryParameterDefinitionPrimitives | QueryParameterDefinitionPrimitives[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryParameterDefinitionPrimitives\n                \n            \n            \n                \n                            DefinitionMatcher | string | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Request\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestBody\n                \n            \n            \n                \n                            JsonValue | undefined\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestHash\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestHeaders\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMatcher\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMethod\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestPath\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestQuery\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                            ServerResponse\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBody\n                \n            \n            \n                \n                            JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseDefinition\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseHeaders\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Template\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject | TemplateArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateArray\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/diff/utils.ts\n    \n    \n        \n            \n                \n                    \n                    ObjectOrArray\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ValidateFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/Stubborn.ts\n    \n    \n        \n            \n                \n                    \n                    StubbornOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENTS   (src/.../constants.ts)\n                        \n                        \n                            WILDCARD   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EVENTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  NOT_IMPLEMENTED: Symbol.for('NOT_IMPLEMENTED'),\n  CLEARED: Symbol.for('CLEARED'),\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WILDCARD\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Symbol.for('WILDCARD')\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
